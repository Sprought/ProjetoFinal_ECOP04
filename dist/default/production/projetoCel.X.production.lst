

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Aug 01 12:36:33 2021

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41  0000                     
    42                           ; Version 2.10
    43                           ; Generated 31/07/2019 GMT
    44                           ; 
    45                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4520 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataBANK0
    78  002084                     __pidataBANK0:
    79                           	opt callstack 0
    80                           
    81                           ;initializer for main@F2384
    82  002084  00                 	db	0
    83  002085  00                 	db	0
    84  002086  07                 	db	7
    85  002087  0F                 	db	15
    86  002088  0F                 	db	15
    87  002089  0F                 	db	15
    88  00208A  0E                 	db	14
    89  00208B  0E                 	db	14
    90  00208C  00                 	db	0
    91  00208D  00                 	db	0
    92  00208E  00                 	db	0
    93  00208F  10                 	db	16
    94  002090  10                 	db	16
    95  002091  00                 	db	0
    96  002092  00                 	db	0
    97  002093  00                 	db	0
    98  002094  06                 	db	6
    99  002095  07                 	db	7
   100  002096  03                 	db	3
   101  002097  01                 	db	1
   102  002098  00                 	db	0
   103  002099  00                 	db	0
   104  00209A  00                 	db	0
   105  00209B  00                 	db	0
   106  00209C  06                 	db	6
   107  00209D  0F                 	db	15
   108  00209E  1F                 	db	31
   109  00209F  1F                 	db	31
   110  0020A0  1E                 	db	30
   111  0020A1  00                 	db	0
   112  0020A2  00                 	db	0
   113  0020A3  00                 	db	0
   114                           
   115                           	psect	idataBANK1
   116  001E52                     __pidataBANK1:
   117                           	opt callstack 0
   118                           
   119                           ;initializer for _listaLetras
   120  001E52  31                 	db	49
   121  001E53  61                 	db	97
   122  001E54  62                 	db	98
   123  001E55  63                 	db	99
   124  001E56  41                 	db	65
   125  001E57  42                 	db	66
   126  001E58  43                 	db	67
   127  001E59  32                 	db	50
   128  001E5A  64                 	db	100
   129  001E5B  65                 	db	101
   130  001E5C  66                 	db	102
   131  001E5D  44                 	db	68
   132  001E5E  45                 	db	69
   133  001E5F  46                 	db	70
   134  001E60  33                 	db	51
   135  001E61  67                 	db	103
   136  001E62  68                 	db	104
   137  001E63  69                 	db	105
   138  001E64  47                 	db	71
   139  001E65  48                 	db	72
   140  001E66  49                 	db	73
   141  001E67  34                 	db	52
   142  001E68  6A                 	db	106
   143  001E69  6B                 	db	107
   144  001E6A  6C                 	db	108
   145  001E6B  4A                 	db	74
   146  001E6C  4B                 	db	75
   147  001E6D  4C                 	db	76
   148  001E6E  35                 	db	53
   149  001E6F  6D                 	db	109
   150  001E70  6E                 	db	110
   151  001E71  6F                 	db	111
   152  001E72  4D                 	db	77
   153  001E73  4E                 	db	78
   154  001E74  4F                 	db	79
   155  001E75  36                 	db	54
   156  001E76  70                 	db	112
   157  001E77  71                 	db	113
   158  001E78  72                 	db	114
   159  001E79  73                 	db	115
   160  001E7A  50                 	db	80
   161  001E7B  51                 	db	81
   162  001E7C  52                 	db	82
   163  001E7D  53                 	db	83
   164  001E7E  37                 	db	55
   165  001E7F  74                 	db	116
   166  001E80  75                 	db	117
   167  001E81  76                 	db	118
   168  001E82  54                 	db	84
   169  001E83  55                 	db	85
   170  001E84  56                 	db	86
   171  001E85  38                 	db	56
   172  001E86  77                 	db	119
   173  001E87  78                 	db	120
   174  001E88  79                 	db	121
   175  001E89  7A                 	db	122
   176  001E8A  57                 	db	87
   177  001E8B  58                 	db	88
   178  001E8C  59                 	db	89
   179  001E8D  5A                 	db	90
   180  001E8E  39                 	db	57
   181  001E8F  20                 	db	32
   182  001E90  23                 	db	35
   183  001E91  2A                 	db	42
   184  001E92  30                 	db	48
   185                           
   186                           ;initializer for main@F2386
   187  001E93  00                 	db	0
   188  001E94  00                 	db	0
   189  001E95  00                 	db	0
   190  001E96  00                 	db	0
   191  001E97  00                 	db	0
   192  001E98  1F                 	db	31
   193  001E99  18                 	db	24
   194  001E9A  14                 	db	20
   195  001E9B  00                 	db	0
   196  001E9C  00                 	db	0
   197  001E9D  00                 	db	0
   198  001E9E  00                 	db	0
   199  001E9F  00                 	db	0
   200  001EA0  1F                 	db	31
   201  001EA1  03                 	db	3
   202  001EA2  05                 	db	5
   203  001EA3  12                 	db	18
   204  001EA4  11                 	db	17
   205  001EA5  10                 	db	16
   206  001EA6  10                 	db	16
   207  001EA7  1F                 	db	31
   208  001EA8  00                 	db	0
   209  001EA9  00                 	db	0
   210  001EAA  00                 	db	0
   211  001EAB  09                 	db	9
   212  001EAC  11                 	db	17
   213  001EAD  01                 	db	1
   214  001EAE  01                 	db	1
   215  001EAF  1F                 	db	31
   216  001EB0  00                 	db	0
   217  001EB1  00                 	db	0
   218  001EB2  00                 	db	0
   219                           
   220                           	psect	smallconst
   221  000600                     __psmallconst:
   222                           	opt callstack 0
   223  000600  00                 	db	0
   224  000601                     _linha:
   225                           	opt callstack 0
   226  000601  01                 	db	1
   227  000602  02                 	db	2
   228  000603  04                 	db	4
   229  000604  00                 	db	0
   230  000605                     __end_of_linha:
   231                           	opt callstack 0
   232  0000                     _PORTEbits	set	3972
   233  0000                     _PORTC	set	3970
   234  0000                     _PORTE	set	3972
   235  0000                     _ADCON1	set	4033
   236  0000                     _TRISE	set	3990
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISA	set	3986
   239  0000                     _PORTCbits	set	3970
   240  0000                     _TRISCbits	set	3988
   241  0000                     _PORTDbits	set	3971
   242  0000                     _TRISB	set	3987
   243  0000                     _TRISD	set	3989
   244  0000                     _PORTD	set	3971
   245  0000                     _PORTB	set	3969
   246  000605                     STR_13:
   247  000605  4F                 	db	79	;'O'
   248  000606  70                 	db	112	;'p'
   249  000607  61                 	db	97	;'a'
   250  000608  20                 	db	32
   251  000609  65                 	db	101	;'e'
   252  00060A  61                 	db	97	;'a'
   253  00060B  65                 	db	101	;'e'
   254  00060C  20                 	db	32
   255  00060D  76                 	db	118	;'v'
   256  00060E  65                 	db	101	;'e'
   257  00060F  69                 	db	105	;'i'
   258  000610  20                 	db	32
   259  000611  62                 	db	98	;'b'
   260  000612  6C                 	db	108	;'l'
   261  000613  7A                 	db	122	;'z'
   262  000614  2C                 	db	44
   263  000615  20                 	db	32
   264  000616  62                 	db	98	;'b'
   265  000617  6F                 	db	111	;'o'
   266  000618  72                 	db	114	;'r'
   267  000619  61                 	db	97	;'a'
   268  00061A  20                 	db	32
   269  00061B  69                 	db	105	;'i'
   270  00061C  72                 	db	114	;'r'
   271  00061D  20                 	db	32
   272  00061E  6E                 	db	110	;'n'
   273  00061F  75                 	db	117	;'u'
   274  000620  6D                 	db	109	;'m'
   275  000621  20                 	db	32
   276  000622  63                 	db	99	;'c'
   277  000623  68                 	db	104	;'h'
   278  000624  75                 	db	117	;'u'
   279  000625  72                 	db	114	;'r'
   280  000626  72                 	db	114	;'r'
   281  000627  61                 	db	97	;'a'
   282  000628  73                 	db	115	;'s'
   283  000629  3F                 	db	63	;'?'
   284  00062A  00                 	db	0
   285  00062B                     STR_4:
   286  00062B  34                 	db	52	;'4'
   287  00062C  2D                 	db	45
   288  00062D  54                 	db	84	;'T'
   289  00062E  65                 	db	101	;'e'
   290  00062F  73                 	db	115	;'s'
   291  000630  74                 	db	116	;'t'
   292  000631  65                 	db	101	;'e'
   293  000632  20                 	db	32
   294  000633  4D                 	db	77	;'M'
   295  000634  65                 	db	101	;'e'
   296  000635  6E                 	db	110	;'n'
   297  000636  73                 	db	115	;'s'
   298  000637  61                 	db	97	;'a'
   299  000638  67                 	db	103	;'g'
   300  000639  65                 	db	101	;'e'
   301  00063A  6D                 	db	109	;'m'
   302  00063B  00                 	db	0
   303  00063C                     STR_3:
   304  00063C  33                 	db	51	;'3'
   305  00063D  2D                 	db	45
   306  00063E  54                 	db	84	;'T'
   307  00063F  65                 	db	101	;'e'
   308  000640  73                 	db	115	;'s'
   309  000641  74                 	db	116	;'t'
   310  000642  65                 	db	101	;'e'
   311  000643  20                 	db	32
   312  000644  4C                 	db	76	;'L'
   313  000645  69                 	db	105	;'i'
   314  000646  67                 	db	103	;'g'
   315  000647  61                 	db	97	;'a'
   316  000648  72                 	db	114	;'r'
   317  000649  00                 	db	0
   318  00064A                     STR_14:
   319  00064A  52                 	db	82	;'R'
   320  00064B  6D                 	db	109	;'m'
   321  00064C  74                 	db	116	;'t'
   322  00064D  3A                 	db	58	;':'
   323  00064E  20                 	db	32
   324  00064F  46                 	db	70	;'F'
   325  000650  65                 	db	101	;'e'
   326  000651  69                 	db	105	;'i'
   327  000652  5F                 	db	95	;'_'
   328  000653  4A                 	db	74	;'J'
   329  000654  61                 	db	97	;'a'
   330  000655  31                 	db	49	;'1'
   331  000656  00                 	db	0
   332  000657                     STR_5:
   333  000657  45                 	db	69	;'E'
   334  000658  6E                 	db	110	;'n'
   335  000659  76                 	db	118	;'v'
   336  00065A  69                 	db	105	;'i'
   337  00065B  61                 	db	97	;'a'
   338  00065C  72                 	db	114	;'r'
   339  00065D  20                 	db	32
   340  00065E  70                 	db	112	;'p'
   341  00065F  61                 	db	97	;'a'
   342  000660  72                 	db	114	;'r'
   343  000661  61                 	db	97	;'a'
   344  000662  3A                 	db	58	;':'
   345  000663  00                 	db	0
   346  000664                     STR_2:
   347  000664  32                 	db	50	;'2'
   348  000665  2D                 	db	45
   349  000666  4D                 	db	77	;'M'
   350  000667  65                 	db	101	;'e'
   351  000668  6E                 	db	110	;'n'
   352  000669  73                 	db	115	;'s'
   353  00066A  61                 	db	97	;'a'
   354  00066B  67                 	db	103	;'g'
   355  00066C  65                 	db	101	;'e'
   356  00066D  6D                 	db	109	;'m'
   357  00066E  00                 	db	0
   358  00066F                     STR_22:
   359  00066F  52                 	db	82	;'R'
   360  000670  65                 	db	101	;'e'
   361  000671  63                 	db	99	;'c'
   362  000672  75                 	db	117	;'u'
   363  000673  73                 	db	115	;'s'
   364  000674  61                 	db	97	;'a'
   365  000675  64                 	db	100	;'d'
   366  000676  61                 	db	97	;'a'
   367  000677  00                 	db	0
   368  000678                     STR_12:
   369  000678  52                 	db	82	;'R'
   370  000679  65                 	db	101	;'e'
   371  00067A  63                 	db	99	;'c'
   372  00067B  65                 	db	101	;'e'
   373  00067C  62                 	db	98	;'b'
   374  00067D  69                 	db	105	;'i'
   375  00067E  64                 	db	100	;'d'
   376  00067F  61                 	db	97	;'a'
   377  000680  00                 	db	0
   378  000681                     STR_18:
   379  000681  41                 	db	65	;'A'
   380  000682  74                 	db	116	;'t'
   381  000683  65                 	db	101	;'e'
   382  000684  6E                 	db	110	;'n'
   383  000685  64                 	db	100	;'d'
   384  000686  69                 	db	105	;'i'
   385  000687  64                 	db	100	;'d'
   386  000688  61                 	db	97	;'a'
   387  000689  00                 	db	0
   388  00068A                     STR_7:
   389  00068A  45                 	db	69	;'E'
   390  00068B  6E                 	db	110	;'n'
   391  00068C  76                 	db	118	;'v'
   392  00068D  69                 	db	105	;'i'
   393  00068E  61                 	db	97	;'a'
   394  00068F  64                 	db	100	;'d'
   395  000690  61                 	db	97	;'a'
   396  000691  00                 	db	0
   397  000692                     STR_10:
   398  000692  43                 	db	67	;'C'
   399  000693  68                 	db	104	;'h'
   400  000694  61                 	db	97	;'a'
   401  000695  6D                 	db	109	;'m'
   402  000696  61                 	db	97	;'a'
   403  000697  64                 	db	100	;'d'
   404  000698  61                 	db	97	;'a'
   405  000699  00                 	db	0
   406  00069A                     STR_8:
   407  00069A  4C                 	db	76	;'L'
   408  00069B  69                 	db	105	;'i'
   409  00069C  67                 	db	103	;'g'
   410  00069D  61                 	db	97	;'a'
   411  00069E  6E                 	db	110	;'n'
   412  00069F  64                 	db	100	;'d'
   413  0006A0  6F                 	db	111	;'o'
   414  0006A1  00                 	db	0
   415  0006A2                     STR_1:
   416  0006A2  31                 	db	49	;'1'
   417  0006A3  2D                 	db	45
   418  0006A4  4C                 	db	76	;'L'
   419  0006A5  69                 	db	105	;'i'
   420  0006A6  67                 	db	103	;'g'
   421  0006A7  61                 	db	97	;'a'
   422  0006A8  72                 	db	114	;'r'
   423  0006A9  00                 	db	0
   424  0006AA                     STR_9:
   425  0006AA  46                 	db	70	;'F'
   426  0006AB  69                 	db	105	;'i'
   427  0006AC  6D                 	db	109	;'m'
   428  0006AD  20                 	db	32
   429  0006AE  64                 	db	100	;'d'
   430  0006AF  61                 	db	97	;'a'
   431  0006B0  00                 	db	0
   432  0000                     
   433                           ; #config settings
   434  0006B1  00                 	db	0	; dummy byte at the end
   435  0000                     
   436                           	psect	cinit
   437  001DF0                     __pcinit:
   438                           	opt callstack 0
   439  001DF0                     start_initialization:
   440                           	opt callstack 0
   441  001DF0                     __initialization:
   442                           	opt callstack 0
   443                           
   444                           ; Initialize objects allocated to BANK1 (97 bytes)
   445                           ; load TBLPTR registers with __pidataBANK1
   446  001DF0  0E52               	movlw	low __pidataBANK1
   447  001DF2  6EF6               	movwf	tblptrl,c
   448  001DF4  0E1E               	movlw	high __pidataBANK1
   449  001DF6  6EF7               	movwf	tblptrh,c
   450  001DF8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   451  001DFA  6EF8               	movwf	tblptru,c
   452  001DFC  EE01  F000         	lfsr	0,__pdataBANK1
   453  001E00  EE10 F061          	lfsr	1,97
   454  001E04                     copy_data0:
   455  001E04  0009               	tblrd		*+
   456  001E06  CFF5 FFEE          	movff	tablat,postinc0
   457  001E0A  50E5               	movf	postdec1,w,c
   458  001E0C  50E1               	movf	fsr1l,w,c
   459  001E0E  E1FA               	bnz	copy_data0
   460                           
   461                           ; Initialize objects allocated to BANK0 (32 bytes)
   462                           ; load TBLPTR registers with __pidataBANK0
   463  001E10  0E84               	movlw	low __pidataBANK0
   464  001E12  6EF6               	movwf	tblptrl,c
   465  001E14  0E20               	movlw	high __pidataBANK0
   466  001E16  6EF7               	movwf	tblptrh,c
   467  001E18  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   468  001E1A  6EF8               	movwf	tblptru,c
   469  001E1C  EE00  F0C2         	lfsr	0,__pdataBANK0
   470  001E20  EE10 F020          	lfsr	1,32
   471  001E24                     copy_data1:
   472  001E24  0009               	tblrd		*+
   473  001E26  CFF5 FFEE          	movff	tablat,postinc0
   474  001E2A  50E5               	movf	postdec1,w,c
   475  001E2C  50E1               	movf	fsr1l,w,c
   476  001E2E  E1FA               	bnz	copy_data1
   477                           
   478                           ; Clear objects allocated to BANK0 (11 bytes)
   479  001E30  EE00  F0E2         	lfsr	0,__pbssBANK0
   480  001E34  0E0B               	movlw	11
   481  001E36                     clear_0:
   482  001E36  6AEE               	clrf	postinc0,c
   483  001E38  06E8               	decf	wreg,f,c
   484  001E3A  E1FD               	bnz	clear_0
   485                           
   486                           ; Clear objects allocated to COMRAM (11 bytes)
   487  001E3C  EE00  F06F         	lfsr	0,__pbssCOMRAM
   488  001E40  0E0B               	movlw	11
   489  001E42                     clear_1:
   490  001E42  6AEE               	clrf	postinc0,c
   491  001E44  06E8               	decf	wreg,f,c
   492  001E46  E1FD               	bnz	clear_1
   493  001E48                     end_of_initialization:
   494                           	opt callstack 0
   495  001E48                     __end_of__initialization:
   496                           	opt callstack 0
   497  001E48  0E00               	movlw	low (__Lmediumconst shr (0+16))
   498  001E4A  6EF8               	movwf	tblptru,c
   499  001E4C  0100               	movlb	0
   500  001E4E  EF71  F00B         	goto	_main	;jump to C main() function
   501                           
   502                           	psect	bssCOMRAM
   503  00006F                     __pbssCOMRAM:
   504                           	opt callstack 0
   505  00006F                     _condRetornaInicial:
   506                           	opt callstack 0
   507  00006F                     	ds	1
   508  000070                     _date:
   509                           	opt callstack 0
   510  000070                     	ds	10
   511                           
   512                           	psect	bssBANK0
   513  0000E2                     __pbssBANK0:
   514                           	opt callstack 0
   515  0000E2                     _time:
   516                           	opt callstack 0
   517  0000E2                     	ds	10
   518  0000EC                     _identificaSinal:
   519                           	opt callstack 0
   520  0000EC                     	ds	1
   521                           
   522                           	psect	dataBANK0
   523  0000C2                     __pdataBANK0:
   524                           	opt callstack 0
   525  0000C2                     main@F2384:
   526                           	opt callstack 0
   527  0000C2                     	ds	32
   528                           
   529                           	psect	dataBANK1
   530  000100                     __pdataBANK1:
   531                           	opt callstack 0
   532  000100                     _listaLetras:
   533                           	opt callstack 0
   534  000100                     	ds	65
   535  000141                     main@F2386:
   536                           	opt callstack 0
   537  000141                     	ds	32
   538                           
   539                           	psect	cstackBANK0
   540  000080                     __pcstackBANK0:
   541                           	opt callstack 0
   542  000080                     main@teleph:
   543                           	opt callstack 0
   544                           
   545                           ; 32 bytes @ 0x0
   546  000080                     	ds	32
   547  0000A0                     main@mensg:
   548                           	opt callstack 0
   549                           
   550                           ; 32 bytes @ 0x20
   551  0000A0                     	ds	32
   552  0000C0                     main@tecla:
   553                           	opt callstack 0
   554                           
   555                           ; 1 bytes @ 0x40
   556  0000C0                     	ds	1
   557  0000C1                     main@i:
   558                           	opt callstack 0
   559                           
   560                           ; 1 bytes @ 0x41
   561  0000C1                     	ds	1
   562                           
   563                           	psect	cstackCOMRAM
   564  000001                     __pcstackCOMRAM:
   565                           	opt callstack 0
   566  000001                     ?___wmul:
   567                           	opt callstack 0
   568  000001                     getd@nn:
   569                           	opt callstack 0
   570  000001                     getu@nn:
   571                           	opt callstack 0
   572  000001                     lcd_wr@val:
   573                           	opt callstack 0
   574  000001                     atraso_ms@valor:
   575                           	opt callstack 0
   576  000001                     delay@i:
   577                           	opt callstack 0
   578  000001                     ___wmul@multiplier:
   579                           	opt callstack 0
   580                           
   581                           ; 2 bytes @ 0x0
   582  000001                     	ds	2
   583  000003                     delay@j:
   584                           	opt callstack 0
   585  000003                     atraso_ms@i:
   586                           	opt callstack 0
   587  000003                     ___wmul@multiplicand:
   588                           	opt callstack 0
   589                           
   590                           ; 2 bytes @ 0x2
   591  000003                     	ds	1
   592  000004                     delay@k:
   593                           	opt callstack 0
   594                           
   595                           ; 1 bytes @ 0x3
   596  000004                     	ds	1
   597  000005                     ??_i2c_wb:
   598  000005                     ??_i2c_rb:
   599  000005                     atraso_ms@j:
   600                           	opt callstack 0
   601  000005                     ___wmul@product:
   602                           	opt callstack 0
   603                           
   604                           ; 2 bytes @ 0x4
   605  000005                     	ds	1
   606  000006                     lcd_cmd@val:
   607                           	opt callstack 0
   608  000006                     lcd_pos@col:
   609                           	opt callstack 0
   610  000006                     lcd_dat@val:
   611                           	opt callstack 0
   612  000006                     tc_tecla@timeout:
   613                           	opt callstack 0
   614                           
   615                           ; 2 bytes @ 0x5
   616  000006                     	ds	1
   617  000007                     i2c_wb@val:
   618                           	opt callstack 0
   619  000007                     i2c_rb@ack:
   620                           	opt callstack 0
   621  000007                     lcd_pos@val:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0x6
   625  000007                     	ds	1
   626  000008                     i2c_wb@i:
   627                           	opt callstack 0
   628  000008                     i2c_rb@ret:
   629                           	opt callstack 0
   630  000008                     tc_tecla@to:
   631                           	opt callstack 0
   632                           
   633                           ; 2 bytes @ 0x7
   634  000008                     	ds	1
   635  000009                     i2c_rb@i:
   636                           	opt callstack 0
   637  000009                     lcd_pos@lin:
   638                           	opt callstack 0
   639                           
   640                           ; 1 bytes @ 0x8
   641  000009                     	ds	1
   642  00000A                     rtc_r@tmp:
   643                           	opt callstack 0
   644  00000A                     tc_tecla@tmp:
   645                           	opt callstack 0
   646  00000A                     imprimeSimbolo@val:
   647                           	opt callstack 0
   648  00000A                     lcd_str@str:
   649                           	opt callstack 0
   650                           
   651                           ; 2 bytes @ 0x9
   652  00000A                     	ds	1
   653  00000B                     tc_tecla@old_D:
   654                           	opt callstack 0
   655                           
   656                           ; 1 bytes @ 0xA
   657  00000B                     	ds	1
   658  00000C                     ??_lcd_str:
   659  00000C                     tc_tecla@old_TD:
   660                           	opt callstack 0
   661                           
   662                           ; 1 bytes @ 0xB
   663  00000C                     	ds	1
   664  00000D                     tc_tecla@old_TB:
   665                           	opt callstack 0
   666                           
   667                           ; 1 bytes @ 0xC
   668  00000D                     	ds	1
   669  00000E                     tc_tecla@ret:
   670                           	opt callstack 0
   671  00000E                     lcd_str@lin:
   672                           	opt callstack 0
   673                           
   674                           ; 1 bytes @ 0xD
   675  00000E                     	ds	1
   676  00000F                     tc_tecla@i:
   677                           	opt callstack 0
   678  00000F                     lcd_str@j:
   679                           	opt callstack 0
   680                           
   681                           ; 1 bytes @ 0xE
   682  00000F                     	ds	1
   683  000010                     lcd_str@i:
   684                           	opt callstack 0
   685                           
   686                           ; 1 bytes @ 0xF
   687  000010                     	ds	1
   688  000011                     ??_ligacao:
   689  000011                     ??_mensagem:
   690  000011                     simulaMensagem@tecla:
   691                           	opt callstack 0
   692  000011                     simulaChamada@old_TC:
   693                           	opt callstack 0
   694                           
   695                           ; 1 bytes @ 0x10
   696  000011                     	ds	1
   697  000012                     simulaChamada@atender:
   698                           	opt callstack 0
   699                           
   700                           ; 1 bytes @ 0x11
   701  000012                     	ds	1
   702  000013                     ligacao@old_TC:
   703                           	opt callstack 0
   704  000013                     simulaChamada@tempo:
   705                           	opt callstack 0
   706  000013                     mensagem@mensagem:
   707                           	opt callstack 0
   708                           
   709                           ; 64 bytes @ 0x12
   710  000013                     	ds	1
   711  000014                     ligacao@ligar:
   712                           	opt callstack 0
   713  000014                     simulaChamada@i:
   714                           	opt callstack 0
   715                           
   716                           ; 1 bytes @ 0x13
   717  000014                     	ds	1
   718  000015                     ligacao@tempo:
   719                           	opt callstack 0
   720  000015                     simulaChamada@buzz:
   721                           	opt callstack 0
   722                           
   723                           ; 1 bytes @ 0x14
   724  000015                     	ds	1
   725  000016                     simulaChamada@tecla:
   726                           	opt callstack 0
   727  000016                     ligacao@numero:
   728                           	opt callstack 0
   729                           
   730                           ; 12 bytes @ 0x15
   731  000016                     	ds	12
   732  000022                     ligacao@buzz:
   733                           	opt callstack 0
   734                           
   735                           ; 1 bytes @ 0x21
   736  000022                     	ds	1
   737  000023                     ligacao@i:
   738                           	opt callstack 0
   739                           
   740                           ; 1 bytes @ 0x22
   741  000023                     	ds	1
   742  000024                     ligacao@tecla:
   743                           	opt callstack 0
   744                           
   745                           ; 1 bytes @ 0x23
   746  000024                     	ds	1
   747  000025                     ligacao@contN:
   748                           	opt callstack 0
   749                           
   750                           ; 1 bytes @ 0x24
   751  000025                     	ds	46
   752  000053                     mensagem@old_TC:
   753                           	opt callstack 0
   754                           
   755                           ; 1 bytes @ 0x52
   756  000053                     	ds	2
   757  000055                     mensagem@numero:
   758                           	opt callstack 0
   759                           
   760                           ; 12 bytes @ 0x54
   761  000055                     	ds	12
   762  000061                     mensagem@i:
   763                           	opt callstack 0
   764                           
   765                           ; 1 bytes @ 0x60
   766  000061                     	ds	1
   767  000062                     mensagem@contMSG:
   768                           	opt callstack 0
   769                           
   770                           ; 1 bytes @ 0x61
   771  000062                     	ds	1
   772  000063                     mensagem@linha:
   773                           	opt callstack 0
   774                           
   775                           ; 1 bytes @ 0x62
   776  000063                     	ds	1
   777  000064                     mensagem@tempo:
   778                           	opt callstack 0
   779                           
   780                           ; 1 bytes @ 0x63
   781  000064                     	ds	1
   782  000065                     mensagem@coluna:
   783                           	opt callstack 0
   784                           
   785                           ; 1 bytes @ 0x64
   786  000065                     	ds	1
   787  000066                     mensagem@contN:
   788                           	opt callstack 0
   789                           
   790                           ; 1 bytes @ 0x65
   791  000066                     	ds	1
   792  000067                     mensagem@tecla:
   793                           	opt callstack 0
   794                           
   795                           ; 1 bytes @ 0x66
   796  000067                     	ds	1
   797  000068                     mensagem@letra:
   798                           	opt callstack 0
   799                           
   800                           ; 1 bytes @ 0x67
   801  000068                     	ds	1
   802  000069                     ??_menu:
   803                           
   804                           ; 1 bytes @ 0x68
   805  000069                     	ds	2
   806  00006B                     menu@tempo:
   807                           	opt callstack 0
   808                           
   809                           ; 1 bytes @ 0x6A
   810  00006B                     	ds	1
   811  00006C                     menu@tecla:
   812                           	opt callstack 0
   813                           
   814                           ; 1 bytes @ 0x6B
   815  00006C                     	ds	1
   816  00006D                     ??_main:
   817                           
   818                           ; 1 bytes @ 0x6C
   819  00006D                     	ds	2
   820                           
   821 ;;
   822 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   823 ;;
   824 ;; *************** function _main *****************
   825 ;; Defined at:
   826 ;;		line 36 in file "main.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  mensg          32   32[BANK0 ] unsigned char [32]
   831 ;;  teleph         32    0[BANK0 ] unsigned char [32]
   832 ;;  i               1   65[BANK0 ] unsigned char 
   833 ;;  tecla           1   64[BANK0 ] unsigned char 
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   843 ;;      Params:         0       0       0       0       0       0       0
   844 ;;      Locals:         0      66       0       0       0       0       0
   845 ;;      Temps:          2       0       0       0       0       0       0
   846 ;;      Totals:         2      66       0       0       0       0       0
   847 ;;Total ram usage:       68 bytes
   848 ;; Hardware stack levels required when called:    5
   849 ;; This function calls:
   850 ;;		_lcd_cmd
   851 ;;		_lcd_dat
   852 ;;		_lcd_init
   853 ;;		_lcd_pos
   854 ;;		_lcd_str
   855 ;;		_menu
   856 ;;		_rtc_r
   857 ;;		_simulaChamada
   858 ;;		_simulaMensagem
   859 ;;		_tc_tecla
   860 ;; This function is called by:
   861 ;;		Startup code after reset
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text0
   866  0016E2                     __ptext0:
   867                           	opt callstack 0
   868  0016E2                     _main:
   869                           	opt callstack 26
   870  0016E2                     
   871                           ;main.c: 38:     unsigned char i, tecla;;main.c: 41:     TRISA = 0xC3;
   872  0016E2  0EC3               	movlw	195
   873  0016E4  6E92               	movwf	146,c	;volatile
   874                           
   875                           ;main.c: 42:     TRISB = 0x03;
   876  0016E6  0E03               	movlw	3
   877  0016E8  6E93               	movwf	147,c	;volatile
   878                           
   879                           ;main.c: 43:     TRISC = 0x01;
   880  0016EA  0E01               	movlw	1
   881  0016EC  6E94               	movwf	148,c	;volatile
   882                           
   883                           ;main.c: 44:     TRISD = 0x00;
   884  0016EE  0E00               	movlw	0
   885  0016F0  6E95               	movwf	149,c	;volatile
   886                           
   887                           ;main.c: 45:     TRISE = 0x00;
   888  0016F2  0E00               	movlw	0
   889  0016F4  6E96               	movwf	150,c	;volatile
   890                           
   891                           ;main.c: 46:     ADCON1 = 0x06;
   892  0016F6  0E06               	movlw	6
   893  0016F8  6EC1               	movwf	193,c	;volatile
   894  0016FA                     
   895                           ;main.c: 48:     lcd_init();
   896  0016FA  ECB8  F00F         	call	_lcd_init	;wreg free
   897  0016FE                     
   898                           ;main.c: 49:     lcd_cmd(0x0C);
   899  0016FE  0E0C               	movlw	12
   900  001700  EC1A  F010         	call	_lcd_cmd
   901  001704                     
   902                           ;main.c: 52:     char teleph[32] =
   903  001704  EE20  F0C2         	lfsr	2,main@F2384
   904  001708  EE10  F080         	lfsr	1,main@teleph
   905  00170C  0E1F               	movlw	31
   906  00170E                     u2111:
   907  00170E  CFDB FFE3          	movff	plusw2,plusw1
   908  001712  06E8               	decf	wreg,f,c
   909  001714  E2FC               	bc	u2111
   910  001716                     
   911                           ;main.c: 57:     char mensg[32] =
   912  001716  EE21  F041         	lfsr	2,main@F2386
   913  00171A  EE10  F0A0         	lfsr	1,main@mensg
   914  00171E  0E1F               	movlw	31
   915  001720                     u2121:
   916  001720  CFDB FFE3          	movff	plusw2,plusw1
   917  001724  06E8               	decf	wreg,f,c
   918  001726  E2FC               	bc	u2121
   919  001728                     
   920                           ;main.c: 64:     lcd_cmd(0x40);
   921  001728  0E40               	movlw	64
   922  00172A  EC1A  F010         	call	_lcd_cmd
   923  00172E                     
   924                           ;main.c: 65:     for(i=0;i<32;i++){
   925  00172E  0E00               	movlw	0
   926  001730  0100               	movlb	0	; () banked
   927  001732  6FC1               	movwf	main@i& (0+255),b
   928  001734                     l3500:
   929                           
   930                           ; BSR set to: 0
   931                           ;main.c: 66:         lcd_dat(teleph[i]);
   932  001734  0E80               	movlw	low main@teleph
   933  001736  25C1               	addwf	main@i& (0+255),w,b
   934  001738  6ED9               	movwf	fsr2l,c
   935  00173A  6ADA               	clrf	fsr2h,c
   936  00173C  0E00               	movlw	high main@teleph
   937  00173E  22DA               	addwfc	fsr2h,f,c
   938  001740  50DF               	movf	indf2,w,c
   939  001742  EC05  F010         	call	_lcd_dat
   940  001746                     
   941                           ;main.c: 67:     }
   942  001746  0100               	movlb	0	; () banked
   943  001748  2BC1               	incf	main@i& (0+255),f,b
   944  00174A                     
   945                           ; BSR set to: 0
   946  00174A  0E1F               	movlw	31
   947  00174C  65C1               	cpfsgt	main@i& (0+255),b
   948  00174E  EFAB  F00B         	goto	u2131
   949  001752  EFAD  F00B         	goto	u2130
   950  001756                     u2131:
   951  001756  EF9A  F00B         	goto	l3500
   952  00175A                     u2130:
   953  00175A                     
   954                           ; BSR set to: 0
   955                           ;main.c: 70:     lcd_cmd(0x60);
   956  00175A  0E60               	movlw	96
   957  00175C  EC1A  F010         	call	_lcd_cmd
   958  001760                     
   959                           ;main.c: 71:     for(i=0;i<32;i++){
   960  001760  0E00               	movlw	0
   961  001762  0100               	movlb	0	; () banked
   962  001764  6FC1               	movwf	main@i& (0+255),b
   963  001766                     l3514:
   964                           
   965                           ; BSR set to: 0
   966                           ;main.c: 72:         lcd_dat(mensg[i]);
   967  001766  0EA0               	movlw	low main@mensg
   968  001768  25C1               	addwf	main@i& (0+255),w,b
   969  00176A  6ED9               	movwf	fsr2l,c
   970  00176C  6ADA               	clrf	fsr2h,c
   971  00176E  0E00               	movlw	high main@mensg
   972  001770  22DA               	addwfc	fsr2h,f,c
   973  001772  50DF               	movf	indf2,w,c
   974  001774  EC05  F010         	call	_lcd_dat
   975  001778                     
   976                           ;main.c: 73:     }
   977  001778  0100               	movlb	0	; () banked
   978  00177A  2BC1               	incf	main@i& (0+255),f,b
   979  00177C                     
   980                           ; BSR set to: 0
   981  00177C  0E1F               	movlw	31
   982  00177E  65C1               	cpfsgt	main@i& (0+255),b
   983  001780  EFC4  F00B         	goto	u2141
   984  001784  EFC6  F00B         	goto	u2140
   985  001788                     u2141:
   986  001788  EFB3  F00B         	goto	l3514
   987  00178C                     u2140:
   988  00178C                     l3520:
   989                           
   990                           ;main.c: 77:         rtc_r();
   991  00178C  EC5A  F00D         	call	_rtc_r	;wreg free
   992                           
   993                           ;main.c: 78:         lcd_cmd(0x01);
   994  001790  0E01               	movlw	1
   995  001792  EC1A  F010         	call	_lcd_cmd
   996                           
   997                           ;main.c: 79:         lcd_pos(1, 4);
   998  001796  0E04               	movlw	4
   999  001798  6E06               	movwf	lcd_pos@col^0,c
  1000  00179A  0E01               	movlw	1
  1001  00179C  ECCE  F00D         	call	_lcd_pos
  1002  0017A0                     
  1003                           ;main.c: 80:         lcd_str((const char *) date);
  1004  0017A0  0E70               	movlw	low _date
  1005  0017A2  6E0A               	movwf	lcd_str@str^0,c
  1006  0017A4  0E00               	movlw	high _date
  1007  0017A6  6E0B               	movwf	(lcd_str@str+1)^0,c
  1008  0017A8  ECD3  F00C         	call	_lcd_str	;wreg free
  1009  0017AC                     
  1010                           ;main.c: 81:         lcd_pos(2, 5);
  1011  0017AC  0E05               	movlw	5
  1012  0017AE  6E06               	movwf	lcd_pos@col^0,c
  1013  0017B0  0E02               	movlw	2
  1014  0017B2  ECCE  F00D         	call	_lcd_pos
  1015  0017B6                     
  1016                           ;main.c: 82:         for(i=0;i<5;i++){ lcd_dat((unsigned char) time[i]); }
  1017  0017B6  0E00               	movlw	0
  1018  0017B8  0100               	movlb	0	; () banked
  1019  0017BA  6FC1               	movwf	main@i& (0+255),b
  1020  0017BC                     l3532:
  1021                           
  1022                           ; BSR set to: 0
  1023  0017BC  0EE2               	movlw	low _time
  1024  0017BE  25C1               	addwf	main@i& (0+255),w,b
  1025  0017C0  6ED9               	movwf	fsr2l,c
  1026  0017C2  6ADA               	clrf	fsr2h,c
  1027  0017C4  0E00               	movlw	high _time
  1028  0017C6  22DA               	addwfc	fsr2h,f,c
  1029  0017C8  50DF               	movf	indf2,w,c
  1030  0017CA  EC05  F010         	call	_lcd_dat
  1031  0017CE  0100               	movlb	0	; () banked
  1032  0017D0  2BC1               	incf	main@i& (0+255),f,b
  1033  0017D2                     
  1034                           ; BSR set to: 0
  1035  0017D2  0E04               	movlw	4
  1036  0017D4  65C1               	cpfsgt	main@i& (0+255),b
  1037  0017D6  EFEF  F00B         	goto	u2151
  1038  0017DA  EFF1  F00B         	goto	u2150
  1039  0017DE                     u2151:
  1040  0017DE  EFDE  F00B         	goto	l3532
  1041  0017E2                     u2150:
  1042  0017E2                     
  1043                           ; BSR set to: 0
  1044                           ;main.c: 83:         tecla = tc_tecla(3000);
  1045  0017E2  0E0B               	movlw	11
  1046  0017E4  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  1047  0017E6  0EB8               	movlw	184
  1048  0017E8  6E06               	movwf	tc_tecla@timeout^0,c
  1049  0017EA  EC8A  F009         	call	_tc_tecla	;wreg free
  1050  0017EE  0100               	movlb	0	; () banked
  1051  0017F0  6FC0               	movwf	main@tecla& (0+255),b
  1052  0017F2                     
  1053                           ; BSR set to: 0
  1054                           ;main.c: 84:         for(i=0;i<=12;i++){
  1055  0017F2  0E00               	movlw	0
  1056  0017F4  6FC1               	movwf	main@i& (0+255),b
  1057  0017F6                     l3546:
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;main.c: 85:             if(tecla == i){
  1061  0017F6  51C1               	movf	main@i& (0+255),w,b
  1062  0017F8  19C0               	xorwf	main@tecla& (0+255),w,b
  1063  0017FA  A4D8               	btfss	status,2,c
  1064  0017FC  EF02  F00C         	goto	u2161
  1065  001800  EF04  F00C         	goto	u2160
  1066  001804                     u2161:
  1067  001804  EF08  F00C         	goto	l3550
  1068  001808                     u2160:
  1069  001808                     
  1070                           ; BSR set to: 0
  1071                           ;main.c: 86:                 menu();
  1072  001808  EC42  F00C         	call	_menu	;wreg free
  1073                           
  1074                           ;main.c: 87:                 break;
  1075  00180C  EF11  F00C         	goto	l3554
  1076  001810                     l3550:
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;main.c: 89:         }
  1080  001810  2BC1               	incf	main@i& (0+255),f,b
  1081  001812                     
  1082                           ; BSR set to: 0
  1083  001812  0E0C               	movlw	12
  1084  001814  65C1               	cpfsgt	main@i& (0+255),b
  1085  001816  EF0F  F00C         	goto	u2171
  1086  00181A  EF11  F00C         	goto	u2170
  1087  00181E                     u2171:
  1088  00181E  EFFB  F00B         	goto	l3546
  1089  001822                     u2170:
  1090  001822                     l3554:
  1091                           
  1092                           ;main.c: 90:         if(PORTE == 0x01){
  1093  001822  0484               	decf	132,w,c	;volatile
  1094  001824  A4D8               	btfss	status,2,c
  1095  001826  EF17  F00C         	goto	u2181
  1096  00182A  EF19  F00C         	goto	u2180
  1097  00182E                     u2181:
  1098  00182E  EFC6  F00B         	goto	l3520
  1099  001832                     u2180:
  1100  001832  EF23  F00C         	goto	l3564
  1101  001836                     l3558:
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;main.c: 93:                     simulaChamada();
  1105  001836  EC7F  F00A         	call	_simulaChamada	;wreg free
  1106                           
  1107                           ;main.c: 94:                     break;
  1108  00183A  EF39  F00C         	goto	l3566
  1109  00183E                     l3560:
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;main.c: 96:                     simulaMensagem();
  1113  00183E  EC25  F00E         	call	_simulaMensagem	;wreg free
  1114                           
  1115                           ;main.c: 97:                     break;
  1116  001842  EF39  F00C         	goto	l3566
  1117  001846                     l3564:
  1118  001846  0100               	movlb	0	; () banked
  1119  001848  51EC               	movf	_identificaSinal& (0+255),w,b
  1120  00184A  6E6D               	movwf	??_main^0,c
  1121  00184C  6A6E               	clrf	(??_main+1)^0,c
  1122                           
  1123                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1124                           ; Switch size 1, requested type "simple"
  1125                           ; Number of cases is 1, Range of values is 0 to 0
  1126                           ; switch strategies available:
  1127                           ; Name         Instructions Cycles
  1128                           ; simple_byte            4     3 (average)
  1129                           ;	Chosen strategy is simple_byte
  1130  00184E  506E               	movf	(??_main+1)^0,w,c
  1131  001850  0A00               	xorlw	0	; case 0
  1132  001852  B4D8               	btfsc	status,2,c
  1133  001854  EF2E  F00C         	goto	l3672
  1134  001858  EF39  F00C         	goto	l3566
  1135  00185C                     l3672:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ; Switch size 1, requested type "simple"
  1139                           ; Number of cases is 2, Range of values is 1 to 2
  1140                           ; switch strategies available:
  1141                           ; Name         Instructions Cycles
  1142                           ; simple_byte            7     4 (average)
  1143                           ;	Chosen strategy is simple_byte
  1144  00185C  506D               	movf	??_main^0,w,c
  1145  00185E  0A01               	xorlw	1	; case 1
  1146  001860  B4D8               	btfsc	status,2,c
  1147  001862  EF1B  F00C         	goto	l3558
  1148  001866  0A03               	xorlw	3	; case 2
  1149  001868  B4D8               	btfsc	status,2,c
  1150  00186A  EF1F  F00C         	goto	l3560
  1151  00186E  EF39  F00C         	goto	l3566
  1152  001872                     l3566:
  1153                           
  1154                           ;main.c: 99:             identificaSinal = 0;
  1155  001872  0E00               	movlw	0
  1156  001874  0100               	movlb	0	; () banked
  1157  001876  6FEC               	movwf	_identificaSinal& (0+255),b
  1158                           
  1159                           ;main.c: 100:             PORTE = 0x00;
  1160  001878  0E00               	movlw	0
  1161  00187A  6E84               	movwf	132,c	;volatile
  1162  00187C  EFC6  F00B         	goto	l3520
  1163  001880  EF00  F000         	goto	start
  1164  001884                     __end_of_main:
  1165                           	opt callstack 0
  1166                           
  1167 ;; *************** function _simulaMensagem *****************
  1168 ;; Defined at:
  1169 ;;		line 606 in file "main.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  tecla           1   16[COMRAM] unsigned char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1183 ;;      Params:         0       0       0       0       0       0       0
  1184 ;;      Locals:         1       0       0       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0       0       0
  1186 ;;      Totals:         1       0       0       0       0       0       0
  1187 ;;Total ram usage:        1 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    3
  1190 ;; This function calls:
  1191 ;;		_imprimeSimbolo
  1192 ;;		_lcd_cmd
  1193 ;;		_lcd_pos
  1194 ;;		_lcd_str
  1195 ;;		_tc_tecla
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text1
  1202  001C4A                     __ptext1:
  1203                           	opt callstack 0
  1204  001C4A                     _simulaMensagem:
  1205                           	opt callstack 27
  1206  001C4A                     
  1207                           ;main.c: 607:     lcd_cmd(0x01);
  1208  001C4A  0E01               	movlw	1
  1209  001C4C  EC1A  F010         	call	_lcd_cmd
  1210                           
  1211                           ;main.c: 608:     unsigned char tecla;;main.c: 609:     imprimeSimbolo(2);
  1212  001C50  0E02               	movlw	2
  1213  001C52  ECB7  F00E         	call	_imprimeSimbolo
  1214                           
  1215                           ;main.c: 610:     lcd_pos(1,5);
  1216  001C56  0E05               	movlw	5
  1217  001C58  6E06               	movwf	lcd_pos@col^0,c
  1218  001C5A  0E01               	movlw	1
  1219  001C5C  ECCE  F00D         	call	_lcd_pos
  1220  001C60                     
  1221                           ;main.c: 611:     lcd_str("Mensagem");
  1222  001C60  0E33               	movlw	low (STR_4+8)
  1223  001C62  6E0A               	movwf	lcd_str@str^0,c
  1224  001C64  0E06               	movlw	high (STR_4+8)
  1225  001C66  6E0B               	movwf	(lcd_str@str+1)^0,c
  1226  001C68  ECD3  F00C         	call	_lcd_str	;wreg free
  1227  001C6C                     
  1228                           ;main.c: 612:     lcd_pos(2,5);
  1229  001C6C  0E05               	movlw	5
  1230  001C6E  6E06               	movwf	lcd_pos@col^0,c
  1231  001C70  0E02               	movlw	2
  1232  001C72  ECCE  F00D         	call	_lcd_pos
  1233                           
  1234                           ;main.c: 613:     lcd_str("Recebida");
  1235  001C76  0E78               	movlw	low STR_12
  1236  001C78  6E0A               	movwf	lcd_str@str^0,c
  1237  001C7A  0E06               	movlw	high STR_12
  1238  001C7C  6E0B               	movwf	(lcd_str@str+1)^0,c
  1239  001C7E  ECD3  F00C         	call	_lcd_str	;wreg free
  1240  001C82                     l3464:
  1241                           
  1242                           ;main.c: 615:         tecla = tc_tecla(0);
  1243  001C82  0E00               	movlw	0
  1244  001C84  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  1245  001C86  0E00               	movlw	0
  1246  001C88  6E06               	movwf	tc_tecla@timeout^0,c
  1247  001C8A  EC8A  F009         	call	_tc_tecla	;wreg free
  1248  001C8E  6E11               	movwf	simulaMensagem@tecla^0,c
  1249  001C90                     
  1250                           ;main.c: 618:         if(tecla == 12){
  1251  001C90  0E0C               	movlw	12
  1252  001C92  1811               	xorwf	simulaMensagem@tecla^0,w,c
  1253  001C94  A4D8               	btfss	status,2,c
  1254  001C96  EF4F  F00E         	goto	u2091
  1255  001C9A  EF51  F00E         	goto	u2090
  1256  001C9E                     u2091:
  1257  001C9E  EF41  F00E         	goto	l3464
  1258  001CA2                     u2090:
  1259  001CA2                     
  1260                           ;main.c: 623:     lcd_cmd(0x01);
  1261  001CA2  0E01               	movlw	1
  1262  001CA4  EC1A  F010         	call	_lcd_cmd
  1263  001CA8                     
  1264                           ;main.c: 625:     lcd_str("Opa eae vei blz, bora ir num churras?");
  1265  001CA8  0E05               	movlw	low STR_13
  1266  001CAA  6E0A               	movwf	lcd_str@str^0,c
  1267  001CAC  0E06               	movlw	high STR_13
  1268  001CAE  6E0B               	movwf	(lcd_str@str+1)^0,c
  1269  001CB0  ECD3  F00C         	call	_lcd_str	;wreg free
  1270  001CB4                     
  1271                           ;main.c: 626:     lcd_pos(3,0);
  1272  001CB4  0E00               	movlw	0
  1273  001CB6  6E06               	movwf	lcd_pos@col^0,c
  1274  001CB8  0E03               	movlw	3
  1275  001CBA  ECCE  F00D         	call	_lcd_pos
  1276                           
  1277                           ;main.c: 627:     lcd_str("Rmt: Fei_Ja1");
  1278  001CBE  0E4A               	movlw	low STR_14
  1279  001CC0  6E0A               	movwf	lcd_str@str^0,c
  1280  001CC2  0E06               	movlw	high STR_14
  1281  001CC4  6E0B               	movwf	(lcd_str@str+1)^0,c
  1282  001CC6  ECD3  F00C         	call	_lcd_str	;wreg free
  1283  001CCA                     l3476:
  1284                           
  1285                           ;main.c: 629:         tecla = tc_tecla(0);
  1286  001CCA  0E00               	movlw	0
  1287  001CCC  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  1288  001CCE  0E00               	movlw	0
  1289  001CD0  6E06               	movwf	tc_tecla@timeout^0,c
  1290  001CD2  EC8A  F009         	call	_tc_tecla	;wreg free
  1291  001CD6  6E11               	movwf	simulaMensagem@tecla^0,c
  1292  001CD8                     
  1293                           ;main.c: 630:         if(tecla == 10){
  1294  001CD8  0E0A               	movlw	10
  1295  001CDA  1811               	xorwf	simulaMensagem@tecla^0,w,c
  1296  001CDC  A4D8               	btfss	status,2,c
  1297  001CDE  EF73  F00E         	goto	u2101
  1298  001CE2  EF75  F00E         	goto	u2100
  1299  001CE6                     u2101:
  1300  001CE6  EF65  F00E         	goto	l3476
  1301  001CEA                     u2100:
  1302  001CEA  0012               	return		;funcret
  1303  001CEC                     __end_of_simulaMensagem:
  1304                           	opt callstack 0
  1305                           
  1306 ;; *************** function _simulaChamada *****************
  1307 ;; Defined at:
  1308 ;;		line 636 in file "main.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;  tecla           1   21[COMRAM] unsigned char 
  1313 ;;  buzz            1   20[COMRAM] unsigned char 
  1314 ;;  i               1   19[COMRAM] unsigned char 
  1315 ;;  tempo           1   18[COMRAM] unsigned char 
  1316 ;;  atender         1   17[COMRAM] unsigned char 
  1317 ;;  old_TC          1   16[COMRAM] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1327 ;;      Params:         0       0       0       0       0       0       0
  1328 ;;      Locals:         6       0       0       0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0
  1330 ;;      Totals:         6       0       0       0       0       0       0
  1331 ;;Total ram usage:        6 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    3
  1334 ;; This function calls:
  1335 ;;		_atraso_ms
  1336 ;;		_imprimeSimbolo
  1337 ;;		_lcd_cmd
  1338 ;;		_lcd_pos
  1339 ;;		_lcd_str
  1340 ;;		_tc_tecla
  1341 ;; This function is called by:
  1342 ;;		_main
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           	psect	text2
  1347  0014FE                     __ptext2:
  1348                           	opt callstack 0
  1349  0014FE                     _simulaChamada:
  1350                           	opt callstack 27
  1351  0014FE                     
  1352                           ;main.c: 637:     unsigned char old_TC = TRISC;
  1353  0014FE  CF94 F011          	movff	3988,simulaChamada@old_TC	;volatile
  1354  001502                     
  1355                           ;main.c: 638:     unsigned char tecla, atender, tempo, buzz, i;;main.c: 639:     tempo =
      +                           0;
  1356  001502  0E00               	movlw	0
  1357  001504  6E13               	movwf	simulaChamada@tempo^0,c
  1358                           
  1359                           ;main.c: 640:     buzz = 1;
  1360  001506  0E01               	movlw	1
  1361  001508  6E15               	movwf	simulaChamada@buzz^0,c
  1362  00150A                     
  1363                           ;main.c: 642:     lcd_cmd(0x01);
  1364  00150A  0E01               	movlw	1
  1365  00150C  EC1A  F010         	call	_lcd_cmd
  1366  001510                     
  1367                           ;main.c: 643:     imprimeSimbolo(1);
  1368  001510  0E01               	movlw	1
  1369  001512  ECB7  F00E         	call	_imprimeSimbolo
  1370  001516                     
  1371                           ;main.c: 644:     lcd_pos(1,5);
  1372  001516  0E05               	movlw	5
  1373  001518  6E06               	movwf	lcd_pos@col^0,c
  1374  00151A  0E01               	movlw	1
  1375  00151C  ECCE  F00D         	call	_lcd_pos
  1376  001520                     
  1377                           ;main.c: 645:     lcd_str("Chamada");
  1378  001520  0E92               	movlw	low STR_10
  1379  001522  6E0A               	movwf	lcd_str@str^0,c
  1380  001524  0E06               	movlw	high STR_10
  1381  001526  6E0B               	movwf	(lcd_str@str+1)^0,c
  1382  001528  ECD3  F00C         	call	_lcd_str	;wreg free
  1383  00152C                     
  1384                           ;main.c: 646:     lcd_pos(2,5);
  1385  00152C  0E05               	movlw	5
  1386  00152E  6E06               	movwf	lcd_pos@col^0,c
  1387  001530  0E02               	movlw	2
  1388  001532  ECCE  F00D         	call	_lcd_pos
  1389  001536                     
  1390                           ;main.c: 647:     lcd_str("Recebida");
  1391  001536  0E78               	movlw	low STR_12
  1392  001538  6E0A               	movwf	lcd_str@str^0,c
  1393  00153A  0E06               	movlw	high STR_12
  1394  00153C  6E0B               	movwf	(lcd_str@str+1)^0,c
  1395  00153E  ECD3  F00C         	call	_lcd_str	;wreg free
  1396  001542                     l343:
  1397                           
  1398                           ;main.c: 651:         if(buzz){
  1399  001542  5015               	movf	simulaChamada@buzz^0,w,c
  1400  001544  B4D8               	btfsc	status,2,c
  1401  001546  EFA7  F00A         	goto	u2011
  1402  00154A  EFA9  F00A         	goto	u2010
  1403  00154E                     u2011:
  1404  00154E  EFAF  F00A         	goto	l3398
  1405  001552                     u2010:
  1406  001552                     
  1407                           ;main.c: 652:             TRISC = 0x02;
  1408  001552  0E02               	movlw	2
  1409  001554  6E94               	movwf	148,c	;volatile
  1410                           
  1411                           ;main.c: 653:             buzz = 0;
  1412  001556  0E00               	movlw	0
  1413  001558  6E15               	movwf	simulaChamada@buzz^0,c
  1414                           
  1415                           ;main.c: 654:         }else{
  1416  00155A  EFB3  F00A         	goto	l3400
  1417  00155E                     l3398:
  1418                           
  1419                           ;main.c: 655:             TRISC = 0x00;
  1420  00155E  0E00               	movlw	0
  1421  001560  6E94               	movwf	148,c	;volatile
  1422                           
  1423                           ;main.c: 656:             buzz = 1;
  1424  001562  0E01               	movlw	1
  1425  001564  6E15               	movwf	simulaChamada@buzz^0,c
  1426  001566                     l3400:
  1427                           
  1428                           ;main.c: 659:         tecla = tc_tecla(1000);
  1429  001566  0E03               	movlw	3
  1430  001568  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  1431  00156A  0EE8               	movlw	232
  1432  00156C  6E06               	movwf	tc_tecla@timeout^0,c
  1433  00156E  EC8A  F009         	call	_tc_tecla	;wreg free
  1434  001572  6E16               	movwf	simulaChamada@tecla^0,c
  1435  001574                     
  1436                           ;main.c: 660:         tempo++;
  1437  001574  2A13               	incf	simulaChamada@tempo^0,f,c
  1438  001576                     
  1439                           ;main.c: 662:         if(tecla == 12){
  1440  001576  0E0C               	movlw	12
  1441  001578  1816               	xorwf	simulaChamada@tecla^0,w,c
  1442  00157A  A4D8               	btfss	status,2,c
  1443  00157C  EFC2  F00A         	goto	u2021
  1444  001580  EFC4  F00A         	goto	u2020
  1445  001584                     u2021:
  1446  001584  EFC8  F00A         	goto	l3408
  1447  001588                     u2020:
  1448  001588                     
  1449                           ;main.c: 663:             atender = 1;
  1450  001588  0E01               	movlw	1
  1451  00158A  6E12               	movwf	simulaChamada@atender^0,c
  1452                           
  1453                           ;main.c: 664:             break;
  1454  00158C  EFDB  F00A         	goto	l3414
  1455  001590                     l3408:
  1456                           
  1457                           ;main.c: 667:         if(tempo>10 || tecla == 10){
  1458  001590  0E0B               	movlw	11
  1459  001592  6013               	cpfslt	simulaChamada@tempo^0,c
  1460  001594  EFCE  F00A         	goto	u2031
  1461  001598  EFD0  F00A         	goto	u2030
  1462  00159C                     u2031:
  1463  00159C  EFD9  F00A         	goto	l3412
  1464  0015A0                     u2030:
  1465  0015A0  0E0A               	movlw	10
  1466  0015A2  1816               	xorwf	simulaChamada@tecla^0,w,c
  1467  0015A4  A4D8               	btfss	status,2,c
  1468  0015A6  EFD7  F00A         	goto	u2041
  1469  0015AA  EFD9  F00A         	goto	u2040
  1470  0015AE                     u2041:
  1471  0015AE  EFA1  F00A         	goto	l343
  1472  0015B2                     u2040:
  1473  0015B2                     l3412:
  1474                           
  1475                           ;main.c: 668:             atender = 0;
  1476  0015B2  0E00               	movlw	0
  1477  0015B4  6E12               	movwf	simulaChamada@atender^0,c
  1478  0015B6                     l3414:
  1479                           
  1480                           ;main.c: 672:     TRISC = 0;
  1481  0015B6  0E00               	movlw	0
  1482  0015B8  6E94               	movwf	148,c	;volatile
  1483                           
  1484                           ;main.c: 673:     if(atender){
  1485  0015BA  5012               	movf	simulaChamada@atender^0,w,c
  1486  0015BC  B4D8               	btfsc	status,2,c
  1487  0015BE  EFE3  F00A         	goto	u2051
  1488  0015C2  EFE5  F00A         	goto	u2050
  1489  0015C6                     u2051:
  1490  0015C6  EF2F  F00B         	goto	l3434
  1491  0015CA                     u2050:
  1492  0015CA                     
  1493                           ;main.c: 674:         lcd_cmd(0x01);
  1494  0015CA  0E01               	movlw	1
  1495  0015CC  EC1A  F010         	call	_lcd_cmd
  1496                           
  1497                           ;main.c: 675:         imprimeSimbolo(1);
  1498  0015D0  0E01               	movlw	1
  1499  0015D2  ECB7  F00E         	call	_imprimeSimbolo
  1500                           
  1501                           ;main.c: 676:         lcd_pos(1,5);
  1502  0015D6  0E05               	movlw	5
  1503  0015D8  6E06               	movwf	lcd_pos@col^0,c
  1504  0015DA  0E01               	movlw	1
  1505  0015DC  ECCE  F00D         	call	_lcd_pos
  1506  0015E0                     
  1507                           ;main.c: 677:         lcd_str("Chamada");
  1508  0015E0  0E92               	movlw	low STR_10
  1509  0015E2  6E0A               	movwf	lcd_str@str^0,c
  1510  0015E4  0E06               	movlw	high STR_10
  1511  0015E6  6E0B               	movwf	(lcd_str@str+1)^0,c
  1512  0015E8  ECD3  F00C         	call	_lcd_str	;wreg free
  1513  0015EC                     
  1514                           ;main.c: 678:         lcd_pos(2,5);
  1515  0015EC  0E05               	movlw	5
  1516  0015EE  6E06               	movwf	lcd_pos@col^0,c
  1517  0015F0  0E02               	movlw	2
  1518  0015F2  ECCE  F00D         	call	_lcd_pos
  1519                           
  1520                           ;main.c: 679:         lcd_str("Atendida");
  1521  0015F6  0E81               	movlw	low STR_18
  1522  0015F8  6E0A               	movwf	lcd_str@str^0,c
  1523  0015FA  0E06               	movlw	high STR_18
  1524  0015FC  6E0B               	movwf	(lcd_str@str+1)^0,c
  1525  0015FE  ECD3  F00C         	call	_lcd_str	;wreg free
  1526  001602                     l3422:
  1527                           
  1528                           ;main.c: 681:             tecla = tc_tecla(0);
  1529  001602  0E00               	movlw	0
  1530  001604  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  1531  001606  0E00               	movlw	0
  1532  001608  6E06               	movwf	tc_tecla@timeout^0,c
  1533  00160A  EC8A  F009         	call	_tc_tecla	;wreg free
  1534  00160E  6E16               	movwf	simulaChamada@tecla^0,c
  1535  001610                     
  1536                           ;main.c: 682:             if(tecla == 10){
  1537  001610  0E0A               	movlw	10
  1538  001612  1816               	xorwf	simulaChamada@tecla^0,w,c
  1539  001614  A4D8               	btfss	status,2,c
  1540  001616  EF0F  F00B         	goto	u2061
  1541  00161A  EF11  F00B         	goto	u2060
  1542  00161E                     u2061:
  1543  00161E  EF01  F00B         	goto	l3422
  1544  001622                     u2060:
  1545  001622                     
  1546                           ;main.c: 686:         lcd_cmd(0x01);
  1547  001622  0E01               	movlw	1
  1548  001624  EC1A  F010         	call	_lcd_cmd
  1549                           
  1550                           ;main.c: 687:         imprimeSimbolo(1);
  1551  001628  0E01               	movlw	1
  1552  00162A  ECB7  F00E         	call	_imprimeSimbolo
  1553                           
  1554                           ;main.c: 688:         lcd_pos(1,5);
  1555  00162E  0E05               	movlw	5
  1556  001630  6E06               	movwf	lcd_pos@col^0,c
  1557  001632  0E01               	movlw	1
  1558  001634  ECCE  F00D         	call	_lcd_pos
  1559  001638                     
  1560                           ;main.c: 689:         lcd_str("Fim da");
  1561  001638  0EAA               	movlw	low STR_9
  1562  00163A  6E0A               	movwf	lcd_str@str^0,c
  1563  00163C  0E06               	movlw	high STR_9
  1564  00163E  6E0B               	movwf	(lcd_str@str+1)^0,c
  1565  001640  ECD3  F00C         	call	_lcd_str	;wreg free
  1566  001644                     
  1567                           ;main.c: 690:         lcd_pos(2,5);
  1568  001644  0E05               	movlw	5
  1569  001646  6E06               	movwf	lcd_pos@col^0,c
  1570  001648  0E02               	movlw	2
  1571  00164A  ECCE  F00D         	call	_lcd_pos
  1572                           
  1573                           ;main.c: 691:         lcd_str("Chamada");
  1574  00164E  0E92               	movlw	low STR_10
  1575  001650  6E0A               	movwf	lcd_str@str^0,c
  1576  001652  0E06               	movlw	high STR_10
  1577  001654  6E0B               	movwf	(lcd_str@str+1)^0,c
  1578  001656  ECD3  F00C         	call	_lcd_str	;wreg free
  1579                           
  1580                           ;main.c: 692:     }else{
  1581  00165A  EF4B  F00B         	goto	l3440
  1582  00165E                     l3434:
  1583                           
  1584                           ;main.c: 693:         lcd_cmd(0x01);
  1585  00165E  0E01               	movlw	1
  1586  001660  EC1A  F010         	call	_lcd_cmd
  1587                           
  1588                           ;main.c: 694:         imprimeSimbolo(1);
  1589  001664  0E01               	movlw	1
  1590  001666  ECB7  F00E         	call	_imprimeSimbolo
  1591                           
  1592                           ;main.c: 695:         lcd_pos(1,5);
  1593  00166A  0E05               	movlw	5
  1594  00166C  6E06               	movwf	lcd_pos@col^0,c
  1595  00166E  0E01               	movlw	1
  1596  001670  ECCE  F00D         	call	_lcd_pos
  1597  001674                     
  1598                           ;main.c: 696:         lcd_str("Chamada");
  1599  001674  0E92               	movlw	low STR_10
  1600  001676  6E0A               	movwf	lcd_str@str^0,c
  1601  001678  0E06               	movlw	high STR_10
  1602  00167A  6E0B               	movwf	(lcd_str@str+1)^0,c
  1603  00167C  ECD3  F00C         	call	_lcd_str	;wreg free
  1604  001680                     
  1605                           ;main.c: 697:         lcd_pos(2,5);
  1606  001680  0E05               	movlw	5
  1607  001682  6E06               	movwf	lcd_pos@col^0,c
  1608  001684  0E02               	movlw	2
  1609  001686  ECCE  F00D         	call	_lcd_pos
  1610                           
  1611                           ;main.c: 698:         lcd_str("Recusada");
  1612  00168A  0E6F               	movlw	low STR_22
  1613  00168C  6E0A               	movwf	lcd_str@str^0,c
  1614  00168E  0E06               	movlw	high STR_22
  1615  001690  6E0B               	movwf	(lcd_str@str+1)^0,c
  1616  001692  ECD3  F00C         	call	_lcd_str	;wreg free
  1617  001696                     l3440:
  1618                           
  1619                           ;main.c: 700:     for(i=0; i<6; i++){
  1620  001696  0E00               	movlw	0
  1621  001698  6E14               	movwf	simulaChamada@i^0,c
  1622  00169A                     l3446:
  1623                           
  1624                           ;main.c: 701:         if(buzz){
  1625  00169A  5015               	movf	simulaChamada@buzz^0,w,c
  1626  00169C  B4D8               	btfsc	status,2,c
  1627  00169E  EF53  F00B         	goto	u2071
  1628  0016A2  EF55  F00B         	goto	u2070
  1629  0016A6                     u2071:
  1630  0016A6  EF5B  F00B         	goto	l3450
  1631  0016AA                     u2070:
  1632  0016AA                     
  1633                           ;main.c: 702:             TRISC = 0x02;
  1634  0016AA  0E02               	movlw	2
  1635  0016AC  6E94               	movwf	148,c	;volatile
  1636                           
  1637                           ;main.c: 703:             buzz = 0;
  1638  0016AE  0E00               	movlw	0
  1639  0016B0  6E15               	movwf	simulaChamada@buzz^0,c
  1640                           
  1641                           ;main.c: 704:         }else{
  1642  0016B2  EF5F  F00B         	goto	l3452
  1643  0016B6                     l3450:
  1644                           
  1645                           ;main.c: 705:             TRISC = 0x00;
  1646  0016B6  0E00               	movlw	0
  1647  0016B8  6E94               	movwf	148,c	;volatile
  1648                           
  1649                           ;main.c: 706:             buzz = 1;
  1650  0016BA  0E01               	movlw	1
  1651  0016BC  6E15               	movwf	simulaChamada@buzz^0,c
  1652  0016BE                     l3452:
  1653                           
  1654                           ;main.c: 708:         atraso_ms(400);
  1655  0016BE  0E01               	movlw	1
  1656  0016C0  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1657  0016C2  0E90               	movlw	144
  1658  0016C4  6E01               	movwf	atraso_ms@valor^0,c
  1659  0016C6  ECE6  F00F         	call	_atraso_ms	;wreg free
  1660  0016CA                     
  1661                           ;main.c: 709:     }
  1662  0016CA  2A14               	incf	simulaChamada@i^0,f,c
  1663  0016CC  0E05               	movlw	5
  1664  0016CE  6414               	cpfsgt	simulaChamada@i^0,c
  1665  0016D0  EF6C  F00B         	goto	u2081
  1666  0016D4  EF6E  F00B         	goto	u2080
  1667  0016D8                     u2081:
  1668  0016D8  EF4D  F00B         	goto	l3446
  1669  0016DC                     u2080:
  1670  0016DC                     
  1671                           ;main.c: 710:     TRISC = old_TC;
  1672  0016DC  C011  FF94         	movff	simulaChamada@old_TC,3988	;volatile
  1673  0016E0  0012               	return		;funcret
  1674  0016E2                     __end_of_simulaChamada:
  1675                           	opt callstack 0
  1676                           
  1677 ;; *************** function _rtc_r *****************
  1678 ;; Defined at:
  1679 ;;		line 42 in file "rtc_r.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;		None
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  tmp             1    9[COMRAM] unsigned char 
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  1    wreg      void 
  1686 ;; Registers used:
  1687 ;;		wreg, status,2, status,0, cstack
  1688 ;; Tracked objects:
  1689 ;;		On entry : 0/0
  1690 ;;		On exit  : 0/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1693 ;;      Params:         0       0       0       0       0       0       0
  1694 ;;      Locals:         1       0       0       0       0       0       0
  1695 ;;      Temps:          0       0       0       0       0       0       0
  1696 ;;      Totals:         1       0       0       0       0       0       0
  1697 ;;Total ram usage:        1 bytes
  1698 ;; Hardware stack levels used:    1
  1699 ;; Hardware stack levels required when called:    2
  1700 ;; This function calls:
  1701 ;;		_getd
  1702 ;;		_getu
  1703 ;;		_i2c_rb
  1704 ;;		_i2c_start
  1705 ;;		_i2c_stop
  1706 ;;		_i2c_wb
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text3
  1713  001AB4                     __ptext3:
  1714                           	opt callstack 0
  1715  001AB4                     _rtc_r:
  1716                           	opt callstack 28
  1717  001AB4                     
  1718                           ;rtc_r.c: 43:     unsigned char tmp;;rtc_r.c: 45:     i2c_start();
  1719  001AB4  EC5A  F010         	call	_i2c_start	;wreg free
  1720                           
  1721                           ;rtc_r.c: 46:     i2c_wb(0xD0);
  1722  001AB8  0ED0               	movlw	208
  1723  001ABA  EC8A  F00F         	call	_i2c_wb
  1724                           
  1725                           ;rtc_r.c: 47:     i2c_wb(0);
  1726  001ABE  0E00               	movlw	0
  1727  001AC0  EC8A  F00F         	call	_i2c_wb
  1728                           
  1729                           ;rtc_r.c: 49:     i2c_start();
  1730  001AC4  EC5A  F010         	call	_i2c_start	;wreg free
  1731                           
  1732                           ;rtc_r.c: 50:     i2c_wb(0xD1);
  1733  001AC8  0ED1               	movlw	209
  1734  001ACA  EC8A  F00F         	call	_i2c_wb
  1735                           
  1736                           ;rtc_r.c: 51:     tmp = 0x7F & i2c_rb(1);
  1737  001ACE  0E01               	movlw	1
  1738  001AD0  EC76  F00E         	call	_i2c_rb
  1739  001AD4  0B7F               	andlw	127
  1740  001AD6  6E0A               	movwf	rtc_r@tmp^0,c
  1741  001AD8                     
  1742                           ;rtc_r.c: 52:     time[5] = ':';
  1743  001AD8  0E3A               	movlw	58
  1744  001ADA  0100               	movlb	0	; () banked
  1745  001ADC  6FE7               	movwf	(_time+5)& (0+255),b	;volatile
  1746  001ADE                     
  1747                           ; BSR set to: 0
  1748                           ;rtc_r.c: 53:     time[6] = getd(tmp);
  1749  001ADE  500A               	movf	rtc_r@tmp^0,w,c
  1750  001AE0  EC62  F010         	call	_getd
  1751  001AE4  0100               	movlb	0	; () banked
  1752  001AE6  6FE8               	movwf	(_time+6)& (0+255),b	;volatile
  1753  001AE8                     
  1754                           ; BSR set to: 0
  1755                           ;rtc_r.c: 54:     time[7] = getu(tmp);
  1756  001AE8  500A               	movf	rtc_r@tmp^0,w,c
  1757  001AEA  EC68  F010         	call	_getu
  1758  001AEE  0100               	movlb	0	; () banked
  1759  001AF0  6FE9               	movwf	(_time+7)& (0+255),b	;volatile
  1760  001AF2                     
  1761                           ; BSR set to: 0
  1762                           ;rtc_r.c: 55:     time[8] = 0;
  1763  001AF2  0E00               	movlw	0
  1764  001AF4  6FEA               	movwf	(_time+8)& (0+255),b	;volatile
  1765                           
  1766                           ;rtc_r.c: 57:     tmp = 0x7F & i2c_rb(1);
  1767  001AF6  0E01               	movlw	1
  1768  001AF8  EC76  F00E         	call	_i2c_rb
  1769  001AFC  0B7F               	andlw	127
  1770  001AFE  6E0A               	movwf	rtc_r@tmp^0,c
  1771  001B00                     
  1772                           ;rtc_r.c: 58:     time[2] = ':';
  1773  001B00  0E3A               	movlw	58
  1774  001B02  0100               	movlb	0	; () banked
  1775  001B04  6FE4               	movwf	(_time+2)& (0+255),b	;volatile
  1776  001B06                     
  1777                           ; BSR set to: 0
  1778                           ;rtc_r.c: 59:     time[3] = getd(tmp);
  1779  001B06  500A               	movf	rtc_r@tmp^0,w,c
  1780  001B08  EC62  F010         	call	_getd
  1781  001B0C  0100               	movlb	0	; () banked
  1782  001B0E  6FE5               	movwf	(_time+3)& (0+255),b	;volatile
  1783  001B10                     
  1784                           ; BSR set to: 0
  1785                           ;rtc_r.c: 60:     time[4] = getu(tmp);
  1786  001B10  500A               	movf	rtc_r@tmp^0,w,c
  1787  001B12  EC68  F010         	call	_getu
  1788  001B16  0100               	movlb	0	; () banked
  1789  001B18  6FE6               	movwf	(_time+4)& (0+255),b	;volatile
  1790  001B1A                     
  1791                           ; BSR set to: 0
  1792                           ;rtc_r.c: 62:     tmp = 0x3F & i2c_rb(1);
  1793  001B1A  0E01               	movlw	1
  1794  001B1C  EC76  F00E         	call	_i2c_rb
  1795  001B20  0B3F               	andlw	63
  1796  001B22  6E0A               	movwf	rtc_r@tmp^0,c
  1797  001B24                     
  1798                           ;rtc_r.c: 63:     time[0] = getd(tmp);
  1799  001B24  500A               	movf	rtc_r@tmp^0,w,c
  1800  001B26  EC62  F010         	call	_getd
  1801  001B2A  0100               	movlb	0	; () banked
  1802  001B2C  6FE2               	movwf	_time& (0+255),b	;volatile
  1803  001B2E                     
  1804                           ; BSR set to: 0
  1805                           ;rtc_r.c: 64:     time[1] = getu(tmp);
  1806  001B2E  500A               	movf	rtc_r@tmp^0,w,c
  1807  001B30  EC68  F010         	call	_getu
  1808  001B34  0100               	movlb	0	; () banked
  1809  001B36  6FE3               	movwf	(_time+1)& (0+255),b	;volatile
  1810  001B38                     
  1811                           ; BSR set to: 0
  1812                           ;rtc_r.c: 66:     i2c_rb(1);
  1813  001B38  0E01               	movlw	1
  1814  001B3A  EC76  F00E         	call	_i2c_rb
  1815  001B3E                     
  1816                           ;rtc_r.c: 68:     tmp = 0x3F & i2c_rb(1);
  1817  001B3E  0E01               	movlw	1
  1818  001B40  EC76  F00E         	call	_i2c_rb
  1819  001B44  0B3F               	andlw	63
  1820  001B46  6E0A               	movwf	rtc_r@tmp^0,c
  1821  001B48                     
  1822                           ;rtc_r.c: 69:     date[0] = getd(tmp);
  1823  001B48  500A               	movf	rtc_r@tmp^0,w,c
  1824  001B4A  EC62  F010         	call	_getd
  1825  001B4E  6E70               	movwf	_date^0,c	;volatile
  1826  001B50                     
  1827                           ;rtc_r.c: 70:     date[1] = getu(tmp);
  1828  001B50  500A               	movf	rtc_r@tmp^0,w,c
  1829  001B52  EC68  F010         	call	_getu
  1830  001B56  6E71               	movwf	(_date+1)^0,c	;volatile
  1831  001B58                     
  1832                           ;rtc_r.c: 73:     tmp = 0x1F & i2c_rb(1);
  1833  001B58  0E01               	movlw	1
  1834  001B5A  EC76  F00E         	call	_i2c_rb
  1835  001B5E  0B1F               	andlw	31
  1836  001B60  6E0A               	movwf	rtc_r@tmp^0,c
  1837  001B62                     
  1838                           ;rtc_r.c: 74:     date[2] = '/';
  1839  001B62  0E2F               	movlw	47
  1840  001B64  6E72               	movwf	(_date+2)^0,c	;volatile
  1841                           
  1842                           ;rtc_r.c: 75:     date[3] = getd(tmp);
  1843  001B66  500A               	movf	rtc_r@tmp^0,w,c
  1844  001B68  EC62  F010         	call	_getd
  1845  001B6C  6E73               	movwf	(_date+3)^0,c	;volatile
  1846                           
  1847                           ;rtc_r.c: 76:     date[4] = getu(tmp);
  1848  001B6E  500A               	movf	rtc_r@tmp^0,w,c
  1849  001B70  EC68  F010         	call	_getu
  1850  001B74  6E74               	movwf	(_date+4)^0,c	;volatile
  1851                           
  1852                           ;rtc_r.c: 78:     tmp = i2c_rb(0);
  1853  001B76  0E00               	movlw	0
  1854  001B78  EC76  F00E         	call	_i2c_rb
  1855  001B7C  6E0A               	movwf	rtc_r@tmp^0,c
  1856  001B7E                     
  1857                           ;rtc_r.c: 79:     date[5] = '/';
  1858  001B7E  0E2F               	movlw	47
  1859  001B80  6E75               	movwf	(_date+5)^0,c	;volatile
  1860  001B82                     
  1861                           ;rtc_r.c: 80:     date[6] = getd(tmp);
  1862  001B82  500A               	movf	rtc_r@tmp^0,w,c
  1863  001B84  EC62  F010         	call	_getd
  1864  001B88  6E76               	movwf	(_date+6)^0,c	;volatile
  1865  001B8A                     
  1866                           ;rtc_r.c: 81:     date[7] = getu(tmp);
  1867  001B8A  500A               	movf	rtc_r@tmp^0,w,c
  1868  001B8C  EC68  F010         	call	_getu
  1869  001B90  6E77               	movwf	(_date+7)^0,c	;volatile
  1870  001B92                     
  1871                           ;rtc_r.c: 82:     date[8] = 0;
  1872  001B92  0E00               	movlw	0
  1873  001B94  6E78               	movwf	(_date+8)^0,c	;volatile
  1874                           
  1875                           ;rtc_r.c: 84:     i2c_stop();
  1876  001B96  EC52  F010         	call	_i2c_stop	;wreg free
  1877  001B9A  0012               	return		;funcret
  1878  001B9C                     __end_of_rtc_r:
  1879                           	opt callstack 0
  1880                           
  1881 ;; *************** function _i2c_wb *****************
  1882 ;; Defined at:
  1883 ;;		line 62 in file "i2c.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  val             1    wreg     unsigned char 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  val             1    6[COMRAM] unsigned char 
  1888 ;;  i               1    7[COMRAM] unsigned char 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, status,0, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1898 ;;      Params:         0       0       0       0       0       0       0
  1899 ;;      Locals:         2       0       0       0       0       0       0
  1900 ;;      Temps:          2       0       0       0       0       0       0
  1901 ;;      Totals:         4       0       0       0       0       0       0
  1902 ;;Total ram usage:        4 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    1
  1905 ;; This function calls:
  1906 ;;		_delay
  1907 ;; This function is called by:
  1908 ;;		_rtc_r
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text4
  1913  001F14                     __ptext4:
  1914                           	opt callstack 0
  1915  001F14                     _i2c_wb:
  1916                           	opt callstack 28
  1917                           
  1918                           ;incstack = 0
  1919                           ;i2c_wb@val stored from wreg
  1920  001F14  6E07               	movwf	i2c_wb@val^0,c
  1921  001F16                     
  1922                           ;i2c.c: 63:     unsigned char i;;i2c.c: 64:     PORTCbits.RC3 = 0;
  1923  001F16  9682               	bcf	130,3,c	;volatile
  1924  001F18                     
  1925                           ;i2c.c: 65:     for (i = 0; i < 8; i++) {
  1926  001F18  0E00               	movlw	0
  1927  001F1A  6E08               	movwf	i2c_wb@i^0,c
  1928  001F1C                     l2624:
  1929                           
  1930                           ;i2c.c: 66:         PORTCbits.RC4 = ((val >> (7 - i))& 0x01);
  1931  001F1C  5008               	movf	i2c_wb@i^0,w,c
  1932  001F1E  0807               	sublw	7
  1933  001F20  6E05               	movwf	??_i2c_wb^0,c
  1934  001F22  C007  F006         	movff	i2c_wb@val,??_i2c_wb+1
  1935  001F26  2A05               	incf	??_i2c_wb^0,f,c
  1936  001F28  EF98  F00F         	goto	u1454
  1937  001F2C                     u1455:
  1938  001F2C  90D8               	bcf	status,0,c
  1939  001F2E  3206               	rrcf	(??_i2c_wb+1)^0,f,c
  1940  001F30                     u1454:
  1941  001F30  2E05               	decfsz	??_i2c_wb^0,f,c
  1942  001F32  EF96  F00F         	goto	u1455
  1943  001F36  0E01               	movlw	1
  1944  001F38  1606               	andwf	(??_i2c_wb+1)^0,f,c
  1945  001F3A  3A06               	swapf	(??_i2c_wb+1)^0,f,c
  1946  001F3C  5082               	movf	130,w,c	;volatile
  1947  001F3E  1806               	xorwf	(??_i2c_wb+1)^0,w,c
  1948  001F40  0BEF               	andlw	-17
  1949  001F42  1806               	xorwf	(??_i2c_wb+1)^0,w,c
  1950  001F44  6E82               	movwf	130,c	;volatile
  1951  001F46                     
  1952                           ;i2c.c: 67:         PORTCbits.RC3 = 1;
  1953  001F46  8682               	bsf	130,3,c	;volatile
  1954  001F48                     
  1955                           ;i2c.c: 68:         delay();
  1956  001F48  EC5A  F00F         	call	_delay	;wreg free
  1957  001F4C                     
  1958                           ;i2c.c: 69:         PORTCbits.RC3 = 0;
  1959  001F4C  9682               	bcf	130,3,c	;volatile
  1960  001F4E                     
  1961                           ;i2c.c: 70:     }
  1962  001F4E  2A08               	incf	i2c_wb@i^0,f,c
  1963  001F50  0E07               	movlw	7
  1964  001F52  6408               	cpfsgt	i2c_wb@i^0,c
  1965  001F54  EFAE  F00F         	goto	u1461
  1966  001F58  EFB0  F00F         	goto	u1460
  1967  001F5C                     u1461:
  1968  001F5C  EF8E  F00F         	goto	l2624
  1969  001F60                     u1460:
  1970  001F60                     
  1971                           ;i2c.c: 71:     PORTCbits.RC4 = 1;
  1972  001F60  8882               	bsf	130,4,c	;volatile
  1973  001F62                     
  1974                           ;i2c.c: 72:     delay();
  1975  001F62  EC5A  F00F         	call	_delay	;wreg free
  1976  001F66                     
  1977                           ;i2c.c: 73:     PORTCbits.RC3 = 1;
  1978  001F66  8682               	bsf	130,3,c	;volatile
  1979                           
  1980                           ;i2c.c: 74:     delay();
  1981  001F68  EC5A  F00F         	call	_delay	;wreg free
  1982  001F6C                     
  1983                           ;i2c.c: 75:     PORTCbits.RC3 = 0;
  1984  001F6C  9682               	bcf	130,3,c	;volatile
  1985  001F6E  0012               	return		;funcret
  1986  001F70                     __end_of_i2c_wb:
  1987                           	opt callstack 0
  1988                           
  1989 ;; *************** function _i2c_stop *****************
  1990 ;; Defined at:
  1991 ;;		line 54 in file "i2c.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2, status,0, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         0       0       0       0       0       0       0
  2006 ;;      Locals:         0       0       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0
  2008 ;;      Totals:         0       0       0       0       0       0       0
  2009 ;;Total ram usage:        0 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    1
  2012 ;; This function calls:
  2013 ;;		_delay
  2014 ;; This function is called by:
  2015 ;;		_rtc_r
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text5
  2020  0020A4                     __ptext5:
  2021                           	opt callstack 0
  2022  0020A4                     _i2c_stop:
  2023                           	opt callstack 28
  2024  0020A4                     
  2025                           ;i2c.c: 55:     PORTCbits.RC3 = 1;
  2026  0020A4  8682               	bsf	130,3,c	;volatile
  2027                           
  2028                           ;i2c.c: 56:     PORTCbits.RC4 = 0;
  2029  0020A6  9882               	bcf	130,4,c	;volatile
  2030  0020A8                     
  2031                           ;i2c.c: 57:     delay();
  2032  0020A8  EC5A  F00F         	call	_delay	;wreg free
  2033  0020AC                     
  2034                           ;i2c.c: 58:     PORTCbits.RC4 = 1;
  2035  0020AC  8882               	bsf	130,4,c	;volatile
  2036                           
  2037                           ;i2c.c: 59:     delay();
  2038  0020AE  EC5A  F00F         	call	_delay	;wreg free
  2039  0020B2  0012               	return		;funcret
  2040  0020B4                     __end_of_i2c_stop:
  2041                           	opt callstack 0
  2042                           
  2043 ;; *************** function _i2c_start *****************
  2044 ;; Defined at:
  2045 ;;		line 46 in file "i2c.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2059 ;;      Params:         0       0       0       0       0       0       0
  2060 ;;      Locals:         0       0       0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0
  2062 ;;      Totals:         0       0       0       0       0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    1
  2066 ;; This function calls:
  2067 ;;		_delay
  2068 ;; This function is called by:
  2069 ;;		_rtc_r
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text6
  2074  0020B4                     __ptext6:
  2075                           	opt callstack 0
  2076  0020B4                     _i2c_start:
  2077                           	opt callstack 28
  2078  0020B4                     
  2079                           ;i2c.c: 47:     PORTCbits.RC3 = 1;
  2080  0020B4  8682               	bsf	130,3,c	;volatile
  2081                           
  2082                           ;i2c.c: 48:     PORTCbits.RC4 = 1;
  2083  0020B6  8882               	bsf	130,4,c	;volatile
  2084  0020B8                     
  2085                           ;i2c.c: 49:     delay();
  2086  0020B8  EC5A  F00F         	call	_delay	;wreg free
  2087  0020BC                     
  2088                           ;i2c.c: 50:     PORTCbits.RC4 = 0;
  2089  0020BC  9882               	bcf	130,4,c	;volatile
  2090                           
  2091                           ;i2c.c: 51:     delay();
  2092  0020BE  EC5A  F00F         	call	_delay	;wreg free
  2093  0020C2  0012               	return		;funcret
  2094  0020C4                     __end_of_i2c_start:
  2095                           	opt callstack 0
  2096                           
  2097 ;; *************** function _i2c_rb *****************
  2098 ;; Defined at:
  2099 ;;		line 78 in file "i2c.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  ack             1    wreg     unsigned char 
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;  ack             1    6[COMRAM] unsigned char 
  2104 ;;  i               1    8[COMRAM] unsigned char 
  2105 ;;  ret             1    7[COMRAM] unsigned char 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      unsigned char 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2115 ;;      Params:         0       0       0       0       0       0       0
  2116 ;;      Locals:         3       0       0       0       0       0       0
  2117 ;;      Temps:          2       0       0       0       0       0       0
  2118 ;;      Totals:         5       0       0       0       0       0       0
  2119 ;;Total ram usage:        5 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    1
  2122 ;; This function calls:
  2123 ;;		_delay
  2124 ;; This function is called by:
  2125 ;;		_rtc_r
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text7
  2130  001CEC                     __ptext7:
  2131                           	opt callstack 0
  2132  001CEC                     _i2c_rb:
  2133                           	opt callstack 28
  2134                           
  2135                           ;incstack = 0
  2136                           ;i2c_rb@ack stored from wreg
  2137  001CEC  6E07               	movwf	i2c_rb@ack^0,c
  2138  001CEE                     
  2139                           ;i2c.c: 79:     char i;;i2c.c: 80:     unsigned char ret = 0;
  2140  001CEE  0E00               	movlw	0
  2141  001CF0  6E08               	movwf	i2c_rb@ret^0,c
  2142  001CF2                     
  2143                           ;i2c.c: 82:     PORTCbits.RC3 = 0;
  2144  001CF2  9682               	bcf	130,3,c	;volatile
  2145  001CF4                     
  2146                           ;i2c.c: 83:     TRISCbits.TRISC4 = 1;
  2147  001CF4  8894               	bsf	148,4,c	;volatile
  2148  001CF6                     
  2149                           ;i2c.c: 84:     PORTCbits.RC4 = 1;
  2150  001CF6  8882               	bsf	130,4,c	;volatile
  2151                           
  2152                           ;i2c.c: 85:     for (i = 0; i < 8; i++) {
  2153  001CF8  0E00               	movlw	0
  2154  001CFA  6E09               	movwf	i2c_rb@i^0,c
  2155  001CFC                     l107:
  2156                           
  2157                           ;i2c.c: 86:         PORTCbits.RC3 = 1;
  2158  001CFC  8682               	bsf	130,3,c	;volatile
  2159  001CFE                     
  2160                           ;i2c.c: 87:         delay();
  2161  001CFE  EC5A  F00F         	call	_delay	;wreg free
  2162  001D02                     
  2163                           ;i2c.c: 88:         ret |= (PORTCbits.RC4 << (7 - i));
  2164  001D02  5009               	movf	i2c_rb@i^0,w,c
  2165  001D04  0807               	sublw	7
  2166  001D06  6E05               	movwf	??_i2c_rb^0,c
  2167  001D08  B882               	btfsc	130,4,c	;volatile
  2168  001D0A  EF89  F00E         	goto	u1471
  2169  001D0E  EF8D  F00E         	goto	u1470
  2170  001D12                     u1471:
  2171  001D12  6A06               	clrf	(??_i2c_rb+1)^0,c
  2172  001D14  2A06               	incf	(??_i2c_rb+1)^0,f,c
  2173  001D16  EF8E  F00E         	goto	u1478
  2174  001D1A                     u1470:
  2175  001D1A  6A06               	clrf	(??_i2c_rb+1)^0,c
  2176  001D1C                     u1478:
  2177  001D1C  2A05               	incf	??_i2c_rb^0,f,c
  2178  001D1E  EF93  F00E         	goto	u1484
  2179  001D22                     u1485:
  2180  001D22  90D8               	bcf	status,0,c
  2181  001D24  3606               	rlcf	(??_i2c_rb+1)^0,f,c
  2182  001D26                     u1484:
  2183  001D26  2E05               	decfsz	??_i2c_rb^0,f,c
  2184  001D28  EF91  F00E         	goto	u1485
  2185  001D2C  5006               	movf	(??_i2c_rb+1)^0,w,c
  2186  001D2E  1208               	iorwf	i2c_rb@ret^0,f,c
  2187  001D30                     
  2188                           ;i2c.c: 89:         PORTCbits.RC3 = 0;
  2189  001D30  9682               	bcf	130,3,c	;volatile
  2190  001D32                     
  2191                           ;i2c.c: 90:     }
  2192  001D32  2A09               	incf	i2c_rb@i^0,f,c
  2193  001D34  0E07               	movlw	7
  2194  001D36  6409               	cpfsgt	i2c_rb@i^0,c
  2195  001D38  EFA0  F00E         	goto	u1491
  2196  001D3C  EFA2  F00E         	goto	u1490
  2197  001D40                     u1491:
  2198  001D40  EF7E  F00E         	goto	l107
  2199  001D44                     u1490:
  2200  001D44                     
  2201                           ;i2c.c: 91:     TRISCbits.TRISC4 = 0;
  2202  001D44  9894               	bcf	148,4,c	;volatile
  2203  001D46                     
  2204                           ;i2c.c: 92:     if (ack)
  2205  001D46  5007               	movf	i2c_rb@ack^0,w,c
  2206  001D48  B4D8               	btfsc	status,2,c
  2207  001D4A  EFA9  F00E         	goto	u1501
  2208  001D4E  EFAB  F00E         	goto	u1500
  2209  001D52                     u1501:
  2210  001D52  EFAE  F00E         	goto	l109
  2211  001D56                     u1500:
  2212  001D56                     
  2213                           ;i2c.c: 93:         PORTCbits.RC4 = 0;
  2214  001D56  9882               	bcf	130,4,c	;volatile
  2215  001D58  EFAF  F00E         	goto	l2668
  2216  001D5C                     l109:
  2217                           
  2218                           ;i2c.c: 95:         PORTCbits.RC4 = 1;
  2219  001D5C  8882               	bsf	130,4,c	;volatile
  2220  001D5E                     l2668:
  2221                           
  2222                           ;i2c.c: 96:     delay();
  2223  001D5E  EC5A  F00F         	call	_delay	;wreg free
  2224  001D62                     
  2225                           ;i2c.c: 97:     PORTCbits.RC3 = 1;
  2226  001D62  8682               	bsf	130,3,c	;volatile
  2227                           
  2228                           ;i2c.c: 98:     delay();
  2229  001D64  EC5A  F00F         	call	_delay	;wreg free
  2230  001D68                     
  2231                           ;i2c.c: 99:     PORTCbits.RC3 = 0;
  2232  001D68  9682               	bcf	130,3,c	;volatile
  2233  001D6A                     
  2234                           ;i2c.c: 101:     return ret;
  2235  001D6A  5008               	movf	i2c_rb@ret^0,w,c
  2236  001D6C  0012               	return		;funcret
  2237  001D6E                     __end_of_i2c_rb:
  2238                           	opt callstack 0
  2239                           
  2240 ;; *************** function _delay *****************
  2241 ;; Defined at:
  2242 ;;		line 29 in file "i2c.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  i               2    0[COMRAM] unsigned int 
  2247 ;;  k               1    3[COMRAM] volatile unsigned char 
  2248 ;;  j               1    2[COMRAM] volatile unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2258 ;;      Params:         0       0       0       0       0       0       0
  2259 ;;      Locals:         4       0       0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0
  2261 ;;      Totals:         4       0       0       0       0       0       0
  2262 ;;Total ram usage:        4 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; This function calls:
  2265 ;;		Nothing
  2266 ;; This function is called by:
  2267 ;;		_i2c_start
  2268 ;;		_i2c_stop
  2269 ;;		_i2c_wb
  2270 ;;		_i2c_rb
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text8
  2275  001EB4                     __ptext8:
  2276                           	opt callstack 0
  2277  001EB4                     _delay:
  2278                           	opt callstack 28
  2279  001EB4                     
  2280                           ;i2c.c: 30:     unsigned int i;;i2c.c: 31:     volatile unsigned char j, k;;i2c.c: 33:  
      +                             for (i = 0; i < 5; i++) {
  2281  001EB4  0E00               	movlw	0
  2282  001EB6  6E02               	movwf	(delay@i+1)^0,c
  2283  001EB8  0E00               	movlw	0
  2284  001EBA  6E01               	movwf	delay@i^0,c
  2285  001EBC                     l2540:
  2286                           
  2287                           ;i2c.c: 34:         for (j = 0; j < 41; j++) {
  2288  001EBC  0E00               	movlw	0
  2289  001EBE  6E03               	movwf	delay@j^0,c	;volatile
  2290  001EC0                     l2542:
  2291  001EC0  0E28               	movlw	40
  2292  001EC2  6403               	cpfsgt	delay@j^0,c	;volatile
  2293  001EC4  EF66  F00F         	goto	u1341
  2294  001EC8  EF68  F00F         	goto	u1340
  2295  001ECC                     u1341:
  2296  001ECC  EF6A  F00F         	goto	l2546
  2297  001ED0                     u1340:
  2298  001ED0  EF7C  F00F         	goto	l2560
  2299  001ED4                     l2546:
  2300                           
  2301                           ;i2c.c: 35:             for (k = 0; k < 3; k++);
  2302  001ED4  0E00               	movlw	0
  2303  001ED6  6E04               	movwf	delay@k^0,c	;volatile
  2304  001ED8                     l2548:
  2305  001ED8  0E02               	movlw	2
  2306  001EDA  6404               	cpfsgt	delay@k^0,c	;volatile
  2307  001EDC  EF72  F00F         	goto	u1351
  2308  001EE0  EF74  F00F         	goto	u1350
  2309  001EE4                     u1351:
  2310  001EE4  EF76  F00F         	goto	l2552
  2311  001EE8                     u1350:
  2312  001EE8  EF79  F00F         	goto	l2556
  2313  001EEC                     l2552:
  2314  001EEC  2A04               	incf	delay@k^0,f,c	;volatile
  2315  001EEE  EF6C  F00F         	goto	l2548
  2316  001EF2                     l2556:
  2317                           
  2318                           ;i2c.c: 36:         }
  2319  001EF2  2A03               	incf	delay@j^0,f,c	;volatile
  2320  001EF4  EF60  F00F         	goto	l2542
  2321  001EF8                     l2560:
  2322                           
  2323                           ;i2c.c: 37:     }
  2324  001EF8  4A01               	infsnz	delay@i^0,f,c
  2325  001EFA  2A02               	incf	(delay@i+1)^0,f,c
  2326  001EFC  5002               	movf	(delay@i+1)^0,w,c
  2327  001EFE  E109               	bnz	u1360
  2328  001F00  0E05               	movlw	5
  2329  001F02  5C01               	subwf	delay@i^0,w,c
  2330  001F04  A0D8               	btfss	status,0,c
  2331  001F06  EF87  F00F         	goto	u1361
  2332  001F0A  EF89  F00F         	goto	u1360
  2333  001F0E                     u1361:
  2334  001F0E  EF5E  F00F         	goto	l2540
  2335  001F12                     u1360:
  2336  001F12  0012               	return		;funcret
  2337  001F14                     __end_of_delay:
  2338                           	opt callstack 0
  2339                           
  2340 ;; *************** function _getu *****************
  2341 ;; Defined at:
  2342 ;;		line 36 in file "rtc_r.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  nn              1    wreg     unsigned char 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;  nn              1    0[COMRAM] unsigned char 
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      unsigned char 
  2349 ;; Registers used:
  2350 ;;		wreg, status,2, status,0
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2356 ;;      Params:         0       0       0       0       0       0       0
  2357 ;;      Locals:         1       0       0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0       0       0
  2359 ;;      Totals:         1       0       0       0       0       0       0
  2360 ;;Total ram usage:        1 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; This function calls:
  2363 ;;		Nothing
  2364 ;; This function is called by:
  2365 ;;		_rtc_r
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text9
  2370  0020D0                     __ptext9:
  2371                           	opt callstack 0
  2372  0020D0                     _getu:
  2373                           	opt callstack 29
  2374                           
  2375                           ;incstack = 0
  2376                           ;getu@nn stored from wreg
  2377  0020D0  6E01               	movwf	getu@nn^0,c
  2378  0020D2                     
  2379                           ;rtc_r.c: 37:     return (nn & 0x0F) + 0x30;
  2380  0020D2  5001               	movf	getu@nn^0,w,c
  2381  0020D4  0B0F               	andlw	15
  2382  0020D6  0F30               	addlw	48
  2383  0020D8  0012               	return		;funcret
  2384  0020DA                     __end_of_getu:
  2385                           	opt callstack 0
  2386                           
  2387 ;; *************** function _getd *****************
  2388 ;; Defined at:
  2389 ;;		line 32 in file "rtc_r.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  nn              1    wreg     unsigned char 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  nn              1    0[COMRAM] unsigned char 
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      unsigned char 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2403 ;;      Params:         0       0       0       0       0       0       0
  2404 ;;      Locals:         1       0       0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0
  2406 ;;      Totals:         1       0       0       0       0       0       0
  2407 ;;Total ram usage:        1 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_rtc_r
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text10
  2417  0020C4                     __ptext10:
  2418                           	opt callstack 0
  2419  0020C4                     _getd:
  2420                           	opt callstack 29
  2421                           
  2422                           ;incstack = 0
  2423                           ;getd@nn stored from wreg
  2424  0020C4  6E01               	movwf	getd@nn^0,c
  2425  0020C6                     
  2426                           ;rtc_r.c: 33:     return ((nn & 0xF0) >> 4) + 0x30;
  2427  0020C6  3801               	swapf	getd@nn^0,w,c
  2428  0020C8  0B0F               	andlw	15
  2429  0020CA  0B0F               	andlw	15
  2430  0020CC  0F30               	addlw	48
  2431  0020CE  0012               	return		;funcret
  2432  0020D0                     __end_of_getd:
  2433                           	opt callstack 0
  2434                           
  2435 ;; *************** function _menu *****************
  2436 ;; Defined at:
  2437 ;;		line 106 in file "main.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  tecla           1  107[COMRAM] unsigned char 
  2442 ;;  tempo           1  106[COMRAM] unsigned char 
  2443 ;;  i               1    0        unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2453 ;;      Params:         0       0       0       0       0       0       0
  2454 ;;      Locals:         2       0       0       0       0       0       0
  2455 ;;      Temps:          2       0       0       0       0       0       0
  2456 ;;      Totals:         4       0       0       0       0       0       0
  2457 ;;Total ram usage:        4 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    4
  2460 ;; This function calls:
  2461 ;;		_lcd_cmd
  2462 ;;		_lcd_pos
  2463 ;;		_lcd_str
  2464 ;;		_ligacao
  2465 ;;		_mensagem
  2466 ;;		_tc_tecla
  2467 ;; This function is called by:
  2468 ;;		_main
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text11
  2473  001884                     __ptext11:
  2474                           	opt callstack 0
  2475  001884                     _menu:
  2476                           	opt callstack 26
  2477  001884                     
  2478                           ;main.c: 107:     unsigned char i, tecla, tempo;;main.c: 108:     lcd_cmd(0x01);
  2479  001884  0E01               	movlw	1
  2480  001886  EC1A  F010         	call	_lcd_cmd
  2481  00188A                     
  2482                           ;main.c: 109:     lcd_str("1-Ligar");
  2483  00188A  0EA2               	movlw	low STR_1
  2484  00188C  6E0A               	movwf	lcd_str@str^0,c
  2485  00188E  0E06               	movlw	high STR_1
  2486  001890  6E0B               	movwf	(lcd_str@str+1)^0,c
  2487  001892  ECD3  F00C         	call	_lcd_str	;wreg free
  2488  001896                     
  2489                           ;main.c: 110:     lcd_pos(1, 0);
  2490  001896  0E00               	movlw	0
  2491  001898  6E06               	movwf	lcd_pos@col^0,c
  2492  00189A  0E01               	movlw	1
  2493  00189C  ECCE  F00D         	call	_lcd_pos
  2494                           
  2495                           ;main.c: 111:     lcd_str("2-Mensagem");
  2496  0018A0  0E64               	movlw	low STR_2
  2497  0018A2  6E0A               	movwf	lcd_str@str^0,c
  2498  0018A4  0E06               	movlw	high STR_2
  2499  0018A6  6E0B               	movwf	(lcd_str@str+1)^0,c
  2500  0018A8  ECD3  F00C         	call	_lcd_str	;wreg free
  2501  0018AC                     
  2502                           ;main.c: 112:     lcd_pos(2, 0);
  2503  0018AC  0E00               	movlw	0
  2504  0018AE  6E06               	movwf	lcd_pos@col^0,c
  2505  0018B0  0E02               	movlw	2
  2506  0018B2  ECCE  F00D         	call	_lcd_pos
  2507  0018B6                     
  2508                           ;main.c: 113:     lcd_str("3-Teste Ligar");
  2509  0018B6  0E3C               	movlw	low STR_3
  2510  0018B8  6E0A               	movwf	lcd_str@str^0,c
  2511  0018BA  0E06               	movlw	high STR_3
  2512  0018BC  6E0B               	movwf	(lcd_str@str+1)^0,c
  2513  0018BE  ECD3  F00C         	call	_lcd_str	;wreg free
  2514                           
  2515                           ;main.c: 114:     lcd_pos(3, 0);
  2516  0018C2  0E00               	movlw	0
  2517  0018C4  6E06               	movwf	lcd_pos@col^0,c
  2518  0018C6  0E03               	movlw	3
  2519  0018C8  ECCE  F00D         	call	_lcd_pos
  2520  0018CC                     
  2521                           ;main.c: 115:     lcd_str("4-Teste Mensagem");
  2522  0018CC  0E2B               	movlw	low STR_4
  2523  0018CE  6E0A               	movwf	lcd_str@str^0,c
  2524  0018D0  0E06               	movlw	high STR_4
  2525  0018D2  6E0B               	movwf	(lcd_str@str+1)^0,c
  2526  0018D4  ECD3  F00C         	call	_lcd_str	;wreg free
  2527  0018D8                     
  2528                           ;main.c: 116:     tempo = 0;
  2529  0018D8  0E00               	movlw	0
  2530  0018DA  6E6B               	movwf	menu@tempo^0,c
  2531  0018DC                     l3348:
  2532                           
  2533                           ;main.c: 118:         tecla = tc_tecla(1000);
  2534  0018DC  0E03               	movlw	3
  2535  0018DE  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  2536  0018E0  0EE8               	movlw	232
  2537  0018E2  6E06               	movwf	tc_tecla@timeout^0,c
  2538  0018E4  EC8A  F009         	call	_tc_tecla	;wreg free
  2539  0018E8  6E6C               	movwf	menu@tecla^0,c
  2540                           
  2541                           ;main.c: 119:         switch (tecla){
  2542  0018EA  EF93  F00C         	goto	l3364
  2543  0018EE                     l3350:
  2544                           
  2545                           ;main.c: 121:                 ligacao();
  2546  0018EE  ECAD  F007         	call	_ligacao	;wreg free
  2547  0018F2                     l3352:
  2548                           
  2549                           ;main.c: 122:                 condRetornaInicial = 1;
  2550  0018F2  0E01               	movlw	1
  2551  0018F4  6E6F               	movwf	_condRetornaInicial^0,c
  2552                           
  2553                           ;main.c: 123:                 break;
  2554  0018F6  EFB0  F00C         	goto	l3366
  2555  0018FA                     l3354:
  2556                           
  2557                           ;main.c: 125:                 mensagem();
  2558  0018FA  EC59  F003         	call	_mensagem	;wreg free
  2559  0018FE  EF79  F00C         	goto	l3352
  2560  001902                     l3358:
  2561                           
  2562                           ;main.c: 129:                 PORTE = 0x01;
  2563  001902  0E01               	movlw	1
  2564  001904  6E84               	movwf	132,c	;volatile
  2565                           
  2566                           ;main.c: 130:                 identificaSinal = 1;
  2567  001906  0E01               	movlw	1
  2568  001908  0100               	movlb	0	; () banked
  2569  00190A  6FEC               	movwf	_identificaSinal& (0+255),b
  2570                           
  2571                           ;main.c: 131:                 condRetornaInicial = 1;
  2572  00190C  0E01               	movlw	1
  2573  00190E  6E6F               	movwf	_condRetornaInicial^0,c
  2574                           
  2575                           ;main.c: 132:                 break;
  2576  001910  EFB0  F00C         	goto	l3366
  2577  001914                     l3360:
  2578                           
  2579                           ;main.c: 134:                 PORTE = 0x01;
  2580  001914  0E01               	movlw	1
  2581  001916  6E84               	movwf	132,c	;volatile
  2582                           
  2583                           ;main.c: 135:                 identificaSinal = 2;
  2584  001918  0E02               	movlw	2
  2585  00191A  0100               	movlb	0	; () banked
  2586  00191C  6FEC               	movwf	_identificaSinal& (0+255),b
  2587                           
  2588                           ;main.c: 136:                 condRetornaInicial = 1;
  2589  00191E  0E01               	movlw	1
  2590  001920  6E6F               	movwf	_condRetornaInicial^0,c
  2591                           
  2592                           ;main.c: 137:                 break;
  2593  001922  EFB0  F00C         	goto	l3366
  2594  001926                     l3364:
  2595  001926  506C               	movf	menu@tecla^0,w,c
  2596  001928  6E69               	movwf	??_menu^0,c
  2597  00192A  6A6A               	clrf	(??_menu+1)^0,c
  2598                           
  2599                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2600                           ; Switch size 1, requested type "simple"
  2601                           ; Number of cases is 1, Range of values is 0 to 0
  2602                           ; switch strategies available:
  2603                           ; Name         Instructions Cycles
  2604                           ; simple_byte            4     3 (average)
  2605                           ;	Chosen strategy is simple_byte
  2606  00192C  506A               	movf	(??_menu+1)^0,w,c
  2607  00192E  0A00               	xorlw	0	; case 0
  2608  001930  B4D8               	btfsc	status,2,c
  2609  001932  EF9D  F00C         	goto	l3674
  2610  001936  EFB0  F00C         	goto	l3366
  2611  00193A                     l3674:
  2612                           
  2613                           ; Switch size 1, requested type "simple"
  2614                           ; Number of cases is 4, Range of values is 1 to 4
  2615                           ; switch strategies available:
  2616                           ; Name         Instructions Cycles
  2617                           ; simple_byte           13     7 (average)
  2618                           ;	Chosen strategy is simple_byte
  2619  00193A  5069               	movf	??_menu^0,w,c
  2620  00193C  0A01               	xorlw	1	; case 1
  2621  00193E  B4D8               	btfsc	status,2,c
  2622  001940  EF77  F00C         	goto	l3350
  2623  001944  0A03               	xorlw	3	; case 2
  2624  001946  B4D8               	btfsc	status,2,c
  2625  001948  EF7D  F00C         	goto	l3354
  2626  00194C  0A01               	xorlw	1	; case 3
  2627  00194E  B4D8               	btfsc	status,2,c
  2628  001950  EF81  F00C         	goto	l3358
  2629  001954  0A07               	xorlw	7	; case 4
  2630  001956  B4D8               	btfsc	status,2,c
  2631  001958  EF8A  F00C         	goto	l3360
  2632  00195C  EFB0  F00C         	goto	l3366
  2633  001960                     l3366:
  2634                           
  2635                           ;main.c: 141:         if(tecla == 10 || tempo > 10){
  2636  001960  0E0A               	movlw	10
  2637  001962  186C               	xorwf	menu@tecla^0,w,c
  2638  001964  B4D8               	btfsc	status,2,c
  2639  001966  EFB7  F00C         	goto	u1981
  2640  00196A  EFB9  F00C         	goto	u1980
  2641  00196E                     u1981:
  2642  00196E  EFC1  F00C         	goto	l3370
  2643  001972                     u1980:
  2644  001972  0E0A               	movlw	10
  2645  001974  646B               	cpfsgt	menu@tempo^0,c
  2646  001976  EFBF  F00C         	goto	u1991
  2647  00197A  EFC1  F00C         	goto	u1990
  2648  00197E                     u1991:
  2649  00197E  EFC3  F00C         	goto	l200
  2650  001982                     u1990:
  2651  001982                     l3370:
  2652                           
  2653                           ;main.c: 142:             condRetornaInicial = 1;
  2654  001982  0E01               	movlw	1
  2655  001984  6E6F               	movwf	_condRetornaInicial^0,c
  2656  001986                     l200:
  2657                           
  2658                           ;main.c: 146:         if(condRetornaInicial){
  2659  001986  506F               	movf	_condRetornaInicial^0,w,c
  2660  001988  B4D8               	btfsc	status,2,c
  2661  00198A  EFC9  F00C         	goto	u2001
  2662  00198E  EFCB  F00C         	goto	u2000
  2663  001992                     u2001:
  2664  001992  EFCF  F00C         	goto	l3374
  2665  001996                     u2000:
  2666  001996                     
  2667                           ;main.c: 147:             condRetornaInicial = 0;
  2668  001996  0E00               	movlw	0
  2669  001998  6E6F               	movwf	_condRetornaInicial^0,c
  2670                           
  2671                           ;main.c: 148:             break;
  2672  00199A  EFD2  F00C         	goto	l205
  2673  00199E                     l3374:
  2674                           
  2675                           ;main.c: 150:         tempo++;
  2676  00199E  2A6B               	incf	menu@tempo^0,f,c
  2677                           
  2678                           ;main.c: 151:     }
  2679  0019A0  EF6E  F00C         	goto	l3348
  2680  0019A4                     l205:
  2681  0019A4  0012               	return		;funcret
  2682  0019A6                     __end_of_menu:
  2683                           	opt callstack 0
  2684                           
  2685 ;; *************** function _mensagem *****************
  2686 ;; Defined at:
  2687 ;;		line 154 in file "main.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  mensagem       64   18[COMRAM] unsigned char [64]
  2692 ;;  numero         12   84[COMRAM] unsigned char [12]
  2693 ;;  letra           1  103[COMRAM] unsigned char 
  2694 ;;  tecla           1  102[COMRAM] unsigned char 
  2695 ;;  contN           1  101[COMRAM] unsigned char 
  2696 ;;  coluna          1  100[COMRAM] unsigned char 
  2697 ;;  tempo           1   99[COMRAM] unsigned char 
  2698 ;;  linha           1   98[COMRAM] unsigned char 
  2699 ;;  contMSG         1   97[COMRAM] unsigned char 
  2700 ;;  i               1   96[COMRAM] unsigned char 
  2701 ;;  enviar          1    0        unsigned char 
  2702 ;;  old_TC          1   82[COMRAM] unsigned char 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2712 ;;      Params:         0       0       0       0       0       0       0
  2713 ;;      Locals:        86       0       0       0       0       0       0
  2714 ;;      Temps:          2       0       0       0       0       0       0
  2715 ;;      Totals:        88       0       0       0       0       0       0
  2716 ;;Total ram usage:       88 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    3
  2719 ;; This function calls:
  2720 ;;		_atraso_ms
  2721 ;;		_imprimeSimbolo
  2722 ;;		_lcd_cmd
  2723 ;;		_lcd_dat
  2724 ;;		_lcd_pos
  2725 ;;		_lcd_str
  2726 ;;		_tc_tecla
  2727 ;; This function is called by:
  2728 ;;		_menu
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text12
  2733  0006B2                     __ptext12:
  2734                           	opt callstack 0
  2735  0006B2                     _mensagem:
  2736                           	opt callstack 26
  2737  0006B2                     
  2738                           ;main.c: 155:     lcd_cmd(0x01);
  2739  0006B2  0E01               	movlw	1
  2740  0006B4  EC1A  F010         	call	_lcd_cmd
  2741                           
  2742                           ;main.c: 156:     lcd_cmd(0x0F);
  2743  0006B8  0E0F               	movlw	15
  2744  0006BA  EC1A  F010         	call	_lcd_cmd
  2745  0006BE  0E00               	movlw	0
  2746  0006C0  6E63               	movwf	mensagem@linha^0,c
  2747  0006C2  0E00               	movlw	0
  2748  0006C4  6E65               	movwf	mensagem@coluna^0,c
  2749  0006C6  0E00               	movlw	0
  2750  0006C8  6E62               	movwf	mensagem@contMSG^0,c
  2751  0006CA  0E00               	movlw	0
  2752  0006CC  6E66               	movwf	mensagem@contN^0,c
  2753  0006CE                     
  2754                           ;main.c: 159:     old_TC = TRISC;
  2755  0006CE  CF94 F053          	movff	3988,mensagem@old_TC	;volatile
  2756  0006D2                     l2852:
  2757                           
  2758                           ;main.c: 161:         tecla = tc_tecla(0);
  2759  0006D2  0E00               	movlw	0
  2760  0006D4  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  2761  0006D6  0E00               	movlw	0
  2762  0006D8  6E06               	movwf	tc_tecla@timeout^0,c
  2763  0006DA  EC8A  F009         	call	_tc_tecla	;wreg free
  2764  0006DE  6E67               	movwf	mensagem@tecla^0,c
  2765  0006E0                     
  2766                           ;main.c: 162:         tempo = 0;
  2767  0006E0  0E00               	movlw	0
  2768  0006E2  6E64               	movwf	mensagem@tempo^0,c
  2769                           
  2770                           ;main.c: 164:         switch (tecla){
  2771  0006E4  EFBB  F005         	goto	l3138
  2772  0006E8                     l2856:
  2773                           
  2774                           ;main.c: 166:                 letra = 0;
  2775  0006E8  0E00               	movlw	0
  2776  0006EA  6E68               	movwf	mensagem@letra^0,c
  2777  0006EC                     l2858:
  2778                           
  2779                           ;main.c: 168:                     lcd_dat(listaLetras[letra]);
  2780  0006EC  0E00               	movlw	low _listaLetras
  2781  0006EE  2468               	addwf	mensagem@letra^0,w,c
  2782  0006F0  6ED9               	movwf	fsr2l,c
  2783  0006F2  6ADA               	clrf	fsr2h,c
  2784  0006F4  0E01               	movlw	high _listaLetras
  2785  0006F6  22DA               	addwfc	fsr2h,f,c
  2786  0006F8  50DF               	movf	indf2,w,c
  2787  0006FA  EC05  F010         	call	_lcd_dat
  2788  0006FE                     
  2789                           ;main.c: 169:                     lcd_pos(linha, coluna);
  2790  0006FE  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  2791  000702  5063               	movf	mensagem@linha^0,w,c
  2792  000704  ECCE  F00D         	call	_lcd_pos
  2793  000708                     
  2794                           ;main.c: 170:                     tecla = tc_tecla(1000);
  2795  000708  0E03               	movlw	3
  2796  00070A  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  2797  00070C  0EE8               	movlw	232
  2798  00070E  6E06               	movwf	tc_tecla@timeout^0,c
  2799  000710  EC8A  F009         	call	_tc_tecla	;wreg free
  2800  000714  6E67               	movwf	mensagem@tecla^0,c
  2801  000716                     
  2802                           ;main.c: 171:                     tempo++;
  2803  000716  2A64               	incf	mensagem@tempo^0,f,c
  2804  000718                     
  2805                           ;main.c: 172:                     if(tecla == 1){
  2806  000718  0467               	decf	mensagem@tecla^0,w,c
  2807  00071A  A4D8               	btfss	status,2,c
  2808  00071C  EF92  F003         	goto	u1601
  2809  000720  EF94  F003         	goto	u1600
  2810  000724                     u1601:
  2811  000724  EFA1  F003         	goto	l2874
  2812  000728                     u1600:
  2813  000728                     
  2814                           ;main.c: 173:                         letra++;
  2815  000728  2A68               	incf	mensagem@letra^0,f,c
  2816  00072A                     
  2817                           ;main.c: 174:                         if(letra == 1){ letra = 0; }
  2818  00072A  0468               	decf	mensagem@letra^0,w,c
  2819  00072C  A4D8               	btfss	status,2,c
  2820  00072E  EF9B  F003         	goto	u1611
  2821  000732  EF9D  F003         	goto	u1610
  2822  000736                     u1611:
  2823  000736  EF9F  F003         	goto	l213
  2824  00073A                     u1610:
  2825  00073A  0E00               	movlw	0
  2826  00073C  6E68               	movwf	mensagem@letra^0,c
  2827  00073E                     l213:
  2828                           
  2829                           ;main.c: 175:                         tempo = 0;
  2830  00073E  0E00               	movlw	0
  2831  000740  6E64               	movwf	mensagem@tempo^0,c
  2832  000742                     l2874:
  2833                           
  2834                           ;main.c: 177:                     if(tempo>=3){
  2835  000742  0E02               	movlw	2
  2836  000744  6464               	cpfsgt	mensagem@tempo^0,c
  2837  000746  EFA7  F003         	goto	u1621
  2838  00074A  EFA9  F003         	goto	u1620
  2839  00074E                     u1621:
  2840  00074E  EF76  F003         	goto	l2858
  2841  000752                     u1620:
  2842  000752                     l2878:
  2843                           
  2844                           ;main.c: 181:                 mensagem[contMSG] = listaLetras[letra];
  2845  000752  0E00               	movlw	low _listaLetras
  2846  000754  2468               	addwf	mensagem@letra^0,w,c
  2847  000756  6ED9               	movwf	fsr2l,c
  2848  000758  6ADA               	clrf	fsr2h,c
  2849  00075A  0E01               	movlw	high _listaLetras
  2850  00075C  22DA               	addwfc	fsr2h,f,c
  2851  00075E  0E13               	movlw	low mensagem@mensagem
  2852  000760  2462               	addwf	mensagem@contMSG^0,w,c
  2853  000762  6EE1               	movwf	fsr1l,c
  2854  000764  6AE2               	clrf	fsr1h,c
  2855  000766  0E00               	movlw	high mensagem@mensagem
  2856  000768  22E2               	addwfc	fsr1h,f,c
  2857  00076A  CFDF FFE7          	movff	indf2,indf1
  2858  00076E                     
  2859                           ;main.c: 182:                 contMSG++;
  2860  00076E  2A62               	incf	mensagem@contMSG^0,f,c
  2861  000770                     
  2862                           ;main.c: 183:                 coluna++;
  2863  000770  2A65               	incf	mensagem@coluna^0,f,c
  2864                           
  2865                           ;main.c: 184:                 break;
  2866  000772  EFF0  F005         	goto	l3140
  2867  000776                     l2884:
  2868                           
  2869                           ;main.c: 186:                 letra = 1;
  2870  000776  0E01               	movlw	1
  2871  000778  6E68               	movwf	mensagem@letra^0,c
  2872  00077A                     l2886:
  2873                           
  2874                           ;main.c: 188:                     lcd_dat(listaLetras[letra]);
  2875  00077A  0E00               	movlw	low _listaLetras
  2876  00077C  2468               	addwf	mensagem@letra^0,w,c
  2877  00077E  6ED9               	movwf	fsr2l,c
  2878  000780  6ADA               	clrf	fsr2h,c
  2879  000782  0E01               	movlw	high _listaLetras
  2880  000784  22DA               	addwfc	fsr2h,f,c
  2881  000786  50DF               	movf	indf2,w,c
  2882  000788  EC05  F010         	call	_lcd_dat
  2883  00078C                     
  2884                           ;main.c: 189:                     lcd_pos(linha, coluna);
  2885  00078C  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  2886  000790  5063               	movf	mensagem@linha^0,w,c
  2887  000792  ECCE  F00D         	call	_lcd_pos
  2888  000796                     
  2889                           ;main.c: 190:                     tecla = tc_tecla(1000);
  2890  000796  0E03               	movlw	3
  2891  000798  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  2892  00079A  0EE8               	movlw	232
  2893  00079C  6E06               	movwf	tc_tecla@timeout^0,c
  2894  00079E  EC8A  F009         	call	_tc_tecla	;wreg free
  2895  0007A2  6E67               	movwf	mensagem@tecla^0,c
  2896  0007A4                     
  2897                           ;main.c: 191:                     tempo++;
  2898  0007A4  2A64               	incf	mensagem@tempo^0,f,c
  2899  0007A6                     
  2900                           ;main.c: 192:                     if(tecla == 2){
  2901  0007A6  0E02               	movlw	2
  2902  0007A8  1867               	xorwf	mensagem@tecla^0,w,c
  2903  0007AA  A4D8               	btfss	status,2,c
  2904  0007AC  EFDA  F003         	goto	u1631
  2905  0007B0  EFDC  F003         	goto	u1630
  2906  0007B4                     u1631:
  2907  0007B4  EFEA  F003         	goto	l2902
  2908  0007B8                     u1630:
  2909  0007B8                     
  2910                           ;main.c: 193:                         letra++;
  2911  0007B8  2A68               	incf	mensagem@letra^0,f,c
  2912  0007BA                     
  2913                           ;main.c: 194:                         if(letra == 8){ letra = 1; }
  2914  0007BA  0E08               	movlw	8
  2915  0007BC  1868               	xorwf	mensagem@letra^0,w,c
  2916  0007BE  A4D8               	btfss	status,2,c
  2917  0007C0  EFE4  F003         	goto	u1641
  2918  0007C4  EFE6  F003         	goto	u1640
  2919  0007C8                     u1641:
  2920  0007C8  EFE8  F003         	goto	l220
  2921  0007CC                     u1640:
  2922  0007CC  0E01               	movlw	1
  2923  0007CE  6E68               	movwf	mensagem@letra^0,c
  2924  0007D0                     l220:
  2925                           
  2926                           ;main.c: 195:                         tempo = 0;
  2927  0007D0  0E00               	movlw	0
  2928  0007D2  6E64               	movwf	mensagem@tempo^0,c
  2929  0007D4                     l2902:
  2930                           
  2931                           ;main.c: 197:                     if(tempo>=3){
  2932  0007D4  0E02               	movlw	2
  2933  0007D6  6464               	cpfsgt	mensagem@tempo^0,c
  2934  0007D8  EFF0  F003         	goto	u1651
  2935  0007DC  EFF2  F003         	goto	u1650
  2936  0007E0                     u1651:
  2937  0007E0  EFBD  F003         	goto	l2886
  2938  0007E4                     u1650:
  2939  0007E4  EFA9  F003         	goto	l2878
  2940  0007E8                     l2912:
  2941                           
  2942                           ;main.c: 206:                 letra = 8;
  2943  0007E8  0E08               	movlw	8
  2944  0007EA  6E68               	movwf	mensagem@letra^0,c
  2945  0007EC                     l2914:
  2946                           
  2947                           ;main.c: 208:                     lcd_dat(listaLetras[letra]);
  2948  0007EC  0E00               	movlw	low _listaLetras
  2949  0007EE  2468               	addwf	mensagem@letra^0,w,c
  2950  0007F0  6ED9               	movwf	fsr2l,c
  2951  0007F2  6ADA               	clrf	fsr2h,c
  2952  0007F4  0E01               	movlw	high _listaLetras
  2953  0007F6  22DA               	addwfc	fsr2h,f,c
  2954  0007F8  50DF               	movf	indf2,w,c
  2955  0007FA  EC05  F010         	call	_lcd_dat
  2956  0007FE                     
  2957                           ;main.c: 209:                     lcd_pos(linha, coluna);
  2958  0007FE  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  2959  000802  5063               	movf	mensagem@linha^0,w,c
  2960  000804  ECCE  F00D         	call	_lcd_pos
  2961  000808                     
  2962                           ;main.c: 210:                     tecla = tc_tecla(1000);
  2963  000808  0E03               	movlw	3
  2964  00080A  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  2965  00080C  0EE8               	movlw	232
  2966  00080E  6E06               	movwf	tc_tecla@timeout^0,c
  2967  000810  EC8A  F009         	call	_tc_tecla	;wreg free
  2968  000814  6E67               	movwf	mensagem@tecla^0,c
  2969  000816                     
  2970                           ;main.c: 211:                     tempo++;
  2971  000816  2A64               	incf	mensagem@tempo^0,f,c
  2972  000818                     
  2973                           ;main.c: 212:                     if(tecla == 3){
  2974  000818  0E03               	movlw	3
  2975  00081A  1867               	xorwf	mensagem@tecla^0,w,c
  2976  00081C  A4D8               	btfss	status,2,c
  2977  00081E  EF13  F004         	goto	u1661
  2978  000822  EF15  F004         	goto	u1660
  2979  000826                     u1661:
  2980  000826  EF23  F004         	goto	l2930
  2981  00082A                     u1660:
  2982  00082A                     
  2983                           ;main.c: 213:                         letra++;
  2984  00082A  2A68               	incf	mensagem@letra^0,f,c
  2985  00082C                     
  2986                           ;main.c: 214:                         if(letra == 15){ letra = 8; }
  2987  00082C  0E0F               	movlw	15
  2988  00082E  1868               	xorwf	mensagem@letra^0,w,c
  2989  000830  A4D8               	btfss	status,2,c
  2990  000832  EF1D  F004         	goto	u1671
  2991  000836  EF1F  F004         	goto	u1670
  2992  00083A                     u1671:
  2993  00083A  EF21  F004         	goto	l226
  2994  00083E                     u1670:
  2995  00083E  0E08               	movlw	8
  2996  000840  6E68               	movwf	mensagem@letra^0,c
  2997  000842                     l226:
  2998                           
  2999                           ;main.c: 215:                         tempo = 0;
  3000  000842  0E00               	movlw	0
  3001  000844  6E64               	movwf	mensagem@tempo^0,c
  3002  000846                     l2930:
  3003                           
  3004                           ;main.c: 217:                     if(tempo>=3){
  3005  000846  0E02               	movlw	2
  3006  000848  6464               	cpfsgt	mensagem@tempo^0,c
  3007  00084A  EF29  F004         	goto	u1681
  3008  00084E  EF2B  F004         	goto	u1680
  3009  000852                     u1681:
  3010  000852  EFF6  F003         	goto	l2914
  3011  000856                     u1680:
  3012  000856  EFA9  F003         	goto	l2878
  3013  00085A                     l2940:
  3014                           
  3015                           ;main.c: 226:                 letra = 15;
  3016  00085A  0E0F               	movlw	15
  3017  00085C  6E68               	movwf	mensagem@letra^0,c
  3018  00085E                     l2942:
  3019                           
  3020                           ;main.c: 228:                     lcd_dat(listaLetras[letra]);
  3021  00085E  0E00               	movlw	low _listaLetras
  3022  000860  2468               	addwf	mensagem@letra^0,w,c
  3023  000862  6ED9               	movwf	fsr2l,c
  3024  000864  6ADA               	clrf	fsr2h,c
  3025  000866  0E01               	movlw	high _listaLetras
  3026  000868  22DA               	addwfc	fsr2h,f,c
  3027  00086A  50DF               	movf	indf2,w,c
  3028  00086C  EC05  F010         	call	_lcd_dat
  3029  000870                     
  3030                           ;main.c: 229:                     lcd_pos(linha, coluna);
  3031  000870  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3032  000874  5063               	movf	mensagem@linha^0,w,c
  3033  000876  ECCE  F00D         	call	_lcd_pos
  3034  00087A                     
  3035                           ;main.c: 230:                     tecla = tc_tecla(1000);
  3036  00087A  0E03               	movlw	3
  3037  00087C  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3038  00087E  0EE8               	movlw	232
  3039  000880  6E06               	movwf	tc_tecla@timeout^0,c
  3040  000882  EC8A  F009         	call	_tc_tecla	;wreg free
  3041  000886  6E67               	movwf	mensagem@tecla^0,c
  3042  000888                     
  3043                           ;main.c: 231:                     tempo++;
  3044  000888  2A64               	incf	mensagem@tempo^0,f,c
  3045  00088A                     
  3046                           ;main.c: 232:                     if(tecla == 4){
  3047  00088A  0E04               	movlw	4
  3048  00088C  1867               	xorwf	mensagem@tecla^0,w,c
  3049  00088E  A4D8               	btfss	status,2,c
  3050  000890  EF4C  F004         	goto	u1691
  3051  000894  EF4E  F004         	goto	u1690
  3052  000898                     u1691:
  3053  000898  EF5C  F004         	goto	l2958
  3054  00089C                     u1690:
  3055  00089C                     
  3056                           ;main.c: 233:                         letra++;
  3057  00089C  2A68               	incf	mensagem@letra^0,f,c
  3058  00089E                     
  3059                           ;main.c: 234:                         if(letra == 22){ letra = 15; }
  3060  00089E  0E16               	movlw	22
  3061  0008A0  1868               	xorwf	mensagem@letra^0,w,c
  3062  0008A2  A4D8               	btfss	status,2,c
  3063  0008A4  EF56  F004         	goto	u1701
  3064  0008A8  EF58  F004         	goto	u1700
  3065  0008AC                     u1701:
  3066  0008AC  EF5A  F004         	goto	l232
  3067  0008B0                     u1700:
  3068  0008B0  0E0F               	movlw	15
  3069  0008B2  6E68               	movwf	mensagem@letra^0,c
  3070  0008B4                     l232:
  3071                           
  3072                           ;main.c: 235:                         tempo = 0;
  3073  0008B4  0E00               	movlw	0
  3074  0008B6  6E64               	movwf	mensagem@tempo^0,c
  3075  0008B8                     l2958:
  3076                           
  3077                           ;main.c: 237:                     if(tempo>=3){
  3078  0008B8  0E02               	movlw	2
  3079  0008BA  6464               	cpfsgt	mensagem@tempo^0,c
  3080  0008BC  EF62  F004         	goto	u1711
  3081  0008C0  EF64  F004         	goto	u1710
  3082  0008C4                     u1711:
  3083  0008C4  EF2F  F004         	goto	l2942
  3084  0008C8                     u1710:
  3085  0008C8  EFA9  F003         	goto	l2878
  3086  0008CC                     l2968:
  3087                           
  3088                           ;main.c: 246:                 letra = 22;
  3089  0008CC  0E16               	movlw	22
  3090  0008CE  6E68               	movwf	mensagem@letra^0,c
  3091  0008D0                     l2970:
  3092                           
  3093                           ;main.c: 248:                     lcd_dat(listaLetras[letra]);
  3094  0008D0  0E00               	movlw	low _listaLetras
  3095  0008D2  2468               	addwf	mensagem@letra^0,w,c
  3096  0008D4  6ED9               	movwf	fsr2l,c
  3097  0008D6  6ADA               	clrf	fsr2h,c
  3098  0008D8  0E01               	movlw	high _listaLetras
  3099  0008DA  22DA               	addwfc	fsr2h,f,c
  3100  0008DC  50DF               	movf	indf2,w,c
  3101  0008DE  EC05  F010         	call	_lcd_dat
  3102  0008E2                     
  3103                           ;main.c: 249:                     lcd_pos(linha, coluna);
  3104  0008E2  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3105  0008E6  5063               	movf	mensagem@linha^0,w,c
  3106  0008E8  ECCE  F00D         	call	_lcd_pos
  3107  0008EC                     
  3108                           ;main.c: 250:                     tecla = tc_tecla(1000);
  3109  0008EC  0E03               	movlw	3
  3110  0008EE  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3111  0008F0  0EE8               	movlw	232
  3112  0008F2  6E06               	movwf	tc_tecla@timeout^0,c
  3113  0008F4  EC8A  F009         	call	_tc_tecla	;wreg free
  3114  0008F8  6E67               	movwf	mensagem@tecla^0,c
  3115  0008FA                     
  3116                           ;main.c: 251:                     tempo++;
  3117  0008FA  2A64               	incf	mensagem@tempo^0,f,c
  3118  0008FC                     
  3119                           ;main.c: 252:                     if(tecla == 5){
  3120  0008FC  0E05               	movlw	5
  3121  0008FE  1867               	xorwf	mensagem@tecla^0,w,c
  3122  000900  A4D8               	btfss	status,2,c
  3123  000902  EF85  F004         	goto	u1721
  3124  000906  EF87  F004         	goto	u1720
  3125  00090A                     u1721:
  3126  00090A  EF95  F004         	goto	l2986
  3127  00090E                     u1720:
  3128  00090E                     
  3129                           ;main.c: 253:                         letra++;
  3130  00090E  2A68               	incf	mensagem@letra^0,f,c
  3131  000910                     
  3132                           ;main.c: 254:                         if(letra == 29){ letra = 22; }
  3133  000910  0E1D               	movlw	29
  3134  000912  1868               	xorwf	mensagem@letra^0,w,c
  3135  000914  A4D8               	btfss	status,2,c
  3136  000916  EF8F  F004         	goto	u1731
  3137  00091A  EF91  F004         	goto	u1730
  3138  00091E                     u1731:
  3139  00091E  EF93  F004         	goto	l238
  3140  000922                     u1730:
  3141  000922  0E16               	movlw	22
  3142  000924  6E68               	movwf	mensagem@letra^0,c
  3143  000926                     l238:
  3144                           
  3145                           ;main.c: 255:                         tempo = 0;
  3146  000926  0E00               	movlw	0
  3147  000928  6E64               	movwf	mensagem@tempo^0,c
  3148  00092A                     l2986:
  3149                           
  3150                           ;main.c: 257:                     if(tempo>=3){
  3151  00092A  0E02               	movlw	2
  3152  00092C  6464               	cpfsgt	mensagem@tempo^0,c
  3153  00092E  EF9B  F004         	goto	u1741
  3154  000932  EF9D  F004         	goto	u1740
  3155  000936                     u1741:
  3156  000936  EF68  F004         	goto	l2970
  3157  00093A                     u1740:
  3158  00093A  EFA9  F003         	goto	l2878
  3159  00093E                     l2996:
  3160                           
  3161                           ;main.c: 266:                 letra = 29;
  3162  00093E  0E1D               	movlw	29
  3163  000940  6E68               	movwf	mensagem@letra^0,c
  3164  000942                     l2998:
  3165                           
  3166                           ;main.c: 268:                     lcd_dat(listaLetras[letra]);
  3167  000942  0E00               	movlw	low _listaLetras
  3168  000944  2468               	addwf	mensagem@letra^0,w,c
  3169  000946  6ED9               	movwf	fsr2l,c
  3170  000948  6ADA               	clrf	fsr2h,c
  3171  00094A  0E01               	movlw	high _listaLetras
  3172  00094C  22DA               	addwfc	fsr2h,f,c
  3173  00094E  50DF               	movf	indf2,w,c
  3174  000950  EC05  F010         	call	_lcd_dat
  3175  000954                     
  3176                           ;main.c: 269:                     lcd_pos(linha, coluna);
  3177  000954  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3178  000958  5063               	movf	mensagem@linha^0,w,c
  3179  00095A  ECCE  F00D         	call	_lcd_pos
  3180  00095E                     
  3181                           ;main.c: 270:                     tecla = tc_tecla(1000);
  3182  00095E  0E03               	movlw	3
  3183  000960  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3184  000962  0EE8               	movlw	232
  3185  000964  6E06               	movwf	tc_tecla@timeout^0,c
  3186  000966  EC8A  F009         	call	_tc_tecla	;wreg free
  3187  00096A  6E67               	movwf	mensagem@tecla^0,c
  3188  00096C                     
  3189                           ;main.c: 271:                     tempo++;
  3190  00096C  2A64               	incf	mensagem@tempo^0,f,c
  3191  00096E                     
  3192                           ;main.c: 272:                     if(tecla == 6){
  3193  00096E  0E06               	movlw	6
  3194  000970  1867               	xorwf	mensagem@tecla^0,w,c
  3195  000972  A4D8               	btfss	status,2,c
  3196  000974  EFBE  F004         	goto	u1751
  3197  000978  EFC0  F004         	goto	u1750
  3198  00097C                     u1751:
  3199  00097C  EFCE  F004         	goto	l3014
  3200  000980                     u1750:
  3201  000980                     
  3202                           ;main.c: 273:                         letra++;
  3203  000980  2A68               	incf	mensagem@letra^0,f,c
  3204  000982                     
  3205                           ;main.c: 274:                         if(letra == 36){ letra = 29; }
  3206  000982  0E24               	movlw	36
  3207  000984  1868               	xorwf	mensagem@letra^0,w,c
  3208  000986  A4D8               	btfss	status,2,c
  3209  000988  EFC8  F004         	goto	u1761
  3210  00098C  EFCA  F004         	goto	u1760
  3211  000990                     u1761:
  3212  000990  EFCC  F004         	goto	l244
  3213  000994                     u1760:
  3214  000994  0E1D               	movlw	29
  3215  000996  6E68               	movwf	mensagem@letra^0,c
  3216  000998                     l244:
  3217                           
  3218                           ;main.c: 275:                         tempo = 0;
  3219  000998  0E00               	movlw	0
  3220  00099A  6E64               	movwf	mensagem@tempo^0,c
  3221  00099C                     l3014:
  3222                           
  3223                           ;main.c: 277:                     if(tempo>=3){
  3224  00099C  0E02               	movlw	2
  3225  00099E  6464               	cpfsgt	mensagem@tempo^0,c
  3226  0009A0  EFD4  F004         	goto	u1771
  3227  0009A4  EFD6  F004         	goto	u1770
  3228  0009A8                     u1771:
  3229  0009A8  EFA1  F004         	goto	l2998
  3230  0009AC                     u1770:
  3231  0009AC  EFA9  F003         	goto	l2878
  3232  0009B0                     l3024:
  3233                           
  3234                           ;main.c: 286:                 letra = 36;
  3235  0009B0  0E24               	movlw	36
  3236  0009B2  6E68               	movwf	mensagem@letra^0,c
  3237  0009B4                     l3026:
  3238                           
  3239                           ;main.c: 288:                     lcd_dat(listaLetras[letra]);
  3240  0009B4  0E00               	movlw	low _listaLetras
  3241  0009B6  2468               	addwf	mensagem@letra^0,w,c
  3242  0009B8  6ED9               	movwf	fsr2l,c
  3243  0009BA  6ADA               	clrf	fsr2h,c
  3244  0009BC  0E01               	movlw	high _listaLetras
  3245  0009BE  22DA               	addwfc	fsr2h,f,c
  3246  0009C0  50DF               	movf	indf2,w,c
  3247  0009C2  EC05  F010         	call	_lcd_dat
  3248  0009C6                     
  3249                           ;main.c: 289:                     lcd_pos(linha, coluna);
  3250  0009C6  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3251  0009CA  5063               	movf	mensagem@linha^0,w,c
  3252  0009CC  ECCE  F00D         	call	_lcd_pos
  3253  0009D0                     
  3254                           ;main.c: 290:                     tecla = tc_tecla(1000);
  3255  0009D0  0E03               	movlw	3
  3256  0009D2  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3257  0009D4  0EE8               	movlw	232
  3258  0009D6  6E06               	movwf	tc_tecla@timeout^0,c
  3259  0009D8  EC8A  F009         	call	_tc_tecla	;wreg free
  3260  0009DC  6E67               	movwf	mensagem@tecla^0,c
  3261  0009DE                     
  3262                           ;main.c: 291:                     tempo++;
  3263  0009DE  2A64               	incf	mensagem@tempo^0,f,c
  3264  0009E0                     
  3265                           ;main.c: 292:                     if(tecla == 7){
  3266  0009E0  0E07               	movlw	7
  3267  0009E2  1867               	xorwf	mensagem@tecla^0,w,c
  3268  0009E4  A4D8               	btfss	status,2,c
  3269  0009E6  EFF7  F004         	goto	u1781
  3270  0009EA  EFF9  F004         	goto	u1780
  3271  0009EE                     u1781:
  3272  0009EE  EF07  F005         	goto	l3042
  3273  0009F2                     u1780:
  3274  0009F2                     
  3275                           ;main.c: 293:                         letra++;
  3276  0009F2  2A68               	incf	mensagem@letra^0,f,c
  3277  0009F4                     
  3278                           ;main.c: 294:                         if(letra == 45){ letra = 36; }
  3279  0009F4  0E2D               	movlw	45
  3280  0009F6  1868               	xorwf	mensagem@letra^0,w,c
  3281  0009F8  A4D8               	btfss	status,2,c
  3282  0009FA  EF01  F005         	goto	u1791
  3283  0009FE  EF03  F005         	goto	u1790
  3284  000A02                     u1791:
  3285  000A02  EF05  F005         	goto	l250
  3286  000A06                     u1790:
  3287  000A06  0E24               	movlw	36
  3288  000A08  6E68               	movwf	mensagem@letra^0,c
  3289  000A0A                     l250:
  3290                           
  3291                           ;main.c: 295:                         tempo = 0;
  3292  000A0A  0E00               	movlw	0
  3293  000A0C  6E64               	movwf	mensagem@tempo^0,c
  3294  000A0E                     l3042:
  3295                           
  3296                           ;main.c: 297:                     if(tempo>=3){
  3297  000A0E  0E02               	movlw	2
  3298  000A10  6464               	cpfsgt	mensagem@tempo^0,c
  3299  000A12  EF0D  F005         	goto	u1801
  3300  000A16  EF0F  F005         	goto	u1800
  3301  000A1A                     u1801:
  3302  000A1A  EFDA  F004         	goto	l3026
  3303  000A1E                     u1800:
  3304  000A1E  EFA9  F003         	goto	l2878
  3305  000A22                     l3052:
  3306                           
  3307                           ;main.c: 306:                 letra = 45;
  3308  000A22  0E2D               	movlw	45
  3309  000A24  6E68               	movwf	mensagem@letra^0,c
  3310  000A26                     l3054:
  3311                           
  3312                           ;main.c: 308:                     lcd_dat(listaLetras[letra]);
  3313  000A26  0E00               	movlw	low _listaLetras
  3314  000A28  2468               	addwf	mensagem@letra^0,w,c
  3315  000A2A  6ED9               	movwf	fsr2l,c
  3316  000A2C  6ADA               	clrf	fsr2h,c
  3317  000A2E  0E01               	movlw	high _listaLetras
  3318  000A30  22DA               	addwfc	fsr2h,f,c
  3319  000A32  50DF               	movf	indf2,w,c
  3320  000A34  EC05  F010         	call	_lcd_dat
  3321  000A38                     
  3322                           ;main.c: 309:                     lcd_pos(linha, coluna);
  3323  000A38  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3324  000A3C  5063               	movf	mensagem@linha^0,w,c
  3325  000A3E  ECCE  F00D         	call	_lcd_pos
  3326  000A42                     
  3327                           ;main.c: 310:                     tecla = tc_tecla(1000);
  3328  000A42  0E03               	movlw	3
  3329  000A44  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3330  000A46  0EE8               	movlw	232
  3331  000A48  6E06               	movwf	tc_tecla@timeout^0,c
  3332  000A4A  EC8A  F009         	call	_tc_tecla	;wreg free
  3333  000A4E  6E67               	movwf	mensagem@tecla^0,c
  3334  000A50                     
  3335                           ;main.c: 311:                     tempo++;
  3336  000A50  2A64               	incf	mensagem@tempo^0,f,c
  3337  000A52                     
  3338                           ;main.c: 312:                     if(tecla == 8){
  3339  000A52  0E08               	movlw	8
  3340  000A54  1867               	xorwf	mensagem@tecla^0,w,c
  3341  000A56  A4D8               	btfss	status,2,c
  3342  000A58  EF30  F005         	goto	u1811
  3343  000A5C  EF32  F005         	goto	u1810
  3344  000A60                     u1811:
  3345  000A60  EF40  F005         	goto	l3070
  3346  000A64                     u1810:
  3347  000A64                     
  3348                           ;main.c: 313:                         letra++;
  3349  000A64  2A68               	incf	mensagem@letra^0,f,c
  3350  000A66                     
  3351                           ;main.c: 314:                         if(letra == 52){ letra = 45; }
  3352  000A66  0E34               	movlw	52
  3353  000A68  1868               	xorwf	mensagem@letra^0,w,c
  3354  000A6A  A4D8               	btfss	status,2,c
  3355  000A6C  EF3A  F005         	goto	u1821
  3356  000A70  EF3C  F005         	goto	u1820
  3357  000A74                     u1821:
  3358  000A74  EF3E  F005         	goto	l256
  3359  000A78                     u1820:
  3360  000A78  0E2D               	movlw	45
  3361  000A7A  6E68               	movwf	mensagem@letra^0,c
  3362  000A7C                     l256:
  3363                           
  3364                           ;main.c: 315:                         tempo = 0;
  3365  000A7C  0E00               	movlw	0
  3366  000A7E  6E64               	movwf	mensagem@tempo^0,c
  3367  000A80                     l3070:
  3368                           
  3369                           ;main.c: 317:                     if(tempo>=3){
  3370  000A80  0E02               	movlw	2
  3371  000A82  6464               	cpfsgt	mensagem@tempo^0,c
  3372  000A84  EF46  F005         	goto	u1831
  3373  000A88  EF48  F005         	goto	u1830
  3374  000A8C                     u1831:
  3375  000A8C  EF13  F005         	goto	l3054
  3376  000A90                     u1830:
  3377  000A90  EFA9  F003         	goto	l2878
  3378  000A94                     l3080:
  3379                           
  3380                           ;main.c: 326:                 letra = 52;
  3381  000A94  0E34               	movlw	52
  3382  000A96  6E68               	movwf	mensagem@letra^0,c
  3383  000A98                     l3082:
  3384                           
  3385                           ;main.c: 328:                     lcd_dat(listaLetras[letra]);
  3386  000A98  0E00               	movlw	low _listaLetras
  3387  000A9A  2468               	addwf	mensagem@letra^0,w,c
  3388  000A9C  6ED9               	movwf	fsr2l,c
  3389  000A9E  6ADA               	clrf	fsr2h,c
  3390  000AA0  0E01               	movlw	high _listaLetras
  3391  000AA2  22DA               	addwfc	fsr2h,f,c
  3392  000AA4  50DF               	movf	indf2,w,c
  3393  000AA6  EC05  F010         	call	_lcd_dat
  3394  000AAA                     
  3395                           ;main.c: 329:                     lcd_pos(linha, coluna);
  3396  000AAA  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3397  000AAE  5063               	movf	mensagem@linha^0,w,c
  3398  000AB0  ECCE  F00D         	call	_lcd_pos
  3399  000AB4                     
  3400                           ;main.c: 330:                     tecla = tc_tecla(1000);
  3401  000AB4  0E03               	movlw	3
  3402  000AB6  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3403  000AB8  0EE8               	movlw	232
  3404  000ABA  6E06               	movwf	tc_tecla@timeout^0,c
  3405  000ABC  EC8A  F009         	call	_tc_tecla	;wreg free
  3406  000AC0  6E67               	movwf	mensagem@tecla^0,c
  3407  000AC2                     
  3408                           ;main.c: 331:                     tempo++;
  3409  000AC2  2A64               	incf	mensagem@tempo^0,f,c
  3410  000AC4                     
  3411                           ;main.c: 332:                     if(tecla == 9){
  3412  000AC4  0E09               	movlw	9
  3413  000AC6  1867               	xorwf	mensagem@tecla^0,w,c
  3414  000AC8  A4D8               	btfss	status,2,c
  3415  000ACA  EF69  F005         	goto	u1841
  3416  000ACE  EF6B  F005         	goto	u1840
  3417  000AD2                     u1841:
  3418  000AD2  EF79  F005         	goto	l3098
  3419  000AD6                     u1840:
  3420  000AD6                     
  3421                           ;main.c: 333:                         letra++;
  3422  000AD6  2A68               	incf	mensagem@letra^0,f,c
  3423  000AD8                     
  3424                           ;main.c: 334:                         if(letra == 61){ letra = 52; }
  3425  000AD8  0E3D               	movlw	61
  3426  000ADA  1868               	xorwf	mensagem@letra^0,w,c
  3427  000ADC  A4D8               	btfss	status,2,c
  3428  000ADE  EF73  F005         	goto	u1851
  3429  000AE2  EF75  F005         	goto	u1850
  3430  000AE6                     u1851:
  3431  000AE6  EF77  F005         	goto	l262
  3432  000AEA                     u1850:
  3433  000AEA  0E34               	movlw	52
  3434  000AEC  6E68               	movwf	mensagem@letra^0,c
  3435  000AEE                     l262:
  3436                           
  3437                           ;main.c: 335:                         tempo = 0;
  3438  000AEE  0E00               	movlw	0
  3439  000AF0  6E64               	movwf	mensagem@tempo^0,c
  3440  000AF2                     l3098:
  3441                           
  3442                           ;main.c: 337:                     if(tempo>=3){
  3443  000AF2  0E02               	movlw	2
  3444  000AF4  6464               	cpfsgt	mensagem@tempo^0,c
  3445  000AF6  EF7F  F005         	goto	u1861
  3446  000AFA  EF81  F005         	goto	u1860
  3447  000AFE                     u1861:
  3448  000AFE  EF4C  F005         	goto	l3082
  3449  000B02                     u1860:
  3450  000B02  EFA9  F003         	goto	l2878
  3451  000B06                     l3108:
  3452                           
  3453                           ;main.c: 346:                 letra = 61;
  3454  000B06  0E3D               	movlw	61
  3455  000B08  6E68               	movwf	mensagem@letra^0,c
  3456  000B0A                     l3110:
  3457                           
  3458                           ;main.c: 348:                     lcd_dat(listaLetras[letra]);
  3459  000B0A  0E00               	movlw	low _listaLetras
  3460  000B0C  2468               	addwf	mensagem@letra^0,w,c
  3461  000B0E  6ED9               	movwf	fsr2l,c
  3462  000B10  6ADA               	clrf	fsr2h,c
  3463  000B12  0E01               	movlw	high _listaLetras
  3464  000B14  22DA               	addwfc	fsr2h,f,c
  3465  000B16  50DF               	movf	indf2,w,c
  3466  000B18  EC05  F010         	call	_lcd_dat
  3467  000B1C                     
  3468                           ;main.c: 349:                     lcd_pos(linha, coluna);
  3469  000B1C  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3470  000B20  5063               	movf	mensagem@linha^0,w,c
  3471  000B22  ECCE  F00D         	call	_lcd_pos
  3472  000B26                     
  3473                           ;main.c: 350:                     tecla = tc_tecla(1000);
  3474  000B26  0E03               	movlw	3
  3475  000B28  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3476  000B2A  0EE8               	movlw	232
  3477  000B2C  6E06               	movwf	tc_tecla@timeout^0,c
  3478  000B2E  EC8A  F009         	call	_tc_tecla	;wreg free
  3479  000B32  6E67               	movwf	mensagem@tecla^0,c
  3480  000B34                     
  3481                           ;main.c: 351:                     tempo++;
  3482  000B34  2A64               	incf	mensagem@tempo^0,f,c
  3483  000B36                     
  3484                           ;main.c: 352:                     if(tecla == 0){
  3485  000B36  5067               	movf	mensagem@tecla^0,w,c
  3486  000B38  A4D8               	btfss	status,2,c
  3487  000B3A  EFA1  F005         	goto	u1871
  3488  000B3E  EFA3  F005         	goto	u1870
  3489  000B42                     u1871:
  3490  000B42  EFB1  F005         	goto	l3126
  3491  000B46                     u1870:
  3492  000B46                     
  3493                           ;main.c: 353:                         letra++;
  3494  000B46  2A68               	incf	mensagem@letra^0,f,c
  3495  000B48                     
  3496                           ;main.c: 354:                         if(letra == 65){ letra = 61; }
  3497  000B48  0E41               	movlw	65
  3498  000B4A  1868               	xorwf	mensagem@letra^0,w,c
  3499  000B4C  A4D8               	btfss	status,2,c
  3500  000B4E  EFAB  F005         	goto	u1881
  3501  000B52  EFAD  F005         	goto	u1880
  3502  000B56                     u1881:
  3503  000B56  EFAF  F005         	goto	l268
  3504  000B5A                     u1880:
  3505  000B5A  0E3D               	movlw	61
  3506  000B5C  6E68               	movwf	mensagem@letra^0,c
  3507  000B5E                     l268:
  3508                           
  3509                           ;main.c: 355:                         tempo = 0;
  3510  000B5E  0E00               	movlw	0
  3511  000B60  6E64               	movwf	mensagem@tempo^0,c
  3512  000B62                     l3126:
  3513                           
  3514                           ;main.c: 357:                     if(tempo>=3){
  3515  000B62  0E02               	movlw	2
  3516  000B64  6464               	cpfsgt	mensagem@tempo^0,c
  3517  000B66  EFB7  F005         	goto	u1891
  3518  000B6A  EFB9  F005         	goto	u1890
  3519  000B6E                     u1891:
  3520  000B6E  EF85  F005         	goto	l3110
  3521  000B72                     u1890:
  3522  000B72  EFA9  F003         	goto	l2878
  3523  000B76                     l3138:
  3524  000B76  5067               	movf	mensagem@tecla^0,w,c
  3525  000B78  6E11               	movwf	??_mensagem^0,c
  3526  000B7A  6A12               	clrf	(??_mensagem+1)^0,c
  3527                           
  3528                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3529                           ; Switch size 1, requested type "simple"
  3530                           ; Number of cases is 1, Range of values is 0 to 0
  3531                           ; switch strategies available:
  3532                           ; Name         Instructions Cycles
  3533                           ; simple_byte            4     3 (average)
  3534                           ;	Chosen strategy is simple_byte
  3535  000B7C  5012               	movf	(??_mensagem+1)^0,w,c
  3536  000B7E  0A00               	xorlw	0	; case 0
  3537  000B80  B4D8               	btfsc	status,2,c
  3538  000B82  EFC5  F005         	goto	l3676
  3539  000B86  EFF0  F005         	goto	l3140
  3540  000B8A                     l3676:
  3541                           
  3542                           ; Switch size 1, requested type "simple"
  3543                           ; Number of cases is 10, Range of values is 0 to 9
  3544                           ; switch strategies available:
  3545                           ; Name         Instructions Cycles
  3546                           ; simple_byte           31    16 (average)
  3547                           ;	Chosen strategy is simple_byte
  3548  000B8A  5011               	movf	??_mensagem^0,w,c
  3549  000B8C  0A00               	xorlw	0	; case 0
  3550  000B8E  B4D8               	btfsc	status,2,c
  3551  000B90  EF83  F005         	goto	l3108
  3552  000B94  0A01               	xorlw	1	; case 1
  3553  000B96  B4D8               	btfsc	status,2,c
  3554  000B98  EF74  F003         	goto	l2856
  3555  000B9C  0A03               	xorlw	3	; case 2
  3556  000B9E  B4D8               	btfsc	status,2,c
  3557  000BA0  EFBB  F003         	goto	l2884
  3558  000BA4  0A01               	xorlw	1	; case 3
  3559  000BA6  B4D8               	btfsc	status,2,c
  3560  000BA8  EFF4  F003         	goto	l2912
  3561  000BAC  0A07               	xorlw	7	; case 4
  3562  000BAE  B4D8               	btfsc	status,2,c
  3563  000BB0  EF2D  F004         	goto	l2940
  3564  000BB4  0A01               	xorlw	1	; case 5
  3565  000BB6  B4D8               	btfsc	status,2,c
  3566  000BB8  EF66  F004         	goto	l2968
  3567  000BBC  0A03               	xorlw	3	; case 6
  3568  000BBE  B4D8               	btfsc	status,2,c
  3569  000BC0  EF9F  F004         	goto	l2996
  3570  000BC4  0A01               	xorlw	1	; case 7
  3571  000BC6  B4D8               	btfsc	status,2,c
  3572  000BC8  EFD8  F004         	goto	l3024
  3573  000BCC  0A0F               	xorlw	15	; case 8
  3574  000BCE  B4D8               	btfsc	status,2,c
  3575  000BD0  EF11  F005         	goto	l3052
  3576  000BD4  0A01               	xorlw	1	; case 9
  3577  000BD6  B4D8               	btfsc	status,2,c
  3578  000BD8  EF4A  F005         	goto	l3080
  3579  000BDC  EFF0  F005         	goto	l3140
  3580  000BE0                     l3140:
  3581                           
  3582                           ;main.c: 368:         if(tecla == 12){
  3583  000BE0  0E0C               	movlw	12
  3584  000BE2  1867               	xorwf	mensagem@tecla^0,w,c
  3585  000BE4  A4D8               	btfss	status,2,c
  3586  000BE6  EFF7  F005         	goto	u1901
  3587  000BEA  EFF9  F005         	goto	u1900
  3588  000BEE                     u1901:
  3589  000BEE  EFFB  F005         	goto	l3144
  3590  000BF2                     u1900:
  3591  000BF2                     
  3592                           ;main.c: 370:             break;
  3593  000BF2  EF41  F006         	goto	l3168
  3594  000BF6                     l3144:
  3595                           
  3596                           ;main.c: 374:         if(tecla == 10){
  3597  000BF6  0E0A               	movlw	10
  3598  000BF8  1867               	xorwf	mensagem@tecla^0,w,c
  3599  000BFA  A4D8               	btfss	status,2,c
  3600  000BFC  EF02  F006         	goto	u1911
  3601  000C00  EF04  F006         	goto	u1910
  3602  000C04                     u1911:
  3603  000C04  EF2E  F006         	goto	l3160
  3604  000C08                     u1910:
  3605  000C08                     
  3606                           ;main.c: 375:             if(linha>0){
  3607  000C08  5063               	movf	mensagem@linha^0,w,c
  3608  000C0A  B4D8               	btfsc	status,2,c
  3609  000C0C  EF0A  F006         	goto	u1921
  3610  000C10  EF0C  F006         	goto	u1920
  3611  000C14                     u1921:
  3612  000C14  EF17  F006         	goto	l3154
  3613  000C18                     u1920:
  3614  000C18                     
  3615                           ;main.c: 376:                 if(coluna == 0){
  3616  000C18  5065               	movf	mensagem@coluna^0,w,c
  3617  000C1A  A4D8               	btfss	status,2,c
  3618  000C1C  EF12  F006         	goto	u1931
  3619  000C20  EF14  F006         	goto	u1930
  3620  000C24                     u1931:
  3621  000C24  EF17  F006         	goto	l3154
  3622  000C28                     u1930:
  3623  000C28                     
  3624                           ;main.c: 377:                     coluna = 16;
  3625  000C28  0E10               	movlw	16
  3626  000C2A  6E65               	movwf	mensagem@coluna^0,c
  3627  000C2C                     
  3628                           ;main.c: 378:                     linha--;
  3629  000C2C  0663               	decf	mensagem@linha^0,f,c
  3630  000C2E                     l3154:
  3631                           
  3632                           ;main.c: 382:             if(coluna > 0){
  3633  000C2E  5065               	movf	mensagem@coluna^0,w,c
  3634  000C30  B4D8               	btfsc	status,2,c
  3635  000C32  EF1D  F006         	goto	u1941
  3636  000C36  EF1F  F006         	goto	u1940
  3637  000C3A                     u1941:
  3638  000C3A  EF2E  F006         	goto	l3160
  3639  000C3E                     u1940:
  3640  000C3E                     
  3641                           ;main.c: 383:                 lcd_pos(linha,--coluna);
  3642  000C3E  0665               	decf	mensagem@coluna^0,f,c
  3643  000C40  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3644  000C44  5063               	movf	mensagem@linha^0,w,c
  3645  000C46  ECCE  F00D         	call	_lcd_pos
  3646                           
  3647                           ;main.c: 384:                 lcd_dat(' ');
  3648  000C4A  0E20               	movlw	32
  3649  000C4C  EC05  F010         	call	_lcd_dat
  3650                           
  3651                           ;main.c: 385:                 lcd_pos(linha,coluna);
  3652  000C50  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3653  000C54  5063               	movf	mensagem@linha^0,w,c
  3654  000C56  ECCE  F00D         	call	_lcd_pos
  3655  000C5A                     
  3656                           ;main.c: 386:                 contMSG--;
  3657  000C5A  0662               	decf	mensagem@contMSG^0,f,c
  3658  000C5C                     l3160:
  3659                           
  3660                           ;main.c: 391:         if(coluna == 16){
  3661  000C5C  0E10               	movlw	16
  3662  000C5E  1865               	xorwf	mensagem@coluna^0,w,c
  3663  000C60  A4D8               	btfss	status,2,c
  3664  000C62  EF35  F006         	goto	u1951
  3665  000C66  EF37  F006         	goto	u1950
  3666  000C6A                     u1951:
  3667  000C6A  EF3A  F006         	goto	l3166
  3668  000C6E                     u1950:
  3669  000C6E                     
  3670                           ;main.c: 392:             linha++;
  3671  000C6E  2A63               	incf	mensagem@linha^0,f,c
  3672  000C70                     
  3673                           ;main.c: 393:             coluna = 0;
  3674  000C70  0E00               	movlw	0
  3675  000C72  6E65               	movwf	mensagem@coluna^0,c
  3676  000C74                     l3166:
  3677                           
  3678                           ;main.c: 395:         lcd_pos(linha,coluna);
  3679  000C74  C065  F006         	movff	mensagem@coluna,lcd_pos@col
  3680  000C78  5063               	movf	mensagem@linha^0,w,c
  3681  000C7A  ECCE  F00D         	call	_lcd_pos
  3682                           
  3683                           ;main.c: 396:     }
  3684  000C7E  EF69  F003         	goto	l2852
  3685  000C82                     l3168:
  3686  000C82                     
  3687                           ;main.c: 398:         lcd_cmd(0x01);
  3688  000C82  0E01               	movlw	1
  3689  000C84  EC1A  F010         	call	_lcd_cmd
  3690                           
  3691                           ;main.c: 399:         lcd_pos(1,0);
  3692  000C88  0E00               	movlw	0
  3693  000C8A  6E06               	movwf	lcd_pos@col^0,c
  3694  000C8C  0E01               	movlw	1
  3695  000C8E  ECCE  F00D         	call	_lcd_pos
  3696  000C92                     
  3697                           ;main.c: 400:         lcd_str("Enviar para:");
  3698  000C92  0E57               	movlw	low STR_5
  3699  000C94  6E0A               	movwf	lcd_str@str^0,c
  3700  000C96  0E06               	movlw	high STR_5
  3701  000C98  6E0B               	movwf	(lcd_str@str+1)^0,c
  3702  000C9A  ECD3  F00C         	call	_lcd_str	;wreg free
  3703  000C9E                     
  3704                           ;main.c: 401:         lcd_pos(2,0);
  3705  000C9E  0E00               	movlw	0
  3706  000CA0  6E06               	movwf	lcd_pos@col^0,c
  3707  000CA2  0E02               	movlw	2
  3708  000CA4  ECCE  F00D         	call	_lcd_pos
  3709  000CA8                     l3176:
  3710                           
  3711                           ;main.c: 404:             tecla = tc_tecla(0);
  3712  000CA8  0E00               	movlw	0
  3713  000CAA  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  3714  000CAC  0E00               	movlw	0
  3715  000CAE  6E06               	movwf	tc_tecla@timeout^0,c
  3716  000CB0  EC8A  F009         	call	_tc_tecla	;wreg free
  3717  000CB4  6E67               	movwf	mensagem@tecla^0,c
  3718                           
  3719                           ;main.c: 405:             switch (tecla){
  3720  000CB6  EF28  F007         	goto	l3242
  3721  000CBA                     l3178:
  3722                           
  3723                           ;main.c: 407:                     numero[contN] = tecla+48;
  3724  000CBA  0E55               	movlw	low mensagem@numero
  3725  000CBC  2466               	addwf	mensagem@contN^0,w,c
  3726  000CBE  6ED9               	movwf	fsr2l,c
  3727  000CC0  6ADA               	clrf	fsr2h,c
  3728  000CC2  0E00               	movlw	high mensagem@numero
  3729  000CC4  22DA               	addwfc	fsr2h,f,c
  3730  000CC6  5067               	movf	mensagem@tecla^0,w,c
  3731  000CC8  0F30               	addlw	48
  3732  000CCA  6EDF               	movwf	indf2,c
  3733  000CCC                     
  3734                           ;main.c: 408:                     lcd_dat(numero[contN]);
  3735  000CCC  0E55               	movlw	low mensagem@numero
  3736  000CCE  2466               	addwf	mensagem@contN^0,w,c
  3737  000CD0  6ED9               	movwf	fsr2l,c
  3738  000CD2  6ADA               	clrf	fsr2h,c
  3739  000CD4  0E00               	movlw	high mensagem@numero
  3740  000CD6  22DA               	addwfc	fsr2h,f,c
  3741  000CD8  50DF               	movf	indf2,w,c
  3742  000CDA  EC05  F010         	call	_lcd_dat
  3743  000CDE                     l3182:
  3744                           
  3745                           ;main.c: 409:                     contN++;
  3746  000CDE  2A66               	incf	mensagem@contN^0,f,c
  3747                           
  3748                           ;main.c: 410:                     break;
  3749  000CE0  EF5D  F007         	goto	l3244
  3750  000CE4                     l3184:
  3751                           
  3752                           ;main.c: 412:                     numero[contN] = tecla+48;
  3753  000CE4  0E55               	movlw	low mensagem@numero
  3754  000CE6  2466               	addwf	mensagem@contN^0,w,c
  3755  000CE8  6ED9               	movwf	fsr2l,c
  3756  000CEA  6ADA               	clrf	fsr2h,c
  3757  000CEC  0E00               	movlw	high mensagem@numero
  3758  000CEE  22DA               	addwfc	fsr2h,f,c
  3759  000CF0  5067               	movf	mensagem@tecla^0,w,c
  3760  000CF2  0F30               	addlw	48
  3761  000CF4  6EDF               	movwf	indf2,c
  3762  000CF6                     
  3763                           ;main.c: 413:                     lcd_dat(numero[contN]);
  3764  000CF6  0E55               	movlw	low mensagem@numero
  3765  000CF8  2466               	addwf	mensagem@contN^0,w,c
  3766  000CFA  6ED9               	movwf	fsr2l,c
  3767  000CFC  6ADA               	clrf	fsr2h,c
  3768  000CFE  0E00               	movlw	high mensagem@numero
  3769  000D00  22DA               	addwfc	fsr2h,f,c
  3770  000D02  50DF               	movf	indf2,w,c
  3771  000D04  EC05  F010         	call	_lcd_dat
  3772  000D08  EF6F  F006         	goto	l3182
  3773  000D0C                     l3190:
  3774                           
  3775                           ;main.c: 417:                     numero[contN] = tecla+48;
  3776  000D0C  0E55               	movlw	low mensagem@numero
  3777  000D0E  2466               	addwf	mensagem@contN^0,w,c
  3778  000D10  6ED9               	movwf	fsr2l,c
  3779  000D12  6ADA               	clrf	fsr2h,c
  3780  000D14  0E00               	movlw	high mensagem@numero
  3781  000D16  22DA               	addwfc	fsr2h,f,c
  3782  000D18  5067               	movf	mensagem@tecla^0,w,c
  3783  000D1A  0F30               	addlw	48
  3784  000D1C  6EDF               	movwf	indf2,c
  3785  000D1E                     
  3786                           ;main.c: 418:                     lcd_dat(numero[contN]);
  3787  000D1E  0E55               	movlw	low mensagem@numero
  3788  000D20  2466               	addwf	mensagem@contN^0,w,c
  3789  000D22  6ED9               	movwf	fsr2l,c
  3790  000D24  6ADA               	clrf	fsr2h,c
  3791  000D26  0E00               	movlw	high mensagem@numero
  3792  000D28  22DA               	addwfc	fsr2h,f,c
  3793  000D2A  50DF               	movf	indf2,w,c
  3794  000D2C  EC05  F010         	call	_lcd_dat
  3795  000D30  EF6F  F006         	goto	l3182
  3796  000D34                     l3196:
  3797                           
  3798                           ;main.c: 422:                     numero[contN] = tecla+48;
  3799  000D34  0E55               	movlw	low mensagem@numero
  3800  000D36  2466               	addwf	mensagem@contN^0,w,c
  3801  000D38  6ED9               	movwf	fsr2l,c
  3802  000D3A  6ADA               	clrf	fsr2h,c
  3803  000D3C  0E00               	movlw	high mensagem@numero
  3804  000D3E  22DA               	addwfc	fsr2h,f,c
  3805  000D40  5067               	movf	mensagem@tecla^0,w,c
  3806  000D42  0F30               	addlw	48
  3807  000D44  6EDF               	movwf	indf2,c
  3808  000D46                     
  3809                           ;main.c: 423:                     lcd_dat(numero[contN]);
  3810  000D46  0E55               	movlw	low mensagem@numero
  3811  000D48  2466               	addwf	mensagem@contN^0,w,c
  3812  000D4A  6ED9               	movwf	fsr2l,c
  3813  000D4C  6ADA               	clrf	fsr2h,c
  3814  000D4E  0E00               	movlw	high mensagem@numero
  3815  000D50  22DA               	addwfc	fsr2h,f,c
  3816  000D52  50DF               	movf	indf2,w,c
  3817  000D54  EC05  F010         	call	_lcd_dat
  3818  000D58  EF6F  F006         	goto	l3182
  3819  000D5C                     l3202:
  3820                           
  3821                           ;main.c: 427:                     numero[contN] = tecla+48;
  3822  000D5C  0E55               	movlw	low mensagem@numero
  3823  000D5E  2466               	addwf	mensagem@contN^0,w,c
  3824  000D60  6ED9               	movwf	fsr2l,c
  3825  000D62  6ADA               	clrf	fsr2h,c
  3826  000D64  0E00               	movlw	high mensagem@numero
  3827  000D66  22DA               	addwfc	fsr2h,f,c
  3828  000D68  5067               	movf	mensagem@tecla^0,w,c
  3829  000D6A  0F30               	addlw	48
  3830  000D6C  6EDF               	movwf	indf2,c
  3831  000D6E                     
  3832                           ;main.c: 428:                     lcd_dat(numero[contN]);
  3833  000D6E  0E55               	movlw	low mensagem@numero
  3834  000D70  2466               	addwf	mensagem@contN^0,w,c
  3835  000D72  6ED9               	movwf	fsr2l,c
  3836  000D74  6ADA               	clrf	fsr2h,c
  3837  000D76  0E00               	movlw	high mensagem@numero
  3838  000D78  22DA               	addwfc	fsr2h,f,c
  3839  000D7A  50DF               	movf	indf2,w,c
  3840  000D7C  EC05  F010         	call	_lcd_dat
  3841  000D80  EF6F  F006         	goto	l3182
  3842  000D84                     l3208:
  3843                           
  3844                           ;main.c: 432:                     numero[contN] = tecla+48;
  3845  000D84  0E55               	movlw	low mensagem@numero
  3846  000D86  2466               	addwf	mensagem@contN^0,w,c
  3847  000D88  6ED9               	movwf	fsr2l,c
  3848  000D8A  6ADA               	clrf	fsr2h,c
  3849  000D8C  0E00               	movlw	high mensagem@numero
  3850  000D8E  22DA               	addwfc	fsr2h,f,c
  3851  000D90  5067               	movf	mensagem@tecla^0,w,c
  3852  000D92  0F30               	addlw	48
  3853  000D94  6EDF               	movwf	indf2,c
  3854  000D96                     
  3855                           ;main.c: 433:                     lcd_dat(numero[contN]);
  3856  000D96  0E55               	movlw	low mensagem@numero
  3857  000D98  2466               	addwf	mensagem@contN^0,w,c
  3858  000D9A  6ED9               	movwf	fsr2l,c
  3859  000D9C  6ADA               	clrf	fsr2h,c
  3860  000D9E  0E00               	movlw	high mensagem@numero
  3861  000DA0  22DA               	addwfc	fsr2h,f,c
  3862  000DA2  50DF               	movf	indf2,w,c
  3863  000DA4  EC05  F010         	call	_lcd_dat
  3864  000DA8  EF6F  F006         	goto	l3182
  3865  000DAC                     l3214:
  3866                           
  3867                           ;main.c: 437:                     numero[contN] = tecla+48;
  3868  000DAC  0E55               	movlw	low mensagem@numero
  3869  000DAE  2466               	addwf	mensagem@contN^0,w,c
  3870  000DB0  6ED9               	movwf	fsr2l,c
  3871  000DB2  6ADA               	clrf	fsr2h,c
  3872  000DB4  0E00               	movlw	high mensagem@numero
  3873  000DB6  22DA               	addwfc	fsr2h,f,c
  3874  000DB8  5067               	movf	mensagem@tecla^0,w,c
  3875  000DBA  0F30               	addlw	48
  3876  000DBC  6EDF               	movwf	indf2,c
  3877  000DBE                     
  3878                           ;main.c: 438:                     lcd_dat(numero[contN]);
  3879  000DBE  0E55               	movlw	low mensagem@numero
  3880  000DC0  2466               	addwf	mensagem@contN^0,w,c
  3881  000DC2  6ED9               	movwf	fsr2l,c
  3882  000DC4  6ADA               	clrf	fsr2h,c
  3883  000DC6  0E00               	movlw	high mensagem@numero
  3884  000DC8  22DA               	addwfc	fsr2h,f,c
  3885  000DCA  50DF               	movf	indf2,w,c
  3886  000DCC  EC05  F010         	call	_lcd_dat
  3887  000DD0  EF6F  F006         	goto	l3182
  3888  000DD4                     l3220:
  3889                           
  3890                           ;main.c: 442:                     numero[contN] = tecla+48;
  3891  000DD4  0E55               	movlw	low mensagem@numero
  3892  000DD6  2466               	addwf	mensagem@contN^0,w,c
  3893  000DD8  6ED9               	movwf	fsr2l,c
  3894  000DDA  6ADA               	clrf	fsr2h,c
  3895  000DDC  0E00               	movlw	high mensagem@numero
  3896  000DDE  22DA               	addwfc	fsr2h,f,c
  3897  000DE0  5067               	movf	mensagem@tecla^0,w,c
  3898  000DE2  0F30               	addlw	48
  3899  000DE4  6EDF               	movwf	indf2,c
  3900  000DE6                     
  3901                           ;main.c: 443:                     lcd_dat(numero[contN]);
  3902  000DE6  0E55               	movlw	low mensagem@numero
  3903  000DE8  2466               	addwf	mensagem@contN^0,w,c
  3904  000DEA  6ED9               	movwf	fsr2l,c
  3905  000DEC  6ADA               	clrf	fsr2h,c
  3906  000DEE  0E00               	movlw	high mensagem@numero
  3907  000DF0  22DA               	addwfc	fsr2h,f,c
  3908  000DF2  50DF               	movf	indf2,w,c
  3909  000DF4  EC05  F010         	call	_lcd_dat
  3910  000DF8                     
  3911                           ;main.c: 444:                     contN++;
  3912  000DF8  2A66               	incf	mensagem@contN^0,f,c
  3913  000DFA                     
  3914                           ;main.c: 445:                     tempo = 0;
  3915  000DFA  0E00               	movlw	0
  3916  000DFC  6E64               	movwf	mensagem@tempo^0,c
  3917                           
  3918                           ;main.c: 446:                     break;
  3919  000DFE  EF5D  F007         	goto	l3244
  3920  000E02                     l3228:
  3921                           
  3922                           ;main.c: 448:                     numero[contN] = tecla+48;
  3923  000E02  0E55               	movlw	low mensagem@numero
  3924  000E04  2466               	addwf	mensagem@contN^0,w,c
  3925  000E06  6ED9               	movwf	fsr2l,c
  3926  000E08  6ADA               	clrf	fsr2h,c
  3927  000E0A  0E00               	movlw	high mensagem@numero
  3928  000E0C  22DA               	addwfc	fsr2h,f,c
  3929  000E0E  5067               	movf	mensagem@tecla^0,w,c
  3930  000E10  0F30               	addlw	48
  3931  000E12  6EDF               	movwf	indf2,c
  3932  000E14                     
  3933                           ;main.c: 449:                     lcd_dat(numero[contN]);
  3934  000E14  0E55               	movlw	low mensagem@numero
  3935  000E16  2466               	addwf	mensagem@contN^0,w,c
  3936  000E18  6ED9               	movwf	fsr2l,c
  3937  000E1A  6ADA               	clrf	fsr2h,c
  3938  000E1C  0E00               	movlw	high mensagem@numero
  3939  000E1E  22DA               	addwfc	fsr2h,f,c
  3940  000E20  50DF               	movf	indf2,w,c
  3941  000E22  EC05  F010         	call	_lcd_dat
  3942  000E26  EF6F  F006         	goto	l3182
  3943  000E2A                     l3234:
  3944                           
  3945                           ;main.c: 453:                     numero[contN] = 48;
  3946  000E2A  0E55               	movlw	low mensagem@numero
  3947  000E2C  2466               	addwf	mensagem@contN^0,w,c
  3948  000E2E  6ED9               	movwf	fsr2l,c
  3949  000E30  6ADA               	clrf	fsr2h,c
  3950  000E32  0E00               	movlw	high mensagem@numero
  3951  000E34  22DA               	addwfc	fsr2h,f,c
  3952  000E36  0E30               	movlw	48
  3953  000E38  6EDF               	movwf	indf2,c
  3954  000E3A                     
  3955                           ;main.c: 454:                     lcd_dat(numero[contN]);
  3956  000E3A  0E55               	movlw	low mensagem@numero
  3957  000E3C  2466               	addwf	mensagem@contN^0,w,c
  3958  000E3E  6ED9               	movwf	fsr2l,c
  3959  000E40  6ADA               	clrf	fsr2h,c
  3960  000E42  0E00               	movlw	high mensagem@numero
  3961  000E44  22DA               	addwfc	fsr2h,f,c
  3962  000E46  50DF               	movf	indf2,w,c
  3963  000E48  EC05  F010         	call	_lcd_dat
  3964  000E4C  EF6F  F006         	goto	l3182
  3965  000E50                     l3242:
  3966  000E50  5067               	movf	mensagem@tecla^0,w,c
  3967  000E52  6E11               	movwf	??_mensagem^0,c
  3968  000E54  6A12               	clrf	(??_mensagem+1)^0,c
  3969                           
  3970                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3971                           ; Switch size 1, requested type "simple"
  3972                           ; Number of cases is 1, Range of values is 0 to 0
  3973                           ; switch strategies available:
  3974                           ; Name         Instructions Cycles
  3975                           ; simple_byte            4     3 (average)
  3976                           ;	Chosen strategy is simple_byte
  3977  000E56  5012               	movf	(??_mensagem+1)^0,w,c
  3978  000E58  0A00               	xorlw	0	; case 0
  3979  000E5A  B4D8               	btfsc	status,2,c
  3980  000E5C  EF32  F007         	goto	l3678
  3981  000E60  EF5D  F007         	goto	l3244
  3982  000E64                     l3678:
  3983                           
  3984                           ; Switch size 1, requested type "simple"
  3985                           ; Number of cases is 10, Range of values is 0 to 9
  3986                           ; switch strategies available:
  3987                           ; Name         Instructions Cycles
  3988                           ; simple_byte           31    16 (average)
  3989                           ;	Chosen strategy is simple_byte
  3990  000E64  5011               	movf	??_mensagem^0,w,c
  3991  000E66  0A00               	xorlw	0	; case 0
  3992  000E68  B4D8               	btfsc	status,2,c
  3993  000E6A  EF15  F007         	goto	l3234
  3994  000E6E  0A01               	xorlw	1	; case 1
  3995  000E70  B4D8               	btfsc	status,2,c
  3996  000E72  EF5D  F006         	goto	l3178
  3997  000E76  0A03               	xorlw	3	; case 2
  3998  000E78  B4D8               	btfsc	status,2,c
  3999  000E7A  EF72  F006         	goto	l3184
  4000  000E7E  0A01               	xorlw	1	; case 3
  4001  000E80  B4D8               	btfsc	status,2,c
  4002  000E82  EF86  F006         	goto	l3190
  4003  000E86  0A07               	xorlw	7	; case 4
  4004  000E88  B4D8               	btfsc	status,2,c
  4005  000E8A  EF9A  F006         	goto	l3196
  4006  000E8E  0A01               	xorlw	1	; case 5
  4007  000E90  B4D8               	btfsc	status,2,c
  4008  000E92  EFAE  F006         	goto	l3202
  4009  000E96  0A03               	xorlw	3	; case 6
  4010  000E98  B4D8               	btfsc	status,2,c
  4011  000E9A  EFC2  F006         	goto	l3208
  4012  000E9E  0A01               	xorlw	1	; case 7
  4013  000EA0  B4D8               	btfsc	status,2,c
  4014  000EA2  EFD6  F006         	goto	l3214
  4015  000EA6  0A0F               	xorlw	15	; case 8
  4016  000EA8  B4D8               	btfsc	status,2,c
  4017  000EAA  EFEA  F006         	goto	l3220
  4018  000EAE  0A01               	xorlw	1	; case 9
  4019  000EB0  B4D8               	btfsc	status,2,c
  4020  000EB2  EF01  F007         	goto	l3228
  4021  000EB6  EF5D  F007         	goto	l3244
  4022  000EBA                     l3244:
  4023                           
  4024                           ;main.c: 458:             if(tecla == 12){
  4025  000EBA  0E0C               	movlw	12
  4026  000EBC  1867               	xorwf	mensagem@tecla^0,w,c
  4027  000EBE  A4D8               	btfss	status,2,c
  4028  000EC0  EF64  F007         	goto	u1961
  4029  000EC4  EF66  F007         	goto	u1960
  4030  000EC8                     u1961:
  4031  000EC8  EF54  F006         	goto	l3176
  4032  000ECC                     u1960:
  4033  000ECC                     
  4034                           ;main.c: 462:         TRISC = 0x00;
  4035  000ECC  0E00               	movlw	0
  4036  000ECE  6E94               	movwf	148,c	;volatile
  4037                           
  4038                           ;main.c: 463:         PORTC = 0x01;
  4039  000ED0  0E01               	movlw	1
  4040  000ED2  6E82               	movwf	130,c	;volatile
  4041  000ED4                     
  4042                           ;main.c: 464:         lcd_cmd(0x01);
  4043  000ED4  0E01               	movlw	1
  4044  000ED6  EC1A  F010         	call	_lcd_cmd
  4045  000EDA                     
  4046                           ;main.c: 465:         imprimeSimbolo(2);
  4047  000EDA  0E02               	movlw	2
  4048  000EDC  ECB7  F00E         	call	_imprimeSimbolo
  4049  000EE0                     
  4050                           ;main.c: 466:         lcd_pos(1,5);
  4051  000EE0  0E05               	movlw	5
  4052  000EE2  6E06               	movwf	lcd_pos@col^0,c
  4053  000EE4  0E01               	movlw	1
  4054  000EE6  ECCE  F00D         	call	_lcd_pos
  4055  000EEA                     
  4056                           ;main.c: 467:         lcd_str("Mensagem");
  4057  000EEA  0E33               	movlw	low (STR_4+8)
  4058  000EEC  6E0A               	movwf	lcd_str@str^0,c
  4059  000EEE  0E06               	movlw	high (STR_4+8)
  4060  000EF0  6E0B               	movwf	(lcd_str@str+1)^0,c
  4061  000EF2  ECD3  F00C         	call	_lcd_str	;wreg free
  4062  000EF6                     
  4063                           ;main.c: 468:         lcd_pos(2,5);
  4064  000EF6  0E05               	movlw	5
  4065  000EF8  6E06               	movwf	lcd_pos@col^0,c
  4066  000EFA  0E02               	movlw	2
  4067  000EFC  ECCE  F00D         	call	_lcd_pos
  4068  000F00                     
  4069                           ;main.c: 469:         lcd_str("Enviada");
  4070  000F00  0E8A               	movlw	low STR_7
  4071  000F02  6E0A               	movwf	lcd_str@str^0,c
  4072  000F04  0E06               	movlw	high STR_7
  4073  000F06  6E0B               	movwf	(lcd_str@str+1)^0,c
  4074  000F08  ECD3  F00C         	call	_lcd_str	;wreg free
  4075  000F0C                     
  4076                           ;main.c: 470:         lcd_pos(3,5);
  4077  000F0C  0E05               	movlw	5
  4078  000F0E  6E06               	movwf	lcd_pos@col^0,c
  4079  000F10  0E03               	movlw	3
  4080  000F12  ECCE  F00D         	call	_lcd_pos
  4081  000F16                     
  4082                           ;main.c: 471:         for(i=0;i<contN;i++){
  4083  000F16  0E00               	movlw	0
  4084  000F18  6E61               	movwf	mensagem@i^0,c
  4085  000F1A  EF99  F007         	goto	l3270
  4086  000F1E                     l3266:
  4087                           
  4088                           ;main.c: 472:             lcd_dat(numero[i]);
  4089  000F1E  0E55               	movlw	low mensagem@numero
  4090  000F20  2461               	addwf	mensagem@i^0,w,c
  4091  000F22  6ED9               	movwf	fsr2l,c
  4092  000F24  6ADA               	clrf	fsr2h,c
  4093  000F26  0E00               	movlw	high mensagem@numero
  4094  000F28  22DA               	addwfc	fsr2h,f,c
  4095  000F2A  50DF               	movf	indf2,w,c
  4096  000F2C  EC05  F010         	call	_lcd_dat
  4097  000F30                     
  4098                           ;main.c: 473:         }
  4099  000F30  2A61               	incf	mensagem@i^0,f,c
  4100  000F32                     l3270:
  4101  000F32  5066               	movf	mensagem@contN^0,w,c
  4102  000F34  5C61               	subwf	mensagem@i^0,w,c
  4103  000F36  A0D8               	btfss	status,0,c
  4104  000F38  EFA0  F007         	goto	u1971
  4105  000F3C  EFA2  F007         	goto	u1970
  4106  000F40                     u1971:
  4107  000F40  EF8F  F007         	goto	l3266
  4108  000F44                     u1970:
  4109  000F44                     
  4110                           ;main.c: 474:         atraso_ms(1000);
  4111  000F44  0E03               	movlw	3
  4112  000F46  6E02               	movwf	(atraso_ms@valor+1)^0,c
  4113  000F48  0EE8               	movlw	232
  4114  000F4A  6E01               	movwf	atraso_ms@valor^0,c
  4115  000F4C  ECE6  F00F         	call	_atraso_ms	;wreg free
  4116  000F50                     
  4117                           ;main.c: 475:         PORTC = 0x00;
  4118  000F50  0E00               	movlw	0
  4119  000F52  6E82               	movwf	130,c	;volatile
  4120  000F54                     
  4121                           ;main.c: 477:     TRISC = old_TC;
  4122  000F54  C053  FF94         	movff	mensagem@old_TC,3988	;volatile
  4123  000F58  0012               	return		;funcret
  4124  000F5A                     __end_of_mensagem:
  4125                           	opt callstack 0
  4126                           
  4127 ;; *************** function _ligacao *****************
  4128 ;; Defined at:
  4129 ;;		line 480 in file "main.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  numero         12   21[COMRAM] unsigned char [12]
  4134 ;;  contN           1   36[COMRAM] unsigned char 
  4135 ;;  tecla           1   35[COMRAM] unsigned char 
  4136 ;;  i               1   34[COMRAM] unsigned char 
  4137 ;;  buzz            1   33[COMRAM] unsigned char 
  4138 ;;  tempo           1   20[COMRAM] unsigned char 
  4139 ;;  ligar           1   19[COMRAM] unsigned char 
  4140 ;;  old_TC          1   18[COMRAM] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4150 ;;      Params:         0       0       0       0       0       0       0
  4151 ;;      Locals:        19       0       0       0       0       0       0
  4152 ;;      Temps:          2       0       0       0       0       0       0
  4153 ;;      Totals:        21       0       0       0       0       0       0
  4154 ;;Total ram usage:       21 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    3
  4157 ;; This function calls:
  4158 ;;		_atraso_ms
  4159 ;;		_imprimeSimbolo
  4160 ;;		_lcd_cmd
  4161 ;;		_lcd_dat
  4162 ;;		_lcd_pos
  4163 ;;		_lcd_str
  4164 ;;		_tc_tecla
  4165 ;; This function is called by:
  4166 ;;		_menu
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text13
  4171  000F5A                     __ptext13:
  4172                           	opt callstack 0
  4173  000F5A                     _ligacao:
  4174                           	opt callstack 26
  4175  000F5A                     
  4176                           ;main.c: 481:     unsigned char old_TC = TRISC;
  4177  000F5A  CF94 F013          	movff	3988,ligacao@old_TC	;volatile
  4178  000F5E                     
  4179                           ;main.c: 482:     lcd_cmd(0x01);
  4180  000F5E  0E01               	movlw	1
  4181  000F60  EC1A  F010         	call	_lcd_cmd
  4182                           
  4183                           ;main.c: 483:     lcd_cmd(0x0F);
  4184  000F64  0E0F               	movlw	15
  4185  000F66  EC1A  F010         	call	_lcd_cmd
  4186                           
  4187                           ;main.c: 484:     lcd_pos(1,0);
  4188  000F6A  0E00               	movlw	0
  4189  000F6C  6E06               	movwf	lcd_pos@col^0,c
  4190  000F6E  0E01               	movlw	1
  4191  000F70  ECCE  F00D         	call	_lcd_pos
  4192  000F74                     
  4193                           ;main.c: 485:     unsigned char tecla, buzz = 1, ligar = 0, tempo = 0, numero[12], contN
      +                           = 0, i;
  4194  000F74  0E01               	movlw	1
  4195  000F76  6E22               	movwf	ligacao@buzz^0,c
  4196  000F78  0E00               	movlw	0
  4197  000F7A  6E14               	movwf	ligacao@ligar^0,c
  4198  000F7C  0E00               	movlw	0
  4199  000F7E  6E15               	movwf	ligacao@tempo^0,c
  4200  000F80  0E00               	movlw	0
  4201  000F82  6E25               	movwf	ligacao@contN^0,c
  4202  000F84                     l2696:
  4203                           
  4204                           ;main.c: 487:         tecla = tc_tecla(0);
  4205  000F84  0E00               	movlw	0
  4206  000F86  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  4207  000F88  0E00               	movlw	0
  4208  000F8A  6E06               	movwf	tc_tecla@timeout^0,c
  4209  000F8C  EC8A  F009         	call	_tc_tecla	;wreg free
  4210  000F90  6E24               	movwf	ligacao@tecla^0,c
  4211                           
  4212                           ;main.c: 490:         switch (tecla){
  4213  000F92  EF96  F008         	goto	l2762
  4214  000F96                     l2698:
  4215                           
  4216                           ;main.c: 492:                 numero[contN] = tecla+48;
  4217  000F96  0E16               	movlw	low ligacao@numero
  4218  000F98  2425               	addwf	ligacao@contN^0,w,c
  4219  000F9A  6ED9               	movwf	fsr2l,c
  4220  000F9C  6ADA               	clrf	fsr2h,c
  4221  000F9E  0E00               	movlw	high ligacao@numero
  4222  000FA0  22DA               	addwfc	fsr2h,f,c
  4223  000FA2  5024               	movf	ligacao@tecla^0,w,c
  4224  000FA4  0F30               	addlw	48
  4225  000FA6  6EDF               	movwf	indf2,c
  4226  000FA8                     
  4227                           ;main.c: 493:                 lcd_dat(numero[contN]);
  4228  000FA8  0E16               	movlw	low ligacao@numero
  4229  000FAA  2425               	addwf	ligacao@contN^0,w,c
  4230  000FAC  6ED9               	movwf	fsr2l,c
  4231  000FAE  6ADA               	clrf	fsr2h,c
  4232  000FB0  0E00               	movlw	high ligacao@numero
  4233  000FB2  22DA               	addwfc	fsr2h,f,c
  4234  000FB4  50DF               	movf	indf2,w,c
  4235  000FB6  EC05  F010         	call	_lcd_dat
  4236  000FBA                     l2702:
  4237                           
  4238                           ;main.c: 494:                 contN++;
  4239  000FBA  2A25               	incf	ligacao@contN^0,f,c
  4240                           
  4241                           ;main.c: 495:                 break;
  4242  000FBC  EFCB  F008         	goto	l2764
  4243  000FC0                     l2704:
  4244                           
  4245                           ;main.c: 497:                 numero[contN] = tecla+48;
  4246  000FC0  0E16               	movlw	low ligacao@numero
  4247  000FC2  2425               	addwf	ligacao@contN^0,w,c
  4248  000FC4  6ED9               	movwf	fsr2l,c
  4249  000FC6  6ADA               	clrf	fsr2h,c
  4250  000FC8  0E00               	movlw	high ligacao@numero
  4251  000FCA  22DA               	addwfc	fsr2h,f,c
  4252  000FCC  5024               	movf	ligacao@tecla^0,w,c
  4253  000FCE  0F30               	addlw	48
  4254  000FD0  6EDF               	movwf	indf2,c
  4255  000FD2                     
  4256                           ;main.c: 498:                 lcd_dat(numero[contN]);
  4257  000FD2  0E16               	movlw	low ligacao@numero
  4258  000FD4  2425               	addwf	ligacao@contN^0,w,c
  4259  000FD6  6ED9               	movwf	fsr2l,c
  4260  000FD8  6ADA               	clrf	fsr2h,c
  4261  000FDA  0E00               	movlw	high ligacao@numero
  4262  000FDC  22DA               	addwfc	fsr2h,f,c
  4263  000FDE  50DF               	movf	indf2,w,c
  4264  000FE0  EC05  F010         	call	_lcd_dat
  4265  000FE4  EFDD  F007         	goto	l2702
  4266  000FE8                     l2710:
  4267                           
  4268                           ;main.c: 502:                 numero[contN] = tecla+48;
  4269  000FE8  0E16               	movlw	low ligacao@numero
  4270  000FEA  2425               	addwf	ligacao@contN^0,w,c
  4271  000FEC  6ED9               	movwf	fsr2l,c
  4272  000FEE  6ADA               	clrf	fsr2h,c
  4273  000FF0  0E00               	movlw	high ligacao@numero
  4274  000FF2  22DA               	addwfc	fsr2h,f,c
  4275  000FF4  5024               	movf	ligacao@tecla^0,w,c
  4276  000FF6  0F30               	addlw	48
  4277  000FF8  6EDF               	movwf	indf2,c
  4278  000FFA                     
  4279                           ;main.c: 503:                 lcd_dat(numero[contN]);
  4280  000FFA  0E16               	movlw	low ligacao@numero
  4281  000FFC  2425               	addwf	ligacao@contN^0,w,c
  4282  000FFE  6ED9               	movwf	fsr2l,c
  4283  001000  6ADA               	clrf	fsr2h,c
  4284  001002  0E00               	movlw	high ligacao@numero
  4285  001004  22DA               	addwfc	fsr2h,f,c
  4286  001006  50DF               	movf	indf2,w,c
  4287  001008  EC05  F010         	call	_lcd_dat
  4288  00100C  EFDD  F007         	goto	l2702
  4289  001010                     l2716:
  4290                           
  4291                           ;main.c: 507:                 numero[contN] = tecla+48;
  4292  001010  0E16               	movlw	low ligacao@numero
  4293  001012  2425               	addwf	ligacao@contN^0,w,c
  4294  001014  6ED9               	movwf	fsr2l,c
  4295  001016  6ADA               	clrf	fsr2h,c
  4296  001018  0E00               	movlw	high ligacao@numero
  4297  00101A  22DA               	addwfc	fsr2h,f,c
  4298  00101C  5024               	movf	ligacao@tecla^0,w,c
  4299  00101E  0F30               	addlw	48
  4300  001020  6EDF               	movwf	indf2,c
  4301  001022                     
  4302                           ;main.c: 508:                 lcd_dat(numero[contN]);
  4303  001022  0E16               	movlw	low ligacao@numero
  4304  001024  2425               	addwf	ligacao@contN^0,w,c
  4305  001026  6ED9               	movwf	fsr2l,c
  4306  001028  6ADA               	clrf	fsr2h,c
  4307  00102A  0E00               	movlw	high ligacao@numero
  4308  00102C  22DA               	addwfc	fsr2h,f,c
  4309  00102E  50DF               	movf	indf2,w,c
  4310  001030  EC05  F010         	call	_lcd_dat
  4311  001034  EFDD  F007         	goto	l2702
  4312  001038                     l2722:
  4313                           
  4314                           ;main.c: 512:                 numero[contN] = tecla+48;
  4315  001038  0E16               	movlw	low ligacao@numero
  4316  00103A  2425               	addwf	ligacao@contN^0,w,c
  4317  00103C  6ED9               	movwf	fsr2l,c
  4318  00103E  6ADA               	clrf	fsr2h,c
  4319  001040  0E00               	movlw	high ligacao@numero
  4320  001042  22DA               	addwfc	fsr2h,f,c
  4321  001044  5024               	movf	ligacao@tecla^0,w,c
  4322  001046  0F30               	addlw	48
  4323  001048  6EDF               	movwf	indf2,c
  4324  00104A                     
  4325                           ;main.c: 513:                 lcd_dat(numero[contN]);
  4326  00104A  0E16               	movlw	low ligacao@numero
  4327  00104C  2425               	addwf	ligacao@contN^0,w,c
  4328  00104E  6ED9               	movwf	fsr2l,c
  4329  001050  6ADA               	clrf	fsr2h,c
  4330  001052  0E00               	movlw	high ligacao@numero
  4331  001054  22DA               	addwfc	fsr2h,f,c
  4332  001056  50DF               	movf	indf2,w,c
  4333  001058  EC05  F010         	call	_lcd_dat
  4334  00105C  EFDD  F007         	goto	l2702
  4335  001060                     l2728:
  4336                           
  4337                           ;main.c: 517:                 numero[contN] = tecla+48;
  4338  001060  0E16               	movlw	low ligacao@numero
  4339  001062  2425               	addwf	ligacao@contN^0,w,c
  4340  001064  6ED9               	movwf	fsr2l,c
  4341  001066  6ADA               	clrf	fsr2h,c
  4342  001068  0E00               	movlw	high ligacao@numero
  4343  00106A  22DA               	addwfc	fsr2h,f,c
  4344  00106C  5024               	movf	ligacao@tecla^0,w,c
  4345  00106E  0F30               	addlw	48
  4346  001070  6EDF               	movwf	indf2,c
  4347  001072                     
  4348                           ;main.c: 518:                 lcd_dat(numero[contN]);
  4349  001072  0E16               	movlw	low ligacao@numero
  4350  001074  2425               	addwf	ligacao@contN^0,w,c
  4351  001076  6ED9               	movwf	fsr2l,c
  4352  001078  6ADA               	clrf	fsr2h,c
  4353  00107A  0E00               	movlw	high ligacao@numero
  4354  00107C  22DA               	addwfc	fsr2h,f,c
  4355  00107E  50DF               	movf	indf2,w,c
  4356  001080  EC05  F010         	call	_lcd_dat
  4357  001084  EFDD  F007         	goto	l2702
  4358  001088                     l2734:
  4359                           
  4360                           ;main.c: 522:                 numero[contN] = tecla+48;
  4361  001088  0E16               	movlw	low ligacao@numero
  4362  00108A  2425               	addwf	ligacao@contN^0,w,c
  4363  00108C  6ED9               	movwf	fsr2l,c
  4364  00108E  6ADA               	clrf	fsr2h,c
  4365  001090  0E00               	movlw	high ligacao@numero
  4366  001092  22DA               	addwfc	fsr2h,f,c
  4367  001094  5024               	movf	ligacao@tecla^0,w,c
  4368  001096  0F30               	addlw	48
  4369  001098  6EDF               	movwf	indf2,c
  4370  00109A                     
  4371                           ;main.c: 523:                 lcd_dat(numero[contN]);
  4372  00109A  0E16               	movlw	low ligacao@numero
  4373  00109C  2425               	addwf	ligacao@contN^0,w,c
  4374  00109E  6ED9               	movwf	fsr2l,c
  4375  0010A0  6ADA               	clrf	fsr2h,c
  4376  0010A2  0E00               	movlw	high ligacao@numero
  4377  0010A4  22DA               	addwfc	fsr2h,f,c
  4378  0010A6  50DF               	movf	indf2,w,c
  4379  0010A8  EC05  F010         	call	_lcd_dat
  4380  0010AC  EFDD  F007         	goto	l2702
  4381  0010B0                     l2740:
  4382                           
  4383                           ;main.c: 527:                 numero[contN] = tecla+48;
  4384  0010B0  0E16               	movlw	low ligacao@numero
  4385  0010B2  2425               	addwf	ligacao@contN^0,w,c
  4386  0010B4  6ED9               	movwf	fsr2l,c
  4387  0010B6  6ADA               	clrf	fsr2h,c
  4388  0010B8  0E00               	movlw	high ligacao@numero
  4389  0010BA  22DA               	addwfc	fsr2h,f,c
  4390  0010BC  5024               	movf	ligacao@tecla^0,w,c
  4391  0010BE  0F30               	addlw	48
  4392  0010C0  6EDF               	movwf	indf2,c
  4393  0010C2                     
  4394                           ;main.c: 528:                 lcd_dat(numero[contN]);
  4395  0010C2  0E16               	movlw	low ligacao@numero
  4396  0010C4  2425               	addwf	ligacao@contN^0,w,c
  4397  0010C6  6ED9               	movwf	fsr2l,c
  4398  0010C8  6ADA               	clrf	fsr2h,c
  4399  0010CA  0E00               	movlw	high ligacao@numero
  4400  0010CC  22DA               	addwfc	fsr2h,f,c
  4401  0010CE  50DF               	movf	indf2,w,c
  4402  0010D0  EC05  F010         	call	_lcd_dat
  4403  0010D4                     
  4404                           ;main.c: 529:                 contN++;
  4405  0010D4  2A25               	incf	ligacao@contN^0,f,c
  4406  0010D6                     
  4407                           ;main.c: 530:                 tempo = 0;
  4408  0010D6  0E00               	movlw	0
  4409  0010D8  6E15               	movwf	ligacao@tempo^0,c
  4410                           
  4411                           ;main.c: 531:                 break;
  4412  0010DA  EFCB  F008         	goto	l2764
  4413  0010DE                     l2748:
  4414                           
  4415                           ;main.c: 533:                 numero[contN] = tecla+48;
  4416  0010DE  0E16               	movlw	low ligacao@numero
  4417  0010E0  2425               	addwf	ligacao@contN^0,w,c
  4418  0010E2  6ED9               	movwf	fsr2l,c
  4419  0010E4  6ADA               	clrf	fsr2h,c
  4420  0010E6  0E00               	movlw	high ligacao@numero
  4421  0010E8  22DA               	addwfc	fsr2h,f,c
  4422  0010EA  5024               	movf	ligacao@tecla^0,w,c
  4423  0010EC  0F30               	addlw	48
  4424  0010EE  6EDF               	movwf	indf2,c
  4425  0010F0                     
  4426                           ;main.c: 534:                 lcd_dat(numero[contN]);
  4427  0010F0  0E16               	movlw	low ligacao@numero
  4428  0010F2  2425               	addwf	ligacao@contN^0,w,c
  4429  0010F4  6ED9               	movwf	fsr2l,c
  4430  0010F6  6ADA               	clrf	fsr2h,c
  4431  0010F8  0E00               	movlw	high ligacao@numero
  4432  0010FA  22DA               	addwfc	fsr2h,f,c
  4433  0010FC  50DF               	movf	indf2,w,c
  4434  0010FE  EC05  F010         	call	_lcd_dat
  4435  001102  EFDD  F007         	goto	l2702
  4436  001106                     l2754:
  4437                           
  4438                           ;main.c: 538:                 numero[contN] = 48;
  4439  001106  0E16               	movlw	low ligacao@numero
  4440  001108  2425               	addwf	ligacao@contN^0,w,c
  4441  00110A  6ED9               	movwf	fsr2l,c
  4442  00110C  6ADA               	clrf	fsr2h,c
  4443  00110E  0E00               	movlw	high ligacao@numero
  4444  001110  22DA               	addwfc	fsr2h,f,c
  4445  001112  0E30               	movlw	48
  4446  001114  6EDF               	movwf	indf2,c
  4447  001116                     
  4448                           ;main.c: 539:                 lcd_dat(numero[contN]);
  4449  001116  0E16               	movlw	low ligacao@numero
  4450  001118  2425               	addwf	ligacao@contN^0,w,c
  4451  00111A  6ED9               	movwf	fsr2l,c
  4452  00111C  6ADA               	clrf	fsr2h,c
  4453  00111E  0E00               	movlw	high ligacao@numero
  4454  001120  22DA               	addwfc	fsr2h,f,c
  4455  001122  50DF               	movf	indf2,w,c
  4456  001124  EC05  F010         	call	_lcd_dat
  4457  001128  EFDD  F007         	goto	l2702
  4458  00112C                     l2762:
  4459  00112C  5024               	movf	ligacao@tecla^0,w,c
  4460  00112E  6E11               	movwf	??_ligacao^0,c
  4461  001130  6A12               	clrf	(??_ligacao+1)^0,c
  4462                           
  4463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4464                           ; Switch size 1, requested type "simple"
  4465                           ; Number of cases is 1, Range of values is 0 to 0
  4466                           ; switch strategies available:
  4467                           ; Name         Instructions Cycles
  4468                           ; simple_byte            4     3 (average)
  4469                           ;	Chosen strategy is simple_byte
  4470  001132  5012               	movf	(??_ligacao+1)^0,w,c
  4471  001134  0A00               	xorlw	0	; case 0
  4472  001136  B4D8               	btfsc	status,2,c
  4473  001138  EFA0  F008         	goto	l3680
  4474  00113C  EFCB  F008         	goto	l2764
  4475  001140                     l3680:
  4476                           
  4477                           ; Switch size 1, requested type "simple"
  4478                           ; Number of cases is 10, Range of values is 0 to 9
  4479                           ; switch strategies available:
  4480                           ; Name         Instructions Cycles
  4481                           ; simple_byte           31    16 (average)
  4482                           ;	Chosen strategy is simple_byte
  4483  001140  5011               	movf	??_ligacao^0,w,c
  4484  001142  0A00               	xorlw	0	; case 0
  4485  001144  B4D8               	btfsc	status,2,c
  4486  001146  EF83  F008         	goto	l2754
  4487  00114A  0A01               	xorlw	1	; case 1
  4488  00114C  B4D8               	btfsc	status,2,c
  4489  00114E  EFCB  F007         	goto	l2698
  4490  001152  0A03               	xorlw	3	; case 2
  4491  001154  B4D8               	btfsc	status,2,c
  4492  001156  EFE0  F007         	goto	l2704
  4493  00115A  0A01               	xorlw	1	; case 3
  4494  00115C  B4D8               	btfsc	status,2,c
  4495  00115E  EFF4  F007         	goto	l2710
  4496  001162  0A07               	xorlw	7	; case 4
  4497  001164  B4D8               	btfsc	status,2,c
  4498  001166  EF08  F008         	goto	l2716
  4499  00116A  0A01               	xorlw	1	; case 5
  4500  00116C  B4D8               	btfsc	status,2,c
  4501  00116E  EF1C  F008         	goto	l2722
  4502  001172  0A03               	xorlw	3	; case 6
  4503  001174  B4D8               	btfsc	status,2,c
  4504  001176  EF30  F008         	goto	l2728
  4505  00117A  0A01               	xorlw	1	; case 7
  4506  00117C  B4D8               	btfsc	status,2,c
  4507  00117E  EF44  F008         	goto	l2734
  4508  001182  0A0F               	xorlw	15	; case 8
  4509  001184  B4D8               	btfsc	status,2,c
  4510  001186  EF58  F008         	goto	l2740
  4511  00118A  0A01               	xorlw	1	; case 9
  4512  00118C  B4D8               	btfsc	status,2,c
  4513  00118E  EF6F  F008         	goto	l2748
  4514  001192  EFCB  F008         	goto	l2764
  4515  001196                     l2764:
  4516                           
  4517                           ;main.c: 545:         if(tecla == 12){
  4518  001196  0E0C               	movlw	12
  4519  001198  1824               	xorwf	ligacao@tecla^0,w,c
  4520  00119A  A4D8               	btfss	status,2,c
  4521  00119C  EFD2  F008         	goto	u1511
  4522  0011A0  EFD4  F008         	goto	u1510
  4523  0011A4                     u1511:
  4524  0011A4  EFD8  F008         	goto	l2768
  4525  0011A8                     u1510:
  4526  0011A8                     
  4527                           ;main.c: 546:             ligar = 1;
  4528  0011A8  0E01               	movlw	1
  4529  0011AA  6E14               	movwf	ligacao@ligar^0,c
  4530                           
  4531                           ;main.c: 547:             break;
  4532  0011AC  EFE1  F008         	goto	l2772
  4533  0011B0                     l2768:
  4534                           
  4535                           ;main.c: 551:         if(tecla == 10){
  4536  0011B0  0E0A               	movlw	10
  4537  0011B2  1824               	xorwf	ligacao@tecla^0,w,c
  4538  0011B4  A4D8               	btfss	status,2,c
  4539  0011B6  EFDF  F008         	goto	u1521
  4540  0011BA  EFE1  F008         	goto	u1520
  4541  0011BE                     u1521:
  4542  0011BE  EFC2  F007         	goto	l2696
  4543  0011C2                     u1520:
  4544  0011C2                     l2772:
  4545                           
  4546                           ;main.c: 555:     lcd_cmd(0x0C);
  4547  0011C2  0E0C               	movlw	12
  4548  0011C4  EC1A  F010         	call	_lcd_cmd
  4549  0011C8                     
  4550                           ;main.c: 557:     PORTC = 0x01;
  4551  0011C8  0E01               	movlw	1
  4552  0011CA  6E82               	movwf	130,c	;volatile
  4553  0011CC                     
  4554                           ;main.c: 558:     if (ligar){
  4555  0011CC  5014               	movf	ligacao@ligar^0,w,c
  4556  0011CE  B4D8               	btfsc	status,2,c
  4557  0011D0  EFEC  F008         	goto	u1531
  4558  0011D4  EFEE  F008         	goto	u1530
  4559  0011D8                     u1531:
  4560  0011D8  EF85  F009         	goto	l2830
  4561  0011DC                     u1530:
  4562  0011DC                     
  4563                           ;main.c: 559:         lcd_cmd(0x01);
  4564  0011DC  0E01               	movlw	1
  4565  0011DE  EC1A  F010         	call	_lcd_cmd
  4566                           
  4567                           ;main.c: 560:         imprimeSimbolo(1);
  4568  0011E2  0E01               	movlw	1
  4569  0011E4  ECB7  F00E         	call	_imprimeSimbolo
  4570                           
  4571                           ;main.c: 561:         lcd_pos(1,5);
  4572  0011E8  0E05               	movlw	5
  4573  0011EA  6E06               	movwf	lcd_pos@col^0,c
  4574  0011EC  0E01               	movlw	1
  4575  0011EE  ECCE  F00D         	call	_lcd_pos
  4576  0011F2                     
  4577                           ;main.c: 562:         lcd_str("Ligando");
  4578  0011F2  0E9A               	movlw	low STR_8
  4579  0011F4  6E0A               	movwf	lcd_str@str^0,c
  4580  0011F6  0E06               	movlw	high STR_8
  4581  0011F8  6E0B               	movwf	(lcd_str@str+1)^0,c
  4582  0011FA  ECD3  F00C         	call	_lcd_str	;wreg free
  4583  0011FE                     
  4584                           ;main.c: 563:         lcd_pos(2,5);
  4585  0011FE  0E05               	movlw	5
  4586  001200  6E06               	movwf	lcd_pos@col^0,c
  4587  001202  0E02               	movlw	2
  4588  001204  ECCE  F00D         	call	_lcd_pos
  4589  001208                     
  4590                           ;main.c: 564:         for(i=0;i<contN;i++){
  4591  001208  0E00               	movlw	0
  4592  00120A  6E23               	movwf	ligacao@i^0,c
  4593  00120C  EF12  F009         	goto	l2790
  4594  001210                     l2786:
  4595                           
  4596                           ;main.c: 565:             lcd_dat(numero[i]);
  4597  001210  0E16               	movlw	low ligacao@numero
  4598  001212  2423               	addwf	ligacao@i^0,w,c
  4599  001214  6ED9               	movwf	fsr2l,c
  4600  001216  6ADA               	clrf	fsr2h,c
  4601  001218  0E00               	movlw	high ligacao@numero
  4602  00121A  22DA               	addwfc	fsr2h,f,c
  4603  00121C  50DF               	movf	indf2,w,c
  4604  00121E  EC05  F010         	call	_lcd_dat
  4605  001222                     
  4606                           ;main.c: 566:         }
  4607  001222  2A23               	incf	ligacao@i^0,f,c
  4608  001224                     l2790:
  4609  001224  5025               	movf	ligacao@contN^0,w,c
  4610  001226  5C23               	subwf	ligacao@i^0,w,c
  4611  001228  A0D8               	btfss	status,0,c
  4612  00122A  EF19  F009         	goto	u1541
  4613  00122E  EF1B  F009         	goto	u1540
  4614  001232                     u1541:
  4615  001232  EF08  F009         	goto	l2786
  4616  001236                     u1540:
  4617  001236                     l2792:
  4618                           
  4619                           ;main.c: 570:             if(buzz){
  4620  001236  5022               	movf	ligacao@buzz^0,w,c
  4621  001238  B4D8               	btfsc	status,2,c
  4622  00123A  EF21  F009         	goto	u1551
  4623  00123E  EF23  F009         	goto	u1550
  4624  001242                     u1551:
  4625  001242  EF29  F009         	goto	l2796
  4626  001246                     u1550:
  4627  001246                     
  4628                           ;main.c: 571:                 TRISC = 0x02;
  4629  001246  0E02               	movlw	2
  4630  001248  6E94               	movwf	148,c	;volatile
  4631                           
  4632                           ;main.c: 572:                 buzz = 0;
  4633  00124A  0E00               	movlw	0
  4634  00124C  6E22               	movwf	ligacao@buzz^0,c
  4635                           
  4636                           ;main.c: 573:             }else{
  4637  00124E  EF2D  F009         	goto	l2798
  4638  001252                     l2796:
  4639                           
  4640                           ;main.c: 574:                 TRISC = 0x00;
  4641  001252  0E00               	movlw	0
  4642  001254  6E94               	movwf	148,c	;volatile
  4643                           
  4644                           ;main.c: 575:                 buzz = 1;
  4645  001256  0E01               	movlw	1
  4646  001258  6E22               	movwf	ligacao@buzz^0,c
  4647  00125A                     l2798:
  4648                           
  4649                           ;main.c: 578:             tecla = tc_tecla(1000);
  4650  00125A  0E03               	movlw	3
  4651  00125C  6E07               	movwf	(tc_tecla@timeout+1)^0,c
  4652  00125E  0EE8               	movlw	232
  4653  001260  6E06               	movwf	tc_tecla@timeout^0,c
  4654  001262  EC8A  F009         	call	_tc_tecla	;wreg free
  4655  001266  6E24               	movwf	ligacao@tecla^0,c
  4656  001268                     
  4657                           ;main.c: 579:             tempo++;
  4658  001268  2A15               	incf	ligacao@tempo^0,f,c
  4659  00126A                     
  4660                           ;main.c: 580:             if(tempo>10 || tecla == 10){
  4661  00126A  0E0B               	movlw	11
  4662  00126C  6015               	cpfslt	ligacao@tempo^0,c
  4663  00126E  EF3B  F009         	goto	u1561
  4664  001272  EF3D  F009         	goto	u1560
  4665  001276                     u1561:
  4666  001276  EF46  F009         	goto	l2806
  4667  00127A                     u1560:
  4668  00127A  0E0A               	movlw	10
  4669  00127C  1824               	xorwf	ligacao@tecla^0,w,c
  4670  00127E  A4D8               	btfss	status,2,c
  4671  001280  EF44  F009         	goto	u1571
  4672  001284  EF46  F009         	goto	u1570
  4673  001288                     u1571:
  4674  001288  EF1B  F009         	goto	l2792
  4675  00128C                     u1570:
  4676  00128C                     l2806:
  4677                           
  4678                           ;main.c: 584:         lcd_cmd(0x01);
  4679  00128C  0E01               	movlw	1
  4680  00128E  EC1A  F010         	call	_lcd_cmd
  4681                           
  4682                           ;main.c: 585:         imprimeSimbolo(1);
  4683  001292  0E01               	movlw	1
  4684  001294  ECB7  F00E         	call	_imprimeSimbolo
  4685                           
  4686                           ;main.c: 586:         lcd_pos(1,5);
  4687  001298  0E05               	movlw	5
  4688  00129A  6E06               	movwf	lcd_pos@col^0,c
  4689  00129C  0E01               	movlw	1
  4690  00129E  ECCE  F00D         	call	_lcd_pos
  4691  0012A2                     
  4692                           ;main.c: 587:         lcd_str("Fim da");
  4693  0012A2  0EAA               	movlw	low STR_9
  4694  0012A4  6E0A               	movwf	lcd_str@str^0,c
  4695  0012A6  0E06               	movlw	high STR_9
  4696  0012A8  6E0B               	movwf	(lcd_str@str+1)^0,c
  4697  0012AA  ECD3  F00C         	call	_lcd_str	;wreg free
  4698  0012AE                     
  4699                           ;main.c: 588:         lcd_pos(2,5);
  4700  0012AE  0E05               	movlw	5
  4701  0012B0  6E06               	movwf	lcd_pos@col^0,c
  4702  0012B2  0E02               	movlw	2
  4703  0012B4  ECCE  F00D         	call	_lcd_pos
  4704                           
  4705                           ;main.c: 589:         lcd_str("Chamada");
  4706  0012B8  0E92               	movlw	low STR_10
  4707  0012BA  6E0A               	movwf	lcd_str@str^0,c
  4708  0012BC  0E06               	movlw	high STR_10
  4709  0012BE  6E0B               	movwf	(lcd_str@str+1)^0,c
  4710  0012C0  ECD3  F00C         	call	_lcd_str	;wreg free
  4711  0012C4                     
  4712                           ;main.c: 591:         for(i=0; i<6; i++){
  4713  0012C4  0E00               	movlw	0
  4714  0012C6  6E23               	movwf	ligacao@i^0,c
  4715  0012C8                     l2818:
  4716                           
  4717                           ;main.c: 592:             if(buzz){
  4718  0012C8  5022               	movf	ligacao@buzz^0,w,c
  4719  0012CA  B4D8               	btfsc	status,2,c
  4720  0012CC  EF6A  F009         	goto	u1581
  4721  0012D0  EF6C  F009         	goto	u1580
  4722  0012D4                     u1581:
  4723  0012D4  EF72  F009         	goto	l2822
  4724  0012D8                     u1580:
  4725  0012D8                     
  4726                           ;main.c: 593:                 TRISC = 0x02;
  4727  0012D8  0E02               	movlw	2
  4728  0012DA  6E94               	movwf	148,c	;volatile
  4729                           
  4730                           ;main.c: 594:                 buzz = 0;
  4731  0012DC  0E00               	movlw	0
  4732  0012DE  6E22               	movwf	ligacao@buzz^0,c
  4733                           
  4734                           ;main.c: 595:             }else{
  4735  0012E0  EF76  F009         	goto	l2824
  4736  0012E4                     l2822:
  4737                           
  4738                           ;main.c: 596:                 TRISC = 0x00;
  4739  0012E4  0E00               	movlw	0
  4740  0012E6  6E94               	movwf	148,c	;volatile
  4741                           
  4742                           ;main.c: 597:                 buzz = 1;
  4743  0012E8  0E01               	movlw	1
  4744  0012EA  6E22               	movwf	ligacao@buzz^0,c
  4745  0012EC                     l2824:
  4746                           
  4747                           ;main.c: 599:             atraso_ms(400);
  4748  0012EC  0E01               	movlw	1
  4749  0012EE  6E02               	movwf	(atraso_ms@valor+1)^0,c
  4750  0012F0  0E90               	movlw	144
  4751  0012F2  6E01               	movwf	atraso_ms@valor^0,c
  4752  0012F4  ECE6  F00F         	call	_atraso_ms	;wreg free
  4753  0012F8                     
  4754                           ;main.c: 600:         }
  4755  0012F8  2A23               	incf	ligacao@i^0,f,c
  4756  0012FA  0E05               	movlw	5
  4757  0012FC  6423               	cpfsgt	ligacao@i^0,c
  4758  0012FE  EF83  F009         	goto	u1591
  4759  001302  EF85  F009         	goto	u1590
  4760  001306                     u1591:
  4761  001306  EF64  F009         	goto	l2818
  4762  00130A                     u1590:
  4763  00130A                     l2830:
  4764                           
  4765                           ;main.c: 602:     PORTC = 0x00;
  4766  00130A  0E00               	movlw	0
  4767  00130C  6E82               	movwf	130,c	;volatile
  4768  00130E                     
  4769                           ;main.c: 603:     TRISC = old_TC;
  4770  00130E  C013  FF94         	movff	ligacao@old_TC,3988	;volatile
  4771  001312  0012               	return		;funcret
  4772  001314                     __end_of_ligacao:
  4773                           	opt callstack 0
  4774                           
  4775 ;; *************** function _tc_tecla *****************
  4776 ;; Defined at:
  4777 ;;		line 25 in file "keypad.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  timeout         2    5[COMRAM] unsigned int 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  to              2    7[COMRAM] unsigned int 
  4782 ;;  i               1   14[COMRAM] unsigned char 
  4783 ;;  ret             1   13[COMRAM] unsigned char 
  4784 ;;  old_TB          1   12[COMRAM] unsigned char 
  4785 ;;  old_TD          1   11[COMRAM] unsigned char 
  4786 ;;  old_D           1   10[COMRAM] unsigned char 
  4787 ;;  tmp             1    9[COMRAM] unsigned char 
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1    wreg      unsigned char 
  4790 ;; Registers used:
  4791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4797 ;;      Params:         2       0       0       0       0       0       0
  4798 ;;      Locals:         8       0       0       0       0       0       0
  4799 ;;      Temps:          0       0       0       0       0       0       0
  4800 ;;      Totals:        10       0       0       0       0       0       0
  4801 ;;Total ram usage:       10 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    1
  4804 ;; This function calls:
  4805 ;;		_atraso_ms
  4806 ;; This function is called by:
  4807 ;;		_main
  4808 ;;		_menu
  4809 ;;		_mensagem
  4810 ;;		_ligacao
  4811 ;;		_simulaMensagem
  4812 ;;		_simulaChamada
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text14
  4817  001314                     __ptext14:
  4818                           	opt callstack 0
  4819  001314                     _tc_tecla:
  4820                           	opt callstack 29
  4821  001314                     
  4822                           ;keypad.c: 26:     unsigned int to = 0;
  4823  001314  0E00               	movlw	0
  4824  001316  6E09               	movwf	(tc_tecla@to+1)^0,c
  4825  001318  0E00               	movlw	0
  4826  00131A  6E08               	movwf	tc_tecla@to^0,c
  4827                           
  4828                           ;keypad.c: 27:     unsigned char i;;keypad.c: 28:     unsigned char ret = 0;
  4829  00131C  0E00               	movlw	0
  4830  00131E  6E0E               	movwf	tc_tecla@ret^0,c
  4831  001320                     
  4832                           ;keypad.c: 29:     unsigned char tmp = PORTB;
  4833  001320  CF81 F00A          	movff	3969,tc_tecla@tmp	;volatile
  4834  001324                     
  4835                           ;keypad.c: 31:     unsigned char old_D, old_TD, old_TB;;keypad.c: 32:     old_D = PORTD;
  4836  001324  CF83 F00B          	movff	3971,tc_tecla@old_D	;volatile
  4837  001328                     
  4838                           ;keypad.c: 33:     old_TD = TRISD;
  4839  001328  CF95 F00C          	movff	3989,tc_tecla@old_TD	;volatile
  4840  00132C                     
  4841                           ;keypad.c: 34:     old_TB = TRISB;
  4842  00132C  CF93 F00D          	movff	3987,tc_tecla@old_TB	;volatile
  4843  001330                     
  4844                           ;keypad.c: 35:     TRISD |= 0x0f;
  4845  001330  0E0F               	movlw	15
  4846  001332  1295               	iorwf	149,f,c	;volatile
  4847  001334                     
  4848                           ;keypad.c: 36:     TRISB = 0xF8;
  4849  001334  0EF8               	movlw	248
  4850  001336  6E93               	movwf	147,c	;volatile
  4851                           
  4852                           ;keypad.c: 39:     while (((to < timeout) || (!timeout))&&(!ret)) {
  4853  001338  EF45  F00A         	goto	l2510
  4854  00133C                     l2458:
  4855                           
  4856                           ;keypad.c: 40:         for (i = 0; i < 3; i++) {
  4857  00133C  0E00               	movlw	0
  4858  00133E  6E0F               	movwf	tc_tecla@i^0,c
  4859  001340                     l2464:
  4860                           
  4861                           ;keypad.c: 41:             PORTB |= ~linha[i];
  4862  001340  0E01               	movlw	low _linha
  4863  001342  240F               	addwf	tc_tecla@i^0,w,c
  4864  001344  6EF6               	movwf	tblptrl,c
  4865  001346  6AF7               	clrf	tblptrh,c
  4866  001348  0E06               	movlw	high _linha
  4867  00134A  22F7               	addwfc	tblptrh,f,c
  4868  00134C                     	if	0	;There are less than 3 active tblptr bytes
  4869  00134C                     	endif
  4870  00134C  0008               	tblrd		*
  4871  00134E  50F5               	movf	tablat,w,c
  4872  001350  0AFF               	xorlw	255
  4873  001352  1281               	iorwf	129,f,c	;volatile
  4874  001354                     
  4875                           ;keypad.c: 42:             if (!PORTDbits.RD3) {
  4876  001354  B683               	btfsc	131,3,c	;volatile
  4877  001356  EFAF  F009         	goto	u1161
  4878  00135A  EFB1  F009         	goto	u1160
  4879  00135E                     u1161:
  4880  00135E  EFC9  F009         	goto	l50
  4881  001362                     u1160:
  4882  001362                     
  4883                           ;keypad.c: 43:                 atraso_ms(20);
  4884  001362  0E00               	movlw	0
  4885  001364  6E02               	movwf	(atraso_ms@valor+1)^0,c
  4886  001366  0E14               	movlw	20
  4887  001368  6E01               	movwf	atraso_ms@valor^0,c
  4888  00136A  ECE6  F00F         	call	_atraso_ms	;wreg free
  4889  00136E                     
  4890                           ;keypad.c: 44:                 if (!PORTDbits.RD3) {
  4891  00136E  B683               	btfsc	131,3,c	;volatile
  4892  001370  EFBC  F009         	goto	u1171
  4893  001374  EFBE  F009         	goto	u1170
  4894  001378                     u1171:
  4895  001378  EFC9  F009         	goto	l50
  4896  00137C                     u1170:
  4897  00137C                     l52:
  4898  00137C  A683               	btfss	131,3,c	;volatile
  4899  00137E  EFC3  F009         	goto	u1181
  4900  001382  EFC5  F009         	goto	u1180
  4901  001386                     u1181:
  4902  001386  EFBE  F009         	goto	l52
  4903  00138A                     u1180:
  4904  00138A                     
  4905                           ;keypad.c: 46:                     ret = 1 + i;
  4906  00138A  280F               	incf	tc_tecla@i^0,w,c
  4907  00138C  6E0E               	movwf	tc_tecla@ret^0,c
  4908                           
  4909                           ;keypad.c: 47:                     break;
  4910  00138E  EF3B  F00A         	goto	l2506
  4911  001392                     l50:
  4912                           
  4913                           ;keypad.c: 50:             if (!PORTDbits.RD2) {
  4914  001392  B483               	btfsc	131,2,c	;volatile
  4915  001394  EFCE  F009         	goto	u1191
  4916  001398  EFD0  F009         	goto	u1190
  4917  00139C                     u1191:
  4918  00139C  EFE9  F009         	goto	l55
  4919  0013A0                     u1190:
  4920  0013A0                     
  4921                           ;keypad.c: 51:                 atraso_ms(20);
  4922  0013A0  0E00               	movlw	0
  4923  0013A2  6E02               	movwf	(atraso_ms@valor+1)^0,c
  4924  0013A4  0E14               	movlw	20
  4925  0013A6  6E01               	movwf	atraso_ms@valor^0,c
  4926  0013A8  ECE6  F00F         	call	_atraso_ms	;wreg free
  4927  0013AC                     
  4928                           ;keypad.c: 52:                 if (!PORTDbits.RD2) {
  4929  0013AC  B483               	btfsc	131,2,c	;volatile
  4930  0013AE  EFDB  F009         	goto	u1201
  4931  0013B2  EFDD  F009         	goto	u1200
  4932  0013B6                     u1201:
  4933  0013B6  EFE9  F009         	goto	l55
  4934  0013BA                     u1200:
  4935  0013BA                     l57:
  4936  0013BA  A483               	btfss	131,2,c	;volatile
  4937  0013BC  EFE2  F009         	goto	u1211
  4938  0013C0  EFE4  F009         	goto	u1210
  4939  0013C4                     u1211:
  4940  0013C4  EFDD  F009         	goto	l57
  4941  0013C8                     u1210:
  4942  0013C8                     
  4943                           ;keypad.c: 54:                     ret = 4 + i;
  4944  0013C8  500F               	movf	tc_tecla@i^0,w,c
  4945  0013CA  0F04               	addlw	4
  4946  0013CC  6E0E               	movwf	tc_tecla@ret^0,c
  4947                           
  4948                           ;keypad.c: 55:                     break;
  4949  0013CE  EF3B  F00A         	goto	l2506
  4950  0013D2                     l55:
  4951                           
  4952                           ;keypad.c: 58:             if (!PORTDbits.RD1) {
  4953  0013D2  B283               	btfsc	131,1,c	;volatile
  4954  0013D4  EFEE  F009         	goto	u1221
  4955  0013D8  EFF0  F009         	goto	u1220
  4956  0013DC                     u1221:
  4957  0013DC  EF09  F00A         	goto	l60
  4958  0013E0                     u1220:
  4959  0013E0                     
  4960                           ;keypad.c: 59:                 atraso_ms(20);
  4961  0013E0  0E00               	movlw	0
  4962  0013E2  6E02               	movwf	(atraso_ms@valor+1)^0,c
  4963  0013E4  0E14               	movlw	20
  4964  0013E6  6E01               	movwf	atraso_ms@valor^0,c
  4965  0013E8  ECE6  F00F         	call	_atraso_ms	;wreg free
  4966  0013EC                     
  4967                           ;keypad.c: 60:                 if (!PORTDbits.RD1) {
  4968  0013EC  B283               	btfsc	131,1,c	;volatile
  4969  0013EE  EFFB  F009         	goto	u1231
  4970  0013F2  EFFD  F009         	goto	u1230
  4971  0013F6                     u1231:
  4972  0013F6  EF09  F00A         	goto	l60
  4973  0013FA                     u1230:
  4974  0013FA                     l62:
  4975  0013FA  A283               	btfss	131,1,c	;volatile
  4976  0013FC  EF02  F00A         	goto	u1241
  4977  001400  EF04  F00A         	goto	u1240
  4978  001404                     u1241:
  4979  001404  EFFD  F009         	goto	l62
  4980  001408                     u1240:
  4981  001408                     
  4982                           ;keypad.c: 62:                     ret = 7 + i;
  4983  001408  500F               	movf	tc_tecla@i^0,w,c
  4984  00140A  0F07               	addlw	7
  4985  00140C  6E0E               	movwf	tc_tecla@ret^0,c
  4986                           
  4987                           ;keypad.c: 63:                     break;
  4988  00140E  EF3B  F00A         	goto	l2506
  4989  001412                     l60:
  4990                           
  4991                           ;keypad.c: 66:             if (!PORTDbits.RD0) {
  4992  001412  B083               	btfsc	131,0,c	;volatile
  4993  001414  EF0E  F00A         	goto	u1251
  4994  001418  EF10  F00A         	goto	u1250
  4995  00141C                     u1251:
  4996  00141C  EF29  F00A         	goto	l2500
  4997  001420                     u1250:
  4998  001420                     
  4999                           ;keypad.c: 67:                 atraso_ms(20);
  5000  001420  0E00               	movlw	0
  5001  001422  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5002  001424  0E14               	movlw	20
  5003  001426  6E01               	movwf	atraso_ms@valor^0,c
  5004  001428  ECE6  F00F         	call	_atraso_ms	;wreg free
  5005  00142C                     
  5006                           ;keypad.c: 68:                 if (!PORTDbits.RD0) {
  5007  00142C  B083               	btfsc	131,0,c	;volatile
  5008  00142E  EF1B  F00A         	goto	u1261
  5009  001432  EF1D  F00A         	goto	u1260
  5010  001436                     u1261:
  5011  001436  EF29  F00A         	goto	l2500
  5012  00143A                     u1260:
  5013  00143A                     l67:
  5014  00143A  A083               	btfss	131,0,c	;volatile
  5015  00143C  EF22  F00A         	goto	u1271
  5016  001440  EF24  F00A         	goto	u1270
  5017  001444                     u1271:
  5018  001444  EF1D  F00A         	goto	l67
  5019  001448                     u1270:
  5020  001448                     
  5021                           ;keypad.c: 70:                     ret = 10 + i;
  5022  001448  500F               	movf	tc_tecla@i^0,w,c
  5023  00144A  0F0A               	addlw	10
  5024  00144C  6E0E               	movwf	tc_tecla@ret^0,c
  5025                           
  5026                           ;keypad.c: 71:                     break;
  5027  00144E  EF3B  F00A         	goto	l2506
  5028  001452                     l2500:
  5029                           
  5030                           ;keypad.c: 74:             PORTB &= linha[i];
  5031  001452  0E01               	movlw	low _linha
  5032  001454  240F               	addwf	tc_tecla@i^0,w,c
  5033  001456  6EF6               	movwf	tblptrl,c
  5034  001458  6AF7               	clrf	tblptrh,c
  5035  00145A  0E06               	movlw	high _linha
  5036  00145C  22F7               	addwfc	tblptrh,f,c
  5037  00145E                     	if	0	;There are less than 3 active tblptr bytes
  5038  00145E                     	endif
  5039  00145E  0008               	tblrd		*
  5040  001460  50F5               	movf	tablat,w,c
  5041  001462  1681               	andwf	129,f,c	;volatile
  5042  001464                     
  5043                           ;keypad.c: 75:         };
  5044  001464  2A0F               	incf	tc_tecla@i^0,f,c
  5045  001466  0E02               	movlw	2
  5046  001468  640F               	cpfsgt	tc_tecla@i^0,c
  5047  00146A  EF39  F00A         	goto	u1281
  5048  00146E  EF3B  F00A         	goto	u1280
  5049  001472                     u1281:
  5050  001472  EFA0  F009         	goto	l2464
  5051  001476                     u1280:
  5052  001476                     l2506:
  5053                           
  5054                           ;keypad.c: 76:         atraso_ms(5);
  5055  001476  0E00               	movlw	0
  5056  001478  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5057  00147A  0E05               	movlw	5
  5058  00147C  6E01               	movwf	atraso_ms@valor^0,c
  5059  00147E  ECE6  F00F         	call	_atraso_ms	;wreg free
  5060  001482                     
  5061                           ;keypad.c: 77:         to += 5;
  5062  001482  0E05               	movlw	5
  5063  001484  2608               	addwf	tc_tecla@to^0,f,c
  5064  001486  0E00               	movlw	0
  5065  001488  2209               	addwfc	(tc_tecla@to+1)^0,f,c
  5066  00148A                     l2510:
  5067                           
  5068                           ;keypad.c: 39:     while (((to < timeout) || (!timeout))&&(!ret)) {
  5069  00148A  5006               	movf	tc_tecla@timeout^0,w,c
  5070  00148C  5C08               	subwf	tc_tecla@to^0,w,c
  5071  00148E  5007               	movf	(tc_tecla@timeout+1)^0,w,c
  5072  001490  5809               	subwfb	(tc_tecla@to+1)^0,w,c
  5073  001492  A0D8               	btfss	status,0,c
  5074  001494  EF4E  F00A         	goto	u1291
  5075  001498  EF50  F00A         	goto	u1290
  5076  00149C                     u1291:
  5077  00149C  EF59  F00A         	goto	l2514
  5078  0014A0                     u1290:
  5079  0014A0  5006               	movf	tc_tecla@timeout^0,w,c
  5080  0014A2  1007               	iorwf	(tc_tecla@timeout+1)^0,w,c
  5081  0014A4  A4D8               	btfss	status,2,c
  5082  0014A6  EF57  F00A         	goto	u1301
  5083  0014AA  EF59  F00A         	goto	u1300
  5084  0014AE                     u1301:
  5085  0014AE  EF61  F00A         	goto	l2516
  5086  0014B2                     u1300:
  5087  0014B2                     l2514:
  5088  0014B2  500E               	movf	tc_tecla@ret^0,w,c
  5089  0014B4  B4D8               	btfsc	status,2,c
  5090  0014B6  EF5F  F00A         	goto	u1311
  5091  0014BA  EF61  F00A         	goto	u1310
  5092  0014BE                     u1311:
  5093  0014BE  EF9E  F009         	goto	l2458
  5094  0014C2                     u1310:
  5095  0014C2                     l2516:
  5096                           
  5097                           ;keypad.c: 80:     if (!ret)ret = 255;
  5098  0014C2  500E               	movf	tc_tecla@ret^0,w,c
  5099  0014C4  A4D8               	btfss	status,2,c
  5100  0014C6  EF67  F00A         	goto	u1321
  5101  0014CA  EF69  F00A         	goto	u1320
  5102  0014CE                     u1321:
  5103  0014CE  EF6A  F00A         	goto	l2520
  5104  0014D2                     u1320:
  5105  0014D2  680E               	setf	tc_tecla@ret^0,c
  5106  0014D4                     l2520:
  5107                           
  5108                           ;keypad.c: 81:     if (ret == 11)ret = 0;
  5109  0014D4  0E0B               	movlw	11
  5110  0014D6  180E               	xorwf	tc_tecla@ret^0,w,c
  5111  0014D8  A4D8               	btfss	status,2,c
  5112  0014DA  EF71  F00A         	goto	u1331
  5113  0014DE  EF73  F00A         	goto	u1330
  5114  0014E2                     u1331:
  5115  0014E2  EF75  F00A         	goto	l2524
  5116  0014E6                     u1330:
  5117  0014E6  0E00               	movlw	0
  5118  0014E8  6E0E               	movwf	tc_tecla@ret^0,c
  5119  0014EA                     l2524:
  5120                           
  5121                           ;keypad.c: 82:     PORTB = tmp;
  5122  0014EA  C00A  FF81         	movff	tc_tecla@tmp,3969	;volatile
  5123  0014EE                     
  5124                           ;keypad.c: 83:     PORTD = old_D;
  5125  0014EE  C00B  FF83         	movff	tc_tecla@old_D,3971	;volatile
  5126  0014F2                     
  5127                           ;keypad.c: 84:     TRISD = old_TD;
  5128  0014F2  C00C  FF95         	movff	tc_tecla@old_TD,3989	;volatile
  5129  0014F6                     
  5130                           ;keypad.c: 85:     TRISB = old_TB;
  5131  0014F6  C00D  FF93         	movff	tc_tecla@old_TB,3987	;volatile
  5132                           
  5133                           ;keypad.c: 86:     return ret;
  5134  0014FA  500E               	movf	tc_tecla@ret^0,w,c
  5135  0014FC  0012               	return		;funcret
  5136  0014FE                     __end_of_tc_tecla:
  5137                           	opt callstack 0
  5138                           
  5139 ;; *************** function _lcd_str *****************
  5140 ;; Defined at:
  5141 ;;		line 93 in file "lcd.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;  str             2    9[COMRAM] PTR const unsigned char 
  5144 ;;		 -> STR_22(9), STR_21(8), STR_20(8), STR_19(7), 
  5145 ;;		 -> STR_18(9), STR_17(8), STR_16(9), STR_15(8), 
  5146 ;;		 -> STR_14(13), STR_13(38), STR_12(9), STR_11(9), 
  5147 ;;		 -> STR_10(8), STR_9(7), STR_8(8), STR_7(8), 
  5148 ;;		 -> STR_6(9), STR_5(13), STR_4(17), STR_3(14), 
  5149 ;;		 -> STR_2(11), STR_1(8), date(10), 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  i               1   15[COMRAM] unsigned char 
  5152 ;;  j               1   14[COMRAM] unsigned char 
  5153 ;;  lin             1   13[COMRAM] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         2       0       0       0       0       0       0
  5164 ;;      Locals:         3       0       0       0       0       0       0
  5165 ;;      Temps:          2       0       0       0       0       0       0
  5166 ;;      Totals:         7       0       0       0       0       0       0
  5167 ;;Total ram usage:        7 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    2
  5170 ;; This function calls:
  5171 ;;		___wmul
  5172 ;;		_lcd_dat
  5173 ;;		_lcd_pos
  5174 ;; This function is called by:
  5175 ;;		_main
  5176 ;;		_menu
  5177 ;;		_mensagem
  5178 ;;		_ligacao
  5179 ;;		_simulaMensagem
  5180 ;;		_simulaChamada
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text15
  5185  0019A6                     __ptext15:
  5186                           	opt callstack 0
  5187  0019A6                     _lcd_str:
  5188                           	opt callstack 27
  5189  0019A6                     
  5190                           ;lcd.c: 94:     unsigned char i = 0, j = 0, lin = 0;
  5191  0019A6  0E00               	movlw	0
  5192  0019A8  6E10               	movwf	lcd_str@i^0,c
  5193  0019AA  0E00               	movlw	0
  5194  0019AC  6E0F               	movwf	lcd_str@j^0,c
  5195  0019AE  0E00               	movlw	0
  5196  0019B0  6E0E               	movwf	lcd_str@lin^0,c
  5197                           
  5198                           ;lcd.c: 95:     while (str[i] != 0) {
  5199  0019B2  EF3B  F00D         	goto	l2592
  5200  0019B6                     l2580:
  5201                           
  5202                           ;lcd.c: 96:         lcd_dat(str[i]);
  5203  0019B6  5010               	movf	lcd_str@i^0,w,c
  5204  0019B8  240A               	addwf	lcd_str@str^0,w,c
  5205  0019BA  6E0C               	movwf	??_lcd_str^0,c
  5206  0019BC  0E00               	movlw	0
  5207  0019BE  200B               	addwfc	(lcd_str@str+1)^0,w,c
  5208  0019C0  6E0D               	movwf	(??_lcd_str+1)^0,c
  5209  0019C2  C00C  FFF6         	movff	??_lcd_str,tblptrl
  5210  0019C6  C00D  FFF7         	movff	??_lcd_str+1,tblptrh
  5211  0019CA  6AF8               	clrf	tblptru,c
  5212  0019CC  0E05               	movlw	(high __ramtop+-1)
  5213  0019CE  64F7               	cpfsgt	tblptrh,c
  5214  0019D0  D003               	bra	u1377
  5215  0019D2  0008               	tblrd		*
  5216  0019D4  50F5               	movf	tablat,w,c
  5217  0019D6  D005               	bra	u1370
  5218  0019D8                     u1377:
  5219  0019D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  5220  0019DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  5221  0019E0  50EF               	movf	indf0,w,c
  5222  0019E2                     u1370:
  5223  0019E2  EC05  F010         	call	_lcd_dat
  5224  0019E6                     
  5225                           ;lcd.c: 97:         i++;
  5226  0019E6  2A10               	incf	lcd_str@i^0,f,c
  5227  0019E8                     
  5228                           ;lcd.c: 99:         if(str[i] != ' '){
  5229  0019E8  5010               	movf	lcd_str@i^0,w,c
  5230  0019EA  240A               	addwf	lcd_str@str^0,w,c
  5231  0019EC  6E0C               	movwf	??_lcd_str^0,c
  5232  0019EE  0E00               	movlw	0
  5233  0019F0  200B               	addwfc	(lcd_str@str+1)^0,w,c
  5234  0019F2  6E0D               	movwf	(??_lcd_str+1)^0,c
  5235  0019F4  C00C  FFF6         	movff	??_lcd_str,tblptrl
  5236  0019F8  C00D  FFF7         	movff	??_lcd_str+1,tblptrh
  5237  0019FC  6AF8               	clrf	tblptru,c
  5238  0019FE  0E05               	movlw	(high __ramtop+-1)
  5239  001A00  64F7               	cpfsgt	tblptrh,c
  5240  001A02  D003               	bra	u1387
  5241  001A04  0008               	tblrd		*
  5242  001A06  50F5               	movf	tablat,w,c
  5243  001A08  D005               	bra	u1380
  5244  001A0A                     u1387:
  5245  001A0A  CFF6 FFE9          	movff	tblptrl,fsr0l
  5246  001A0E  CFF7 FFEA          	movff	tblptrh,fsr0h
  5247  001A12  50EF               	movf	indf0,w,c
  5248  001A14                     u1380:
  5249  001A14  0A20               	xorlw	32
  5250  001A16  B4D8               	btfsc	status,2,c
  5251  001A18  EF10  F00D         	goto	u1391
  5252  001A1C  EF12  F00D         	goto	u1390
  5253  001A20                     u1391:
  5254  001A20  EF3B  F00D         	goto	l2592
  5255  001A24                     u1390:
  5256  001A24                     
  5257                           ;lcd.c: 100:             if(i-(j*16)-lin >= 16){
  5258  001A24  C00F  F001         	movff	lcd_str@j,___wmul@multiplier
  5259  001A28  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5260  001A2A  0EFF               	movlw	255
  5261  001A2C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  5262  001A2E  0EF0               	movlw	240
  5263  001A30  6E03               	movwf	___wmul@multiplicand^0,c
  5264  001A32  EC2F  F010         	call	___wmul	;wreg free
  5265  001A36  5010               	movf	lcd_str@i^0,w,c
  5266  001A38  6E0C               	movwf	??_lcd_str^0,c
  5267  001A3A  6A0D               	clrf	(??_lcd_str+1)^0,c
  5268  001A3C  5001               	movf	?___wmul^0,w,c
  5269  001A3E  260C               	addwf	??_lcd_str^0,f,c
  5270  001A40  5002               	movf	(?___wmul+1)^0,w,c
  5271  001A42  220D               	addwfc	(??_lcd_str+1)^0,f,c
  5272  001A44  500E               	movf	lcd_str@lin^0,w,c
  5273  001A46  5E0C               	subwf	??_lcd_str^0,f,c
  5274  001A48  0E00               	movlw	0
  5275  001A4A  5A0D               	subwfb	(??_lcd_str+1)^0,f,c
  5276  001A4C  BE0D               	btfsc	(??_lcd_str+1)^0,7,c
  5277  001A4E  EF32  F00D         	goto	u1401
  5278  001A52  500D               	movf	(??_lcd_str+1)^0,w,c
  5279  001A54  E109               	bnz	u1400
  5280  001A56  0E10               	movlw	16
  5281  001A58  5C0C               	subwf	??_lcd_str^0,w,c
  5282  001A5A  A0D8               	btfss	status,0,c
  5283  001A5C  EF32  F00D         	goto	u1401
  5284  001A60  EF34  F00D         	goto	u1400
  5285  001A64                     u1401:
  5286  001A64  EF3B  F00D         	goto	l2592
  5287  001A68                     u1400:
  5288  001A68                     
  5289                           ;lcd.c: 101:                 j++;
  5290  001A68  2A0F               	incf	lcd_str@j^0,f,c
  5291                           
  5292                           ;lcd.c: 102:                 lin++;
  5293  001A6A  2A0E               	incf	lcd_str@lin^0,f,c
  5294  001A6C                     
  5295                           ;lcd.c: 103:                 lcd_pos(j,0);
  5296  001A6C  0E00               	movlw	0
  5297  001A6E  6E06               	movwf	lcd_pos@col^0,c
  5298  001A70  500F               	movf	lcd_str@j^0,w,c
  5299  001A72  ECCE  F00D         	call	_lcd_pos
  5300  001A76                     l2592:
  5301                           
  5302                           ;lcd.c: 95:     while (str[i] != 0) {
  5303  001A76  5010               	movf	lcd_str@i^0,w,c
  5304  001A78  240A               	addwf	lcd_str@str^0,w,c
  5305  001A7A  6E0C               	movwf	??_lcd_str^0,c
  5306  001A7C  0E00               	movlw	0
  5307  001A7E  200B               	addwfc	(lcd_str@str+1)^0,w,c
  5308  001A80  6E0D               	movwf	(??_lcd_str+1)^0,c
  5309  001A82  C00C  FFF6         	movff	??_lcd_str,tblptrl
  5310  001A86  C00D  FFF7         	movff	??_lcd_str+1,tblptrh
  5311  001A8A  6AF8               	clrf	tblptru,c
  5312  001A8C  0E05               	movlw	(high __ramtop+-1)
  5313  001A8E  64F7               	cpfsgt	tblptrh,c
  5314  001A90  D003               	bra	u1417
  5315  001A92  0008               	tblrd		*
  5316  001A94  50F5               	movf	tablat,w,c
  5317  001A96  D005               	bra	u1410
  5318  001A98                     u1417:
  5319  001A98  CFF6 FFE9          	movff	tblptrl,fsr0l
  5320  001A9C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5321  001AA0  50EF               	movf	indf0,w,c
  5322  001AA2                     u1410:
  5323  001AA2  0900               	iorlw	0
  5324  001AA4  A4D8               	btfss	status,2,c
  5325  001AA6  EF57  F00D         	goto	u1421
  5326  001AAA  EF59  F00D         	goto	u1420
  5327  001AAE                     u1421:
  5328  001AAE  EFDB  F00C         	goto	l2580
  5329  001AB2                     u1420:
  5330  001AB2  0012               	return		;funcret
  5331  001AB4                     __end_of_lcd_str:
  5332                           	opt callstack 0
  5333                           
  5334 ;; *************** function ___wmul *****************
  5335 ;; Defined at:
  5336 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  multiplier      2    0[COMRAM] unsigned int 
  5339 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  product         2    4[COMRAM] unsigned int 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  2    0[COMRAM] unsigned int 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0, prodl, prodh
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5351 ;;      Params:         4       0       0       0       0       0       0
  5352 ;;      Locals:         2       0       0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0
  5354 ;;      Totals:         6       0       0       0       0       0       0
  5355 ;;Total ram usage:        6 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_lcd_str
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text16
  5365  00205E                     __ptext16:
  5366                           	opt callstack 0
  5367  00205E                     ___wmul:
  5368                           	opt callstack 28
  5369  00205E  5001               	movf	___wmul@multiplier^0,w,c
  5370  002060  0203               	mulwf	___wmul@multiplicand^0,c
  5371  002062  CFF3 F005          	movff	prodl,___wmul@product
  5372  002066  CFF4 F006          	movff	prodh,___wmul@product+1
  5373  00206A  5001               	movf	___wmul@multiplier^0,w,c
  5374  00206C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5375  00206E  50F3               	movf	243,w,c
  5376  002070  2606               	addwf	(___wmul@product+1)^0,f,c
  5377  002072  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5378  002074  0203               	mulwf	___wmul@multiplicand^0,c
  5379  002076  50F3               	movf	243,w,c
  5380  002078  2606               	addwf	(___wmul@product+1)^0,f,c
  5381  00207A  C005  F001         	movff	___wmul@product,?___wmul
  5382  00207E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5383  002082  0012               	return		;funcret
  5384  002084                     __end_of___wmul:
  5385                           	opt callstack 0
  5386                           
  5387 ;; *************** function _imprimeSimbolo *****************
  5388 ;; Defined at:
  5389 ;;		line 713 in file "main.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  val             1    wreg     unsigned char 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  val             1    9[COMRAM] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      void 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5403 ;;      Params:         0       0       0       0       0       0       0
  5404 ;;      Locals:         1       0       0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0
  5406 ;;      Totals:         1       0       0       0       0       0       0
  5407 ;;Total ram usage:        1 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    2
  5410 ;; This function calls:
  5411 ;;		_lcd_dat
  5412 ;;		_lcd_pos
  5413 ;; This function is called by:
  5414 ;;		_mensagem
  5415 ;;		_ligacao
  5416 ;;		_simulaMensagem
  5417 ;;		_simulaChamada
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text17
  5422  001D6E                     __ptext17:
  5423                           	opt callstack 0
  5424  001D6E                     _imprimeSimbolo:
  5425                           	opt callstack 27
  5426                           
  5427                           ;incstack = 0
  5428                           ;imprimeSimbolo@val stored from wreg
  5429  001D6E  6E0A               	movwf	imprimeSimbolo@val^0,c
  5430  001D70                     
  5431                           ;main.c: 714:     if(val == 1){
  5432  001D70  040A               	decf	imprimeSimbolo@val^0,w,c
  5433  001D72  A4D8               	btfss	status,2,c
  5434  001D74  EFBE  F00E         	goto	u1431
  5435  001D78  EFC0  F00E         	goto	u1430
  5436  001D7C                     u1431:
  5437  001D7C  EFD8  F00E         	goto	l2598
  5438  001D80                     u1430:
  5439  001D80                     
  5440                           ;main.c: 715:         lcd_pos(1,0);
  5441  001D80  0E00               	movlw	0
  5442  001D82  6E06               	movwf	lcd_pos@col^0,c
  5443  001D84  0E01               	movlw	1
  5444  001D86  ECCE  F00D         	call	_lcd_pos
  5445                           
  5446                           ;main.c: 716:         lcd_dat(0);
  5447  001D8A  0E00               	movlw	0
  5448  001D8C  EC05  F010         	call	_lcd_dat
  5449                           
  5450                           ;main.c: 717:         lcd_dat(1);
  5451  001D90  0E01               	movlw	1
  5452  001D92  EC05  F010         	call	_lcd_dat
  5453                           
  5454                           ;main.c: 718:         lcd_pos(2,0);
  5455  001D96  0E00               	movlw	0
  5456  001D98  6E06               	movwf	lcd_pos@col^0,c
  5457  001D9A  0E02               	movlw	2
  5458  001D9C  ECCE  F00D         	call	_lcd_pos
  5459                           
  5460                           ;main.c: 719:         lcd_dat(2);
  5461  001DA0  0E02               	movlw	2
  5462  001DA2  EC05  F010         	call	_lcd_dat
  5463                           
  5464                           ;main.c: 720:         lcd_dat(3);
  5465  001DA6  0E03               	movlw	3
  5466  001DA8  EC05  F010         	call	_lcd_dat
  5467                           
  5468                           ;main.c: 721:     }else if(val == 2){
  5469  001DAC  EFF7  F00E         	goto	l366
  5470  001DB0                     l2598:
  5471  001DB0  0E02               	movlw	2
  5472  001DB2  180A               	xorwf	imprimeSimbolo@val^0,w,c
  5473  001DB4  A4D8               	btfss	status,2,c
  5474  001DB6  EFDF  F00E         	goto	u1441
  5475  001DBA  EFE1  F00E         	goto	u1440
  5476  001DBE                     u1441:
  5477  001DBE  EFF7  F00E         	goto	l366
  5478  001DC2                     u1440:
  5479  001DC2                     
  5480                           ;main.c: 722:         lcd_pos(1,0);
  5481  001DC2  0E00               	movlw	0
  5482  001DC4  6E06               	movwf	lcd_pos@col^0,c
  5483  001DC6  0E01               	movlw	1
  5484  001DC8  ECCE  F00D         	call	_lcd_pos
  5485                           
  5486                           ;main.c: 723:         lcd_dat(4);
  5487  001DCC  0E04               	movlw	4
  5488  001DCE  EC05  F010         	call	_lcd_dat
  5489                           
  5490                           ;main.c: 724:         lcd_dat(5);
  5491  001DD2  0E05               	movlw	5
  5492  001DD4  EC05  F010         	call	_lcd_dat
  5493                           
  5494                           ;main.c: 725:         lcd_pos(2,0);
  5495  001DD8  0E00               	movlw	0
  5496  001DDA  6E06               	movwf	lcd_pos@col^0,c
  5497  001DDC  0E02               	movlw	2
  5498  001DDE  ECCE  F00D         	call	_lcd_pos
  5499                           
  5500                           ;main.c: 726:         lcd_dat(6);
  5501  001DE2  0E06               	movlw	6
  5502  001DE4  EC05  F010         	call	_lcd_dat
  5503                           
  5504                           ;main.c: 727:         lcd_dat(7);
  5505  001DE8  0E07               	movlw	7
  5506  001DEA  EC05  F010         	call	_lcd_dat
  5507  001DEE                     l366:
  5508  001DEE  0012               	return		;funcret
  5509  001DF0                     __end_of_imprimeSimbolo:
  5510                           	opt callstack 0
  5511                           
  5512 ;; *************** function _lcd_pos *****************
  5513 ;; Defined at:
  5514 ;;		line 44 in file "lcd.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;  lin             1    wreg     unsigned char 
  5517 ;;  col             1    5[COMRAM] unsigned char 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;  lin             1    8[COMRAM] unsigned char 
  5520 ;;  val             2    6[COMRAM] unsigned int 
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  1    wreg      void 
  5523 ;; Registers used:
  5524 ;;		wreg, status,2, status,0, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5530 ;;      Params:         1       0       0       0       0       0       0
  5531 ;;      Locals:         3       0       0       0       0       0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0
  5533 ;;      Totals:         4       0       0       0       0       0       0
  5534 ;;Total ram usage:        4 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    1
  5537 ;; This function calls:
  5538 ;;		_atraso_ms
  5539 ;;		_lcd_wr
  5540 ;; This function is called by:
  5541 ;;		_main
  5542 ;;		_menu
  5543 ;;		_mensagem
  5544 ;;		_ligacao
  5545 ;;		_simulaMensagem
  5546 ;;		_simulaChamada
  5547 ;;		_imprimeSimbolo
  5548 ;;		_lcd_str
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text18
  5553  001B9C                     __ptext18:
  5554                           	opt callstack 0
  5555  001B9C                     _lcd_pos:
  5556                           	opt callstack 27
  5557                           
  5558                           ;incstack = 0
  5559                           ;lcd_pos@lin stored from wreg
  5560  001B9C  6E09               	movwf	lcd_pos@lin^0,c
  5561  001B9E                     
  5562                           ;lcd.c: 45:     unsigned val;;lcd.c: 47:     if (lin == 0) {
  5563  001B9E  5009               	movf	lcd_pos@lin^0,w,c
  5564  001BA0  A4D8               	btfss	status,2,c
  5565  001BA2  EFD5  F00D         	goto	u1121
  5566  001BA6  EFD7  F00D         	goto	u1120
  5567  001BAA                     u1121:
  5568  001BAA  EFDF  F00D         	goto	l2412
  5569  001BAE                     u1120:
  5570  001BAE                     
  5571                           ;lcd.c: 48:         val = 0x80 + col;
  5572  001BAE  0E80               	movlw	128
  5573  001BB0  2406               	addwf	lcd_pos@col^0,w,c
  5574  001BB2  6E07               	movwf	lcd_pos@val^0,c
  5575  001BB4  6A08               	clrf	(lcd_pos@val+1)^0,c
  5576  001BB6  0E00               	movlw	0
  5577  001BB8  2208               	addwfc	(lcd_pos@val+1)^0,f,c
  5578                           
  5579                           ;lcd.c: 49:     } else if (lin == 1) {
  5580  001BBA  EF11  F00E         	goto	l2424
  5581  001BBE                     l2412:
  5582  001BBE  0409               	decf	lcd_pos@lin^0,w,c
  5583  001BC0  A4D8               	btfss	status,2,c
  5584  001BC2  EFE5  F00D         	goto	u1131
  5585  001BC6  EFE7  F00D         	goto	u1130
  5586  001BCA                     u1131:
  5587  001BCA  EFEF  F00D         	goto	l2416
  5588  001BCE                     u1130:
  5589  001BCE                     
  5590                           ;lcd.c: 50:         val = 0xC0 + col;
  5591  001BCE  0EC0               	movlw	192
  5592  001BD0  2406               	addwf	lcd_pos@col^0,w,c
  5593  001BD2  6E07               	movwf	lcd_pos@val^0,c
  5594  001BD4  6A08               	clrf	(lcd_pos@val+1)^0,c
  5595  001BD6  0E00               	movlw	0
  5596  001BD8  2208               	addwfc	(lcd_pos@val+1)^0,f,c
  5597                           
  5598                           ;lcd.c: 51:     } else if (lin == 2) {
  5599  001BDA  EF11  F00E         	goto	l2424
  5600  001BDE                     l2416:
  5601  001BDE  0E02               	movlw	2
  5602  001BE0  1809               	xorwf	lcd_pos@lin^0,w,c
  5603  001BE2  A4D8               	btfss	status,2,c
  5604  001BE4  EFF6  F00D         	goto	u1141
  5605  001BE8  EFF8  F00D         	goto	u1140
  5606  001BEC                     u1141:
  5607  001BEC  EF00  F00E         	goto	l2420
  5608  001BF0                     u1140:
  5609  001BF0                     
  5610                           ;lcd.c: 52:         val = 0x90 + col;
  5611  001BF0  0E90               	movlw	144
  5612  001BF2  2406               	addwf	lcd_pos@col^0,w,c
  5613  001BF4  6E07               	movwf	lcd_pos@val^0,c
  5614  001BF6  6A08               	clrf	(lcd_pos@val+1)^0,c
  5615  001BF8  0E00               	movlw	0
  5616  001BFA  2208               	addwfc	(lcd_pos@val+1)^0,f,c
  5617                           
  5618                           ;lcd.c: 53:     } else if (lin == 3) {
  5619  001BFC  EF11  F00E         	goto	l2424
  5620  001C00                     l2420:
  5621  001C00  0E03               	movlw	3
  5622  001C02  1809               	xorwf	lcd_pos@lin^0,w,c
  5623  001C04  A4D8               	btfss	status,2,c
  5624  001C06  EF07  F00E         	goto	u1151
  5625  001C0A  EF09  F00E         	goto	u1150
  5626  001C0E                     u1151:
  5627  001C0E  EF11  F00E         	goto	l384
  5628  001C12                     u1150:
  5629  001C12                     
  5630                           ;lcd.c: 54:         val = 0xD0 + col;
  5631  001C12  0ED0               	movlw	208
  5632  001C14  2406               	addwf	lcd_pos@col^0,w,c
  5633  001C16  6E07               	movwf	lcd_pos@val^0,c
  5634  001C18  6A08               	clrf	(lcd_pos@val+1)^0,c
  5635  001C1A  0E00               	movlw	0
  5636  001C1C  2208               	addwfc	(lcd_pos@val+1)^0,f,c
  5637  001C1E  EF11  F00E         	goto	l2424
  5638  001C22                     l384:
  5639  001C22                     l2424:
  5640                           
  5641                           ;lcd.c: 56:     PORTEbits.RE1 = 1;
  5642  001C22  8284               	bsf	132,1,c	;volatile
  5643  001C24                     
  5644                           ;lcd.c: 57:     lcd_wr(val);
  5645  001C24  5007               	movf	lcd_pos@val^0,w,c
  5646  001C26  EC6D  F010         	call	_lcd_wr
  5647  001C2A                     
  5648                           ;lcd.c: 58:     PORTEbits.RE2 = 0;
  5649  001C2A  9484               	bcf	132,2,c	;volatile
  5650  001C2C                     
  5651                           ;lcd.c: 59:     atraso_ms(3);
  5652  001C2C  0E00               	movlw	0
  5653  001C2E  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5654  001C30  0E03               	movlw	3
  5655  001C32  6E01               	movwf	atraso_ms@valor^0,c
  5656  001C34  ECE6  F00F         	call	_atraso_ms	;wreg free
  5657  001C38                     
  5658                           ;lcd.c: 60:     PORTEbits.RE1 = 0;
  5659  001C38  9284               	bcf	132,1,c	;volatile
  5660  001C3A                     
  5661                           ;lcd.c: 61:     atraso_ms(3);
  5662  001C3A  0E00               	movlw	0
  5663  001C3C  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5664  001C3E  0E03               	movlw	3
  5665  001C40  6E01               	movwf	atraso_ms@valor^0,c
  5666  001C42  ECE6  F00F         	call	_atraso_ms	;wreg free
  5667  001C46                     
  5668                           ;lcd.c: 62:     PORTEbits.RE1 = 1;
  5669  001C46  8284               	bsf	132,1,c	;volatile
  5670  001C48  0012               	return		;funcret
  5671  001C4A                     __end_of_lcd_pos:
  5672                           	opt callstack 0
  5673                           
  5674 ;; *************** function _lcd_dat *****************
  5675 ;; Defined at:
  5676 ;;		line 65 in file "lcd.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  val             1    wreg     unsigned char 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  val             1    5[COMRAM] unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5690 ;;      Params:         0       0       0       0       0       0       0
  5691 ;;      Locals:         1       0       0       0       0       0       0
  5692 ;;      Temps:          0       0       0       0       0       0       0
  5693 ;;      Totals:         1       0       0       0       0       0       0
  5694 ;;Total ram usage:        1 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    1
  5697 ;; This function calls:
  5698 ;;		_atraso_ms
  5699 ;;		_lcd_wr
  5700 ;; This function is called by:
  5701 ;;		_main
  5702 ;;		_mensagem
  5703 ;;		_ligacao
  5704 ;;		_imprimeSimbolo
  5705 ;;		_lcd_str
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text19
  5710  00200A                     __ptext19:
  5711                           	opt callstack 0
  5712  00200A                     _lcd_dat:
  5713                           	opt callstack 27
  5714                           
  5715                           ;incstack = 0
  5716                           ;lcd_dat@val stored from wreg
  5717  00200A  6E06               	movwf	lcd_dat@val^0,c
  5718  00200C                     
  5719                           ;lcd.c: 66:     PORTEbits.RE1 = 1;
  5720  00200C  8284               	bsf	132,1,c	;volatile
  5721  00200E                     
  5722                           ;lcd.c: 67:     lcd_wr(val);
  5723  00200E  5006               	movf	lcd_dat@val^0,w,c
  5724  002010  EC6D  F010         	call	_lcd_wr
  5725  002014                     
  5726                           ;lcd.c: 68:     PORTEbits.RE2 = 1;
  5727  002014  8484               	bsf	132,2,c	;volatile
  5728  002016                     
  5729                           ;lcd.c: 69:     atraso_ms(3);
  5730  002016  0E00               	movlw	0
  5731  002018  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5732  00201A  0E03               	movlw	3
  5733  00201C  6E01               	movwf	atraso_ms@valor^0,c
  5734  00201E  ECE6  F00F         	call	_atraso_ms	;wreg free
  5735  002022                     
  5736                           ;lcd.c: 70:     PORTEbits.RE1 = 0;
  5737  002022  9284               	bcf	132,1,c	;volatile
  5738  002024                     
  5739                           ;lcd.c: 71:     atraso_ms(3);
  5740  002024  0E00               	movlw	0
  5741  002026  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5742  002028  0E03               	movlw	3
  5743  00202A  6E01               	movwf	atraso_ms@valor^0,c
  5744  00202C  ECE6  F00F         	call	_atraso_ms	;wreg free
  5745  002030                     
  5746                           ;lcd.c: 72:     PORTEbits.RE1 = 1;
  5747  002030  8284               	bsf	132,1,c	;volatile
  5748  002032  0012               	return		;funcret
  5749  002034                     __end_of_lcd_dat:
  5750                           	opt callstack 0
  5751                           
  5752 ;; *************** function _lcd_init *****************
  5753 ;; Defined at:
  5754 ;;		line 75 in file "lcd.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;		None
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;		None
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      void 
  5761 ;; Registers used:
  5762 ;;		wreg, status,2, status,0, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5768 ;;      Params:         0       0       0       0       0       0       0
  5769 ;;      Locals:         0       0       0       0       0       0       0
  5770 ;;      Temps:          0       0       0       0       0       0       0
  5771 ;;      Totals:         0       0       0       0       0       0       0
  5772 ;;Total ram usage:        0 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    2
  5775 ;; This function calls:
  5776 ;;		_atraso_ms
  5777 ;;		_lcd_cmd
  5778 ;; This function is called by:
  5779 ;;		_main
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text20
  5784  001F70                     __ptext20:
  5785                           	opt callstack 0
  5786  001F70                     _lcd_init:
  5787                           	opt callstack 28
  5788  001F70                     
  5789                           ;lcd.c: 76:     PORTEbits.RE1 = 0;
  5790  001F70  9284               	bcf	132,1,c	;volatile
  5791                           
  5792                           ;lcd.c: 77:     PORTEbits.RE2 = 0;
  5793  001F72  9484               	bcf	132,2,c	;volatile
  5794  001F74                     
  5795                           ;lcd.c: 78:     atraso_ms(20);
  5796  001F74  0E00               	movlw	0
  5797  001F76  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5798  001F78  0E14               	movlw	20
  5799  001F7A  6E01               	movwf	atraso_ms@valor^0,c
  5800  001F7C  ECE6  F00F         	call	_atraso_ms	;wreg free
  5801  001F80                     
  5802                           ;lcd.c: 79:     PORTEbits.RE1 = 1;
  5803  001F80  8284               	bsf	132,1,c	;volatile
  5804                           
  5805                           ;lcd.c: 81:     lcd_cmd(0x38);
  5806  001F82  0E38               	movlw	56
  5807  001F84  EC1A  F010         	call	_lcd_cmd
  5808                           
  5809                           ;lcd.c: 82:     atraso_ms(5);
  5810  001F88  0E00               	movlw	0
  5811  001F8A  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5812  001F8C  0E05               	movlw	5
  5813  001F8E  6E01               	movwf	atraso_ms@valor^0,c
  5814  001F90  ECE6  F00F         	call	_atraso_ms	;wreg free
  5815                           
  5816                           ;lcd.c: 83:     lcd_cmd(0x38);
  5817  001F94  0E38               	movlw	56
  5818  001F96  EC1A  F010         	call	_lcd_cmd
  5819                           
  5820                           ;lcd.c: 84:     atraso_ms(1);
  5821  001F9A  0E00               	movlw	0
  5822  001F9C  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5823  001F9E  0E01               	movlw	1
  5824  001FA0  6E01               	movwf	atraso_ms@valor^0,c
  5825  001FA2  ECE6  F00F         	call	_atraso_ms	;wreg free
  5826                           
  5827                           ;lcd.c: 85:     lcd_cmd(0x38);
  5828  001FA6  0E38               	movlw	56
  5829  001FA8  EC1A  F010         	call	_lcd_cmd
  5830                           
  5831                           ;lcd.c: 86:     lcd_cmd(0x08);
  5832  001FAC  0E08               	movlw	8
  5833  001FAE  EC1A  F010         	call	_lcd_cmd
  5834                           
  5835                           ;lcd.c: 87:     lcd_cmd(0x0F);
  5836  001FB2  0E0F               	movlw	15
  5837  001FB4  EC1A  F010         	call	_lcd_cmd
  5838                           
  5839                           ;lcd.c: 88:     lcd_cmd(0x01);
  5840  001FB8  0E01               	movlw	1
  5841  001FBA  EC1A  F010         	call	_lcd_cmd
  5842                           
  5843                           ;lcd.c: 89:     lcd_cmd(0x38);
  5844  001FBE  0E38               	movlw	56
  5845  001FC0  EC1A  F010         	call	_lcd_cmd
  5846                           
  5847                           ;lcd.c: 90:     lcd_cmd(0x80);
  5848  001FC4  0E80               	movlw	128
  5849  001FC6  EC1A  F010         	call	_lcd_cmd
  5850  001FCA  0012               	return		;funcret
  5851  001FCC                     __end_of_lcd_init:
  5852                           	opt callstack 0
  5853                           
  5854 ;; *************** function _lcd_cmd *****************
  5855 ;; Defined at:
  5856 ;;		line 34 in file "lcd.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  val             1    wreg     unsigned char 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  val             1    5[COMRAM] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5870 ;;      Params:         0       0       0       0       0       0       0
  5871 ;;      Locals:         1       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0
  5873 ;;      Totals:         1       0       0       0       0       0       0
  5874 ;;Total ram usage:        1 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    1
  5877 ;; This function calls:
  5878 ;;		_atraso_ms
  5879 ;;		_lcd_wr
  5880 ;; This function is called by:
  5881 ;;		_main
  5882 ;;		_menu
  5883 ;;		_mensagem
  5884 ;;		_ligacao
  5885 ;;		_simulaMensagem
  5886 ;;		_simulaChamada
  5887 ;;		_lcd_init
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           	psect	text21
  5892  002034                     __ptext21:
  5893                           	opt callstack 0
  5894  002034                     _lcd_cmd:
  5895                           	opt callstack 28
  5896                           
  5897                           ;incstack = 0
  5898                           ;lcd_cmd@val stored from wreg
  5899  002034  6E06               	movwf	lcd_cmd@val^0,c
  5900  002036                     
  5901                           ;lcd.c: 35:     PORTEbits.RE1 = 1;
  5902  002036  8284               	bsf	132,1,c	;volatile
  5903  002038                     
  5904                           ;lcd.c: 36:     lcd_wr(val);
  5905  002038  5006               	movf	lcd_cmd@val^0,w,c
  5906  00203A  EC6D  F010         	call	_lcd_wr
  5907  00203E                     
  5908                           ;lcd.c: 37:     PORTEbits.RE2 = 0;
  5909  00203E  9484               	bcf	132,2,c	;volatile
  5910  002040                     
  5911                           ;lcd.c: 38:     atraso_ms(3);
  5912  002040  0E00               	movlw	0
  5913  002042  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5914  002044  0E03               	movlw	3
  5915  002046  6E01               	movwf	atraso_ms@valor^0,c
  5916  002048  ECE6  F00F         	call	_atraso_ms	;wreg free
  5917  00204C                     
  5918                           ;lcd.c: 39:     PORTEbits.RE1 = 0;
  5919  00204C  9284               	bcf	132,1,c	;volatile
  5920  00204E                     
  5921                           ;lcd.c: 40:     atraso_ms(3);
  5922  00204E  0E00               	movlw	0
  5923  002050  6E02               	movwf	(atraso_ms@valor+1)^0,c
  5924  002052  0E03               	movlw	3
  5925  002054  6E01               	movwf	atraso_ms@valor^0,c
  5926  002056  ECE6  F00F         	call	_atraso_ms	;wreg free
  5927  00205A                     
  5928                           ;lcd.c: 41:     PORTEbits.RE1 = 1;
  5929  00205A  8284               	bsf	132,1,c	;volatile
  5930  00205C  0012               	return		;funcret
  5931  00205E                     __end_of_lcd_cmd:
  5932                           	opt callstack 0
  5933                           
  5934 ;; *************** function _lcd_wr *****************
  5935 ;; Defined at:
  5936 ;;		line 30 in file "lcd.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  val             1    wreg     unsigned char 
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;  val             1    0[COMRAM] unsigned char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		wreg
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5950 ;;      Params:         0       0       0       0       0       0       0
  5951 ;;      Locals:         1       0       0       0       0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0
  5953 ;;      Totals:         1       0       0       0       0       0       0
  5954 ;;Total ram usage:        1 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_lcd_cmd
  5960 ;;		_lcd_pos
  5961 ;;		_lcd_dat
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	text22
  5966  0020DA                     __ptext22:
  5967                           	opt callstack 0
  5968  0020DA                     _lcd_wr:
  5969                           	opt callstack 27
  5970                           
  5971                           ;incstack = 0
  5972                           ;lcd_wr@val stored from wreg
  5973  0020DA  6E01               	movwf	lcd_wr@val^0,c
  5974  0020DC                     
  5975                           ;lcd.c: 31:     PORTD = val;
  5976  0020DC  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  5977  0020E0  0012               	return		;funcret
  5978  0020E2                     __end_of_lcd_wr:
  5979                           	opt callstack 0
  5980                           
  5981 ;; *************** function _atraso_ms *****************
  5982 ;; Defined at:
  5983 ;;		line 26 in file "atraso.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  valor           2    0[COMRAM] unsigned int 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  i               2    2[COMRAM] unsigned int 
  5988 ;;  j               1    4[COMRAM] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      void 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5998 ;;      Params:         2       0       0       0       0       0       0
  5999 ;;      Locals:         3       0       0       0       0       0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0
  6001 ;;      Totals:         5       0       0       0       0       0       0
  6002 ;;Total ram usage:        5 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_tc_tecla
  6008 ;;		_mensagem
  6009 ;;		_ligacao
  6010 ;;		_simulaChamada
  6011 ;;		_lcd_cmd
  6012 ;;		_lcd_pos
  6013 ;;		_lcd_dat
  6014 ;;		_lcd_init
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text23
  6019  001FCC                     __ptext23:
  6020                           	opt callstack 0
  6021  001FCC                     _atraso_ms:
  6022                           	opt callstack 29
  6023  001FCC                     
  6024                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
  6025  001FCC  0E00               	movlw	0
  6026  001FCE  6E04               	movwf	(atraso_ms@i+1)^0,c
  6027  001FD0  0E00               	movlw	0
  6028  001FD2  6E03               	movwf	atraso_ms@i^0,c
  6029  001FD4  EFF9  F00F         	goto	l2390
  6030  001FD8                     l2378:
  6031                           
  6032                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
  6033  001FD8  0E00               	movlw	0
  6034  001FDA  6E05               	movwf	atraso_ms@j^0,c
  6035  001FDC                     l2384:
  6036                           
  6037                           ;atraso.c: 35:    {;atraso.c: 38:    }
  6038  001FDC  2A05               	incf	atraso_ms@j^0,f,c
  6039  001FDE  0EC7               	movlw	199
  6040  001FE0  6405               	cpfsgt	atraso_ms@j^0,c
  6041  001FE2  EFF5  F00F         	goto	u1101
  6042  001FE6  EFF7  F00F         	goto	u1100
  6043  001FEA                     u1101:
  6044  001FEA  EFEE  F00F         	goto	l2384
  6045  001FEE                     u1100:
  6046  001FEE                     
  6047                           ;atraso.c: 39:  }
  6048  001FEE  4A03               	infsnz	atraso_ms@i^0,f,c
  6049  001FF0  2A04               	incf	(atraso_ms@i+1)^0,f,c
  6050  001FF2                     l2390:
  6051  001FF2  5001               	movf	atraso_ms@valor^0,w,c
  6052  001FF4  5C03               	subwf	atraso_ms@i^0,w,c
  6053  001FF6  5002               	movf	(atraso_ms@valor+1)^0,w,c
  6054  001FF8  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  6055  001FFA  A0D8               	btfss	status,0,c
  6056  001FFC  EF02  F010         	goto	u1111
  6057  002000  EF04  F010         	goto	u1110
  6058  002004                     u1111:
  6059  002004  EFEC  F00F         	goto	l2378
  6060  002008                     u1110:
  6061  002008  0012               	return		;funcret
  6062  00200A                     __end_of_atraso_ms:
  6063                           	opt callstack 0
  6064                           
  6065                           	psect	rparam
  6066  0000                     tosu	equ	0xFFF
  6067                           tosh	equ	0xFFE
  6068                           tosl	equ	0xFFD
  6069                           stkptr	equ	0xFFC
  6070                           pclatu	equ	0xFFB
  6071                           pclath	equ	0xFFA
  6072                           pcl	equ	0xFF9
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           indf0	equ	0xFEF
  6080                           postinc0	equ	0xFEE
  6081                           postdec0	equ	0xFED
  6082                           preinc0	equ	0xFEC
  6083                           plusw0	equ	0xFEB
  6084                           fsr0h	equ	0xFEA
  6085                           fsr0l	equ	0xFE9
  6086                           wreg	equ	0xFE8
  6087                           indf1	equ	0xFE7
  6088                           postinc1	equ	0xFE6
  6089                           postdec1	equ	0xFE5
  6090                           preinc1	equ	0xFE4
  6091                           plusw1	equ	0xFE3
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           bsr	equ	0xFE0
  6095                           indf2	equ	0xFDF
  6096                           postinc2	equ	0xFDE
  6097                           postdec2	equ	0xFDD
  6098                           preinc2	equ	0xFDC
  6099                           plusw2	equ	0xFDB
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8


Data Sizes:
    Strings     172
    Constant    4
    Data        129
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    110     121
    BANK0           128     66     109
    BANK1           256      0      97
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_22(CODE[9]), STR_21(CODE[8]), STR_20(CODE[8]), STR_19(CODE[7]), 
		 -> STR_18(CODE[9]), STR_17(CODE[8]), STR_16(CODE[9]), STR_15(CODE[8]), 
		 -> STR_14(CODE[13]), STR_13(CODE[38]), STR_12(CODE[9]), STR_11(CODE[9]), 
		 -> STR_10(CODE[8]), STR_9(CODE[7]), STR_8(CODE[8]), STR_7(CODE[8]), 
		 -> STR_6(CODE[9]), STR_5(CODE[13]), STR_4(CODE[17]), STR_3(CODE[14]), 
		 -> STR_2(CODE[11]), STR_1(CODE[8]), date(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_menu
    _simulaMensagem->_lcd_str
    _simulaChamada->_lcd_str
    _rtc_r->_i2c_rb
    _i2c_wb->_delay
    _i2c_stop->_delay
    _i2c_start->_delay
    _i2c_rb->_delay
    _menu->_mensagem
    _mensagem->_lcd_str
    _ligacao->_lcd_str
    _tc_tecla->_atraso_ms
    _lcd_str->_lcd_pos
    _imprimeSimbolo->_lcd_pos
    _lcd_pos->_atraso_ms
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                68    68      0  154144
                                            108 COMRAM     2     2      0
                                              0 BANK0     66    66      0
                            _lcd_cmd
                            _lcd_dat
                           _lcd_init
                            _lcd_pos
                            _lcd_str
                               _menu
                              _rtc_r
                      _simulaChamada
                     _simulaMensagem
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (1) _simulaMensagem                                       1     1      0   24852
                                             16 COMRAM     1     1      0
                     _imprimeSimbolo
                            _lcd_cmd
                            _lcd_pos
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (1) _simulaChamada                                        6     6      0   26424
                                             16 COMRAM     6     6      0
                          _atraso_ms
                     _imprimeSimbolo
                            _lcd_cmd
                            _lcd_pos
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (1) _rtc_r                                                1     1      0    1070
                                              9 COMRAM     1     1      0
                               _getd
                               _getu
                             _i2c_rb
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (2) _i2c_wb                                               4     4      0     228
                                              4 COMRAM     4     4      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0     138
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0     138
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_rb                                               5     5      0     252
                                              4 COMRAM     5     5      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                4     4      0     138
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getu                                                 1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getd                                                 1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _menu                                                 5     5      0   78833
                                            104 COMRAM     4     4      0
                            _lcd_cmd
                            _lcd_pos
                            _lcd_str
                            _ligacao
                           _mensagem
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _mensagem                                            88    88      0   31297
                                             16 COMRAM    88    88      0
                          _atraso_ms
                     _imprimeSimbolo
                            _lcd_cmd
                            _lcd_dat
                            _lcd_pos
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _ligacao                                             21    21      0   29085
                                             16 COMRAM    21    21      0
                          _atraso_ms
                     _imprimeSimbolo
                            _lcd_cmd
                            _lcd_dat
                            _lcd_pos
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (1) _tc_tecla                                            10     8      2    3337
                                              5 COMRAM    10     8      2
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (2) _lcd_str                                              7     5      2    8665
                                              9 COMRAM     7     5      2
                             ___wmul
                            _lcd_dat
                            _lcd_pos
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _imprimeSimbolo                                       1     1      0    6424
                                              9 COMRAM     1     1      0
                            _lcd_dat
                            _lcd_pos
 ---------------------------------------------------------------------------------
 (3) _lcd_pos                                              4     3      1    4952
                                              5 COMRAM     4     3      1
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_dat                                              1     1      0    1428
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    2812
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0    1428
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (4) _lcd_wr                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _atraso_ms                                            5     3      2    1384
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_dat
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
       _atraso_ms
       _lcd_wr
   _lcd_pos
     _atraso_ms
     _lcd_wr
   _lcd_str
     ___wmul
     _lcd_dat
       _atraso_ms
       _lcd_wr
     _lcd_pos
       _atraso_ms
       _lcd_wr
   _menu
     _lcd_cmd
       _atraso_ms
       _lcd_wr
     _lcd_pos
       _atraso_ms
       _lcd_wr
     _lcd_str
       ___wmul
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_pos
         _atraso_ms
         _lcd_wr
     _ligacao
       _atraso_ms
       _imprimeSimbolo
         _lcd_dat
           _atraso_ms
           _lcd_wr
         _lcd_pos
           _atraso_ms
           _lcd_wr
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_pos
         _atraso_ms
         _lcd_wr
       _lcd_str
         ___wmul
         _lcd_dat
           _atraso_ms
           _lcd_wr
         _lcd_pos
           _atraso_ms
           _lcd_wr
       _tc_tecla
         _atraso_ms
     _mensagem
       _atraso_ms
       _imprimeSimbolo
         _lcd_dat
           _atraso_ms
           _lcd_wr
         _lcd_pos
           _atraso_ms
           _lcd_wr
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_pos
         _atraso_ms
         _lcd_wr
       _lcd_str
         ___wmul
         _lcd_dat
           _atraso_ms
           _lcd_wr
         _lcd_pos
           _atraso_ms
           _lcd_wr
       _tc_tecla
         _atraso_ms
     _tc_tecla
       _atraso_ms
   _rtc_r
     _getd
     _getu
     _i2c_rb
       _delay
     _i2c_start
       _delay
     _i2c_stop
       _delay
     _i2c_wb
       _delay
   _simulaChamada
     _atraso_ms
     _imprimeSimbolo
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_pos
         _atraso_ms
         _lcd_wr
     _lcd_cmd
       _atraso_ms
       _lcd_wr
     _lcd_pos
       _atraso_ms
       _lcd_wr
     _lcd_str
       ___wmul
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_pos
         _atraso_ms
         _lcd_wr
     _tc_tecla
       _atraso_ms
   _simulaMensagem
     _imprimeSimbolo
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_pos
         _atraso_ms
         _lcd_wr
     _lcd_cmd
       _atraso_ms
       _lcd_wr
     _lcd_pos
       _atraso_ms
       _lcd_wr
     _lcd_str
       ___wmul
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_pos
         _atraso_ms
         _lcd_wr
     _tc_tecla
       _atraso_ms
   _tc_tecla
     _atraso_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      61       7       37.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80     42      6D       5       85.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6E      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     147      15        0.0%
DATA                 0      0     147       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Aug 01 12:36:33 2021

                      l8 2008               __CFG_BORV$ 00002E                       l23 20CE  
                     l50 1392                       l26 20D8                       l60 1412  
                     l52 137C                       l29 1B9A                       l62 13FA  
                     l55 13D2                       l57 13BA                       l90 1F12  
                     l67 143A                       l77 14FC                       l96 20C2  
                     l99 20B2      ___wmul@multiplicand 0003             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l111 1D6C                      l103 1F60  
                    l200 1986                      l104 1F6E                      l107 1CFC  
                    l220 07D0                      l108 1D44                      l213 073E  
                    l205 19A4                      l109 1D5C                      l232 08B4  
                    l402 1AB2                      l250 0A0A                      l226 0842  
                    l331 1312                      l244 0998                      l340 1CEA  
                    l405 2082                      l262 0AEE                      l238 0926  
                    l343 1542                      l256 0A7C                      l360 16E0  
                    l268 0B5E                      l357 16DC                      l366 1DEE  
                    l375 20E0                      l391 2032                      l384 1C22  
                    l297 0F58                      l378 205C                      l394 1FCA  
                    l388 1C48             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
    simulaMensagem@tecla 0011                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l3000 0954                     l3010 0982  
                   l3002 095E                     l3012 0994                     l3004 096C  
                   l3110 0B0A                     l3030 09D0                     l3014 099C  
                   l3006 096E                     l2400 2016                     l3120 0B46  
                   l3112 0B1C                     l3040 0A06                     l3032 09DE  
                   l3024 09B0                     l3008 0980                     l2402 2022  
                   l2410 1BAE                     l3210 0D96                     l3202 0D5C  
                   l3122 0B48                     l3114 0B26                     l3042 0A0E  
                   l3034 09E0                     l3026 09B4                     l2404 2024  
                   l2420 1C00                     l2412 1BBE                     l2500 1452  
                   l3220 0DD4                     l3204 0D6E                     l3124 0B5A  
                   l3116 0B34                     l3108 0B06                     l3060 0A50  
                   l3052 0A22                     l3036 09F2                     l3028 09C6  
                   l3140 0BE0                     l3300 1B10                     l2406 2030  
                   l2430 1C2C                     l2422 1C12                     l2414 1BCE  
                   l2502 1464                     l2510 148A                     l3230 0E14  
                   l3222 0DE6                     l3214 0DAC                     l3150 0C28  
                   l3142 0BF2                     l3126 0B62                     l3118 0B36  
                   l3070 0A80                     l3062 0A52                     l3054 0A26  
                   l3038 09F4                     l3310 1B3E                     l3302 1B1A  
                   l2432 1C38                     l2416 1BDE                     l2424 1C22  
                   l2408 1B9E                     l2600 1DC2                     l2440 207A  
                   l2520 14D4                     l2512 14A0                     l2504 1466  
                   l3224 0DF8                     l3216 0DBE                     l3208 0D84  
                   l3152 0C2C                     l3160 0C5C                     l3144 0BF6  
                   l3080 0A94                     l3064 0A64                     l3056 0A38  
                   l3320 1B7E                     l3312 1B48                     l3304 1B24  
                   l3400 1566                     l3330 1F74                     l2434 1C3A  
                   l2426 1C24                     l2418 1BF0                     l2530 14F6  
                   l2522 14E6                     l2514 14B2                     l2506 1476  
                   l2450 1328                     l3250 0ED4                     l3234 0E2A  
                   l3226 0DFA                     l3242 0E50                     l3170 0C82  
                   l3162 0C6E                     l3154 0C2E                     l3146 0C08  
                   l3090 0AC4                     l3082 0A98                     l3066 0A66  
                   l3058 0A42                     l3138 0B76                     l2602 20C6  
                   l2610 20B4                     l3322 1B82                     l3314 1B50  
                   l3306 1B2E                     l3410 15A0                     l3402 1574  
                   l3332 1F80                     l2436 1C46                     l2428 1C2A  
                   l2524 14EA                     l2516 14C2                     l2508 1482  
                   l2452 132C                     l2444 1314                     l2700 0FA8  
                   l3260 0F00                     l3252 0EDA                     l3236 0E3A  
                   l3228 0E02                     l3244 0EBA                     l3180 0CCC  
                   l3172 0C92                     l3164 0C70                     l3156 0C3E  
                   l3148 0C18                     l3092 0AD6                     l3084 0AAA  
                   l3068 0A78                     l3340 18AC                     l2540 1EBC  
                   l2612 20B8                     l3324 1B8A                     l3316 1B58  
                   l3308 1B38                     l3420 15EC                     l3412 15B2  
                   l3404 1576                     l3500 1734                     l2390 1FF2  
                   l2438 205E                     l2526 14EE                     l2518 14D2  
                   l2470 136E                     l2454 1330                     l2446 1320  
                   l2710 0FE8                     l2702 0FBA                     l3270 0F32  
                   l3262 0F0C                     l3254 0EE0                     l3190 0D0C  
                   l3182 0CDE                     l3174 0C9E                     l3166 0C74  
                   l3158 0C5A                     l3094 0AD8                     l3086 0AB4  
                   l3350 18EE                     l3342 18B6                     l3334 1884  
                   l2606 20D2                     l2542 1EC0                     l2534 1EB4  
                   l2614 20BC                     l2630 1F4C                     l3326 1B92  
                   l3318 1B62                     l3430 1638                     l3422 1602  
                   l3414 15B6                     l3406 1588                     l3502 1746  
                   l2384 1FDC                     l2376 1FCC                     l2392 20DC  
                   l3328 1F70                     l2528 14F2                     l2464 1340  
                   l2456 1334                     l2448 1324                     l2800 1268  
                   l2712 0FFA                     l2704 0FC0                     l3272 0F44  
                   l3264 0F16                     l3256 0EEA                     l3248 0ECC  
                   l3192 0D1E                     l3184 0CE4                     l3176 0CA8  
                   l3168 0C82                     l3096 0AEA                     l3088 0AC2  
                   l3360 1914                     l3352 18F2                     l3344 18CC  
                   l3336 188A                     l2552 1EEC                     l2560 1EF8  
                   l2640 1F6C                     l2632 1F4E                     l2624 1F1C  
                   l2616 1F16                     l3440 1696                     l3432 1644  
                   l3424 1610                     l3416 15CA                     l3408 1590  
                   l3520 178C                     l3504 174A                     l2386 1FDE  
                   l2378 1FD8                     l2570 2040                     l2394 200C  
                   l2490 1408                     l2482 13C8                     l2474 138A  
                   l2466 1354                     l2458 133C                     l2810 12AE  
                   l2802 126A                     l2730 1072                     l2722 1038  
                   l2706 0FD2                     l3274 0F50                     l3266 0F1E  
                   l3258 0EF6                     l3186 0CF6                     l3178 0CBA  
                   l3098 0AF2                     l3370 1982                     l3354 18FA  
                   l3346 18D8                     l3338 1896                     l2562 1EFC  
                   l2546 1ED4                     l2642 1CEE                     l2634 1F50  
                   l2626 1F46                     l2618 1F18                     l3290 1ADE  
                   l3450 16B6                     l3418 15E0                     l3434 165E  
                   l3522 17A0                     l3514 1766                     l3506 175A  
                   l2388 1FEE                     l2572 204C                     l2564 2036  
                   l2396 200E                     l2580 19B6                     l2492 1420  
                   l2484 13E0                     l2476 13A0                     l2468 1362  
                   l2820 12D8                     l2812 12C4                     l2804 127A  
                   l2740 10B0                     l2724 104A                     l2716 1010  
                   l3276 0F54                     l3268 0F30                     l3196 0D34  
                   l2900 07CC                     l3372 1996                     l3364 1926  
                   l3348 18DC                     l2556 1EF2                     l2548 1ED8  
                   l2660 1D32                     l2644 1CF2                     l2636 1F62  
                   l2628 1F48                     l3292 1AE8                     l3452 16BE  
                   l3436 1674                     l3428 1622                     l3380 14FE  
                   l3460 1C60                     l3540 17F2                     l3532 17BC  
                   l3524 17AC                     l3516 1778                     l3508 1760  
                   l2574 204E                     l2566 2038                     l2398 2014  
                   l2590 1A6C                     l2582 19E6                     l2494 142C  
                   l2486 13EC                     l2478 13AC                     l2822 12E4  
                   l2806 128C                     l2830 130A                     l2750 10F0  
                   l2742 10C2                     l2734 1088                     l2718 1022  
                   l3198 0D46                     l2902 07D4                     l3374 199E  
                   l3358 1902                     l3366 1960                     l2670 1D62  
                   l2662 1D34                     l2654 1CFE                     l2646 1CF4  
                   l2638 1F66                     l3294 1AF2                     l3286 1AB4  
                   l3454 16CA                     l3446 169A                     l3438 1680  
                   l3390 1520                     l3382 1502                     l3470 1CA2  
                   l3462 1C6C                     l3550 1810                     l3534 17CE  
                   l3526 17B6                     l3518 177C                     l2576 205A  
                   l2568 203E                     l2584 19E8                     l2592 1A76  
                   l2832 130E                     l2824 12EC                     l2808 12A2  
                   l2744 10D4                     l2736 109A                     l2728 1060  
                   l2920 0816                     l2912 07E8                     l2840 06BE  
                   l3368 1972                     l2672 1D68                     l2664 1D46  
                   l2656 1D02                     l2648 1CF6                     l2680 20A8  
                   l3296 1B00                     l3288 1AD8                     l3456 16CC  
                   l3448 16AA                     l3392 152C                     l3384 150A  
                   l3472 1CA8                     l3464 1C82                     l3560 183E  
                   l3552 1812                     l3536 17D2                     l2594 1D70  
                   l2586 1A24                     l2578 19A6                     l2498 1448  
                   l2826 12F8                     l2818 12C8                     l2754 1106  
                   l2746 10D6                     l2762 112C                     l2690 0F78  
                   l2930 0846                     l2922 0818                     l2914 07EC  
                   l2850 06CE                     l2842 06BE                     l2674 1D6A  
                   l2666 1D56                     l2658 1D30                     l2682 20AC  
                   l3298 1B06                     l3394 1536                     l3386 1510  
                   l3474 1CB4                     l3466 1C90                     l3458 1C4A  
                   l3554 1822                     l3546 17F6                     l3538 17E2  
                   l3490 1716                     l3482 16E2                     l2596 1D80  
                   l2588 1A68                     l2828 12FA                     l2780 11F2  
                   l2772 11C2                     l2756 1116                     l2748 10DE  
                   l2764 1196                     l2692 0F7C                     l2684 0F5A  
                   l2940 085A                     l2924 082A                     l2916 07FE  
                   l2860 06FE                     l2852 06D2                     l2844 06C2  
                   l2668 1D5E                     l3396 1552                     l3388 1516  
                   l3476 1CCA                     l3564 1846                     l3548 1808  
                   l3492 1728                     l3484 16FA                     l2598 1DB0  
                   l2790 1224                     l2782 11FE                     l2774 11C8  
                   l2766 11A8                     l2694 0F80                     l2686 0F5E  
                   l2950 088A                     l2942 085E                     l2926 082C  
                   l2918 0808                     l2870 072A                     l2862 0708  
                   l2854 06E0                     l2846 06C6                     l2838 06B2  
                   l2678 20A4                     l3398 155E                     l3478 1CD8  
                   l3566 1872                     l3558 1836                     l3494 172E  
                   l3486 16FE                     l2792 1236                     l2784 1208  
                   l2776 11CC                     l2768 11B0                     l3680 1140  
                   l2696 0F84                     l2688 0F74                     l2952 089C  
                   l2944 0870                     l2928 083E                     l2880 076E  
                   l2872 073A                     l2864 0716                     l2856 06E8  
                   l2848 06CA                     l3672 185C                     l3488 1704  
                   l2794 1246                     l2786 1210                     l2778 11DC  
                   l2698 0F96                     l2970 08D0                     l2954 089E  
                   l2946 087A                     l2890 0796                     l2882 0770  
                   l2874 0742                     l2866 0718                     l2858 06EC  
                   l3674 193A                     l2796 1252                     l2788 1222  
                   l3676 0B8A                     l2980 090E                     l2972 08E2  
                   l2956 08B0                     l2948 0888                     l2892 07A4  
                   l2884 0776                     l2868 0728                     l2798 125A  
                   l3678 0E64                     l2982 0910                     l2974 08EC  
                   l2958 08B8                     l2894 07A6                     l2886 077A  
                   l2878 0752                     l2984 0922                     l2976 08FA  
                   l2968 08CC                     l2896 07B8                     l2888 078C  
                   l2986 092A                     l2978 08FC                     l2898 07BA  
                   l2996 093E                     l2998 0942                     STR_1 06A2  
                   STR_2 0664                     STR_3 063C                     STR_4 062B  
                   STR_5 0657                     STR_6 0633                     STR_7 068A  
                   STR_8 069A                     STR_9 06AA                     u1100 1FEE  
                   u1101 1FEA                     u1110 2008                     u1111 2004  
                   u1120 1BAE                     u1200 13BA                     u2000 1996  
                   u1121 1BAA                     u1201 13B6                     u2001 1992  
                   u1130 1BCE                     u1210 13C8                     u2010 1552  
                   u1131 1BCA                     u1211 13C4                     u2011 154E  
                   u1140 1BF0                     u1300 14B2                     u1220 13E0  
                   u2020 1588                     u2100 1CEA                     u1141 1BEC  
                   u1301 14AE                     u1221 13DC                     u2021 1584  
                   u2101 1CE6                     u1150 1C12                     u1310 14C2  
                   u1230 13FA                     u2030 15A0                     u1151 1C0E  
                   u1311 14BE                     u1231 13F6                     u2031 159C  
                   u2111 170E                     u1400 1A68                     u1320 14D2  
                   u1240 1408                     u1160 1362                     u2040 15B2  
                   u1401 1A64                     u1321 14CE                     u1241 1404  
                   u1161 135E                     u2041 15AE                     u2121 1720  
                   u1410 1AA2                     u1330 14E6                     u1250 1420  
                   u1170 137C                     u2050 15CA                     u2130 175A  
                   u1331 14E2                     u1251 141C                     u1171 1378  
                   u2051 15C6                     u2131 1756                     u1420 1AB2  
                   u1260 143A                     u1180 138A                     u1340 1ED0  
                   u1500 1D56                     u2060 1622                     u2140 178C  
                   u1421 1AAE                     u1261 1436                     u1181 1386  
                   u1341 1ECC                     u1501 1D52                     u2061 161E  
                   u2141 1788                     u1430 1D80                     u1270 1448  
                   u1190 13A0                     u1510 11A8                     u1350 1EE8  
                   u2070 16AA                     u2150 17E2                     u1431 1D7C  
                   u1271 1444                     u1191 139C                     u1511 11A4  
                   u1351 1EE4                     u2071 16A6                     u2151 17DE  
                   u1440 1DC2                     u1280 1476                     u1520 11C2  
                   u1600 0728                     u1360 1F12                     u2080 16DC  
                   u2160 1808                     u1441 1DBE                     u1417 1A98  
                   u1281 1472                     u1521 11BE                     u1601 0724  
                   u1361 1F0E                     u2081 16D8                     u2161 1804  
                   u1370 19E2                     u1290 14A0                     u1530 11DC  
                   u1610 073A                     u2090 1CA2                     u2170 1822  
                   u1291 149C                     u1531 11D8                     u1611 0736  
                   u2091 1C9E                     u2171 181E                     u1380 1A14  
                   u1540 1236                     u1700 08B0                     u1620 0752  
                   u1460 1F60                     u2180 1832                     u1541 1232  
                   u1701 08AC                     u1621 074E                     u1461 1F5C  
                   u2181 182E                     u1390 1A24                     u1550 1246  
                   u1710 08C8                     u1630 07B8                     u1470 1D1A  
                   u1454 1F30                     u1391 1A20                     u1551 1242  
                   u1711 08C4                     u1631 07B4                     u1471 1D12  
                   u1455 1F2C                     u1560 127A                     u1800 0A1E  
                   u1720 090E                     u1640 07CC                     u1377 19D8  
                   u1561 1276                     u1801 0A1A                     u1721 090A  
                   u1641 07C8                     u1570 128C                     u1810 0A64  
                   u1730 0922                     u1650 07E4                     u1490 1D44  
                   u1387 1A0A                     u1571 1288                     u1811 0A60  
                   u1731 091E                     u1651 07E0                     u1491 1D40  
                   u1580 12D8                     u1900 0BF2                     u1820 0A78  
                   u1740 093A                     u1660 082A                     u1484 1D26  
                   u1581 12D4                     u1901 0BEE                     u1821 0A74  
                   u1741 0936                     u1661 0826                     u1485 1D22  
                   u1590 130A                     u1910 0C08                     u1830 0A90  
                   u1750 0980                     u1670 083E                     u1478 1D1C  
                   u1591 1306                     u1911 0C04                     u1831 0A8C  
                   u1751 097C                     u1671 083A                     u1920 0C18  
                   u1840 0AD6                     u1760 0994                     u1680 0856  
                   u1921 0C14                     u1841 0AD2                     u1761 0990  
                   u1681 0852                     u1930 0C28                     u1850 0AEA  
                   u1770 09AC                     u1690 089C                     u1931 0C24  
                   u1851 0AE6                     u1771 09A8                     u1691 0898  
                   u1940 0C3E                     u1860 0B02                     u1780 09F2  
                   u1941 0C3A                     u1861 0AFE                     u1781 09EE  
                   u1950 0C6E                     u1870 0B46                     u1790 0A06  
                   u1951 0C6A                     u1871 0B42                     u1791 0A02  
                   u1960 0ECC                     u1880 0B5A                     u1961 0EC8  
                   u1881 0B56                     u1970 0F44                     u1890 0B72  
                   u1971 0F40                     u1891 0B6E                     u1980 1972  
                   u1981 196E                     u1990 1982                     u1991 197E  
           __CFG_WDTPS$1 000000                     _date 0070                     _getd 20C4  
                   _getu 20D0                     _main 16E2                     _menu 1884  
                   _time 00E2                     fsr0h 000FEA                     indf0 000FEF  
                   fsr0l 000FE9                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000           simulaChamada@i 0014  
        ??_simulaChamada 0011                    ?_getd 0001                    ?_getu 0001  
                  ?_main 0001                    ?_menu 0001                    STR_10 0692  
                  STR_11 0633                    STR_20 0692                    STR_12 0678  
                  STR_21 0692                    STR_13 0605                    STR_22 066F  
                  STR_14 064A                    STR_15 0692                    STR_16 0678  
                  STR_17 0692                    STR_18 0681                    STR_19 06AA  
         __CFG_DEBUG$OFF 000000                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _PORTE 000F84                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_dat 2034  
        __end_of_lcd_cmd 205E          __end_of_lcd_pos 1C4A            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000          __end_of_lcd_str 1AB4            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _delay 1EB4          __end_of_ligacao 1314  
                  _linha 0601                    _rtc_r 1AB4                    main@i 00C1  
         __CFG_BOREN$OFF 000000                    tablat 000FF5                    plusw1 000FE3  
                  plusw2 000FDB                    status 000FD8           __CFG_PBADEN$ON 000000  
            ligacao@buzz 0022          __initialization 1DF0             __end_of_getd 20D0  
           __end_of_getu 20DA             __end_of_main 1884             __end_of_menu 19A6  
     simulaChamada@tecla 0016       simulaChamada@tempo 0013         __end_of_i2c_stop 20B4  
                 ??_getd 0001                   ??_getu 0001                   ??_main 006D  
                 ??_menu 0069            __activetblptr 000002          tc_tecla@timeout 0006  
                 ?_delay 0001         ??_simulaMensagem 0011                   _ADCON1 000FC1  
                 ?_rtc_r 0001       __size_of_i2c_start 0010         ??_imprimeSimbolo 000A  
                 _i2c_rb 1CEC                   _i2c_wb 1F14           __CFG_XINST$OFF 000000  
       __end_of_lcd_init 1FCC                   ___wmul 205E                   _lcd_wr 20DA  
                 delay@i 0001                   delay@j 0003                   delay@k 0004  
                 clear_0 1E36                   clear_1 1E42         __end_of_mensagem 0F5A  
                 getd@nn 0001                ??_lcd_dat 0006                   getu@nn 0001  
              ??_lcd_cmd 0006         __end_of_tc_tecla 14FE                ??_lcd_pos 0007  
              ??_lcd_str 000C                ??_ligacao 0011             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 1E48            ___rparam_used 000001  
           ligacao@contN 0025             ligacao@ligar 0014             ligacao@tecla 0024  
           ligacao@tempo 0015           __pcstackCOMRAM 0001             __pidataBANK0 2084  
           __pidataBANK1 1E52            __end_of_delay 1F14            __end_of_linha 0605  
          __end_of_rtc_r 1B9C      simulaChamada@old_TC 0011            tc_tecla@old_D 000B  
      __end_of_i2c_start 20C4                  ??_delay 0001                  ??_rtc_r 000A  
     __size_of_atraso_ms 003E               __pbssBANK0 00E2                ?_i2c_stop 0001  
            tc_tecla@ret 000E              tc_tecla@tmp 000A                  ?_i2c_rb 0001  
                ?_i2c_wb 0001                  ?___wmul 0001                  ?_lcd_wr 0001  
      imprimeSimbolo@val 000A                ?_lcd_init 0001                  i2c_rb@i 0009  
                i2c_wb@i 0008               ??_i2c_stop 0005                ?_mensagem 0001  
              ?_tc_tecla 0006                  __Hparam 0000          __size_of_i2c_rb 0082  
        __size_of_i2c_wb 005C                  __Lparam 0000          __size_of___wmul 0026  
      __end_of_atraso_ms 200A             __psmallconst 0600    __end_of_simulaChamada 16E2  
        __size_of_lcd_wr 0008          __CFG_STVREN$OFF 000000                  __pcinit 1DF0  
                __ramtop 0600                  __ptext0 16E2                  __ptext1 1C4A  
                __ptext2 14FE                  __ptext3 1AB4                  __ptext4 1F14  
                __ptext5 20A4                  __ptext6 20B4                  __ptext7 1CEC  
                __ptext8 1EB4                  __ptext9 20D0                  _lcd_dat 200A  
                _lcd_cmd 2034                  _lcd_pos 1B9C                  _lcd_str 19A6  
                _ligacao 0F5A               ??_lcd_init 0007     end_of_initialization 1E48  
          __Lmediumconst 0000               ??_mensagem 0011               ??_tc_tecla 0008  
                postdec1 000FE5                  postinc0 000FEE                _PORTCbits 000F82  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISCbits 000F94  
             lcd_dat@val 0006               lcd_cmd@val 0006                i2c_rb@ack 0007  
              i2c_rb@ret 0008               lcd_pos@col 0006               lcd_pos@lin 0009  
             lcd_pos@val 0007                i2c_wb@val 0007               lcd_str@lin 000E  
             lcd_str@str 000A               main@teleph 0080            ligacao@old_TC 0013  
          ligacao@numero 0016           __end_of_i2c_rb 1D6E           __end_of_i2c_wb 1F70  
             atraso_ms@i 0003               atraso_ms@j 0005           __end_of___wmul 2084  
         __end_of_lcd_wr 20E2     simulaChamada@atender 0012      start_initialization 1DF0  
              _i2c_start 20B4        simulaChamada@buzz 0015         mensagem@mensagem 0013  
         tc_tecla@old_TB 000D           tc_tecla@old_TD 000C        __size_of_i2c_stop 0010  
               ??_i2c_rb 0005  __size_of_simulaMensagem 00A2                 ??_i2c_wb 0005  
               ??___wmul 0005                 ??_lcd_wr 0001              __pdataBANK0 00C2  
            __pdataBANK1 0100         __CFG_LPT1OSC$OFF 000000  __size_of_imprimeSimbolo 0082  
            __pbssCOMRAM 006F            __pcstackBANK0 0080               ?_i2c_start 0001  
      __size_of_lcd_init 005C               tc_tecla@to 0008        __size_of_mensagem 08A8  
      __CFG_CCP2MX$PORTC 000000        __size_of_tc_tecla 01EA       _condRetornaInicial 006F  
               ?_lcd_dat 0001                 ?_lcd_cmd 0001                 ?_lcd_pos 0006  
               ?_lcd_str 000A                _atraso_ms 1FCC                 ?_ligacao 0001  
            __smallconst 0600           __size_of_delay 0060           __size_of_rtc_r 00E8  
        _identificaSinal 00EC           atraso_ms@valor 0001           ___wmul@product 0005  
              main@F2384 00C2                main@F2386 0141        ___wmul@multiplier 0001  
             ?_atraso_ms 0001                lcd_wr@val 0001                main@mensg 00A0  
              main@tecla 00C0              ??_i2c_start 0005                copy_data0 1E04  
              copy_data1 1E24          mensagem@contMSG 0062   __size_of_simulaChamada 01E4  
               _i2c_stop 20A4           _simulaMensagem 1C4A                 __Hrparam 0000  
              menu@tecla 006C                menu@tempo 006B                 __Lrparam 0000  
              mensagem@i 0061           _imprimeSimbolo 1D6E         __size_of_lcd_dat 002A  
       __size_of_lcd_cmd 002A         __size_of_lcd_pos 00AE         __size_of_lcd_str 010E  
       __size_of_ligacao 03BA                tc_tecla@i 000F                 __ptext10 20C4  
               __ptext11 1884                 __ptext20 1F70                 __ptext12 06B2  
               __ptext21 2034                 __ptext13 0F5A                 __ptext22 20DA  
               __ptext14 1314                 __ptext23 1FCC                 __ptext15 19A6  
               __ptext16 205E                 __ptext17 1D6E                 __ptext18 1B9C  
               __ptext19 200A                 _lcd_init 1F70   __end_of_simulaMensagem 1CEC  
          __size_of_getd 000C            __size_of_getu 000A            __size_of_main 01A2  
          __size_of_menu 0122                 _mensagem 06B2                 _tc_tecla 1314  
            _listaLetras 0100   __end_of_imprimeSimbolo 1DF0                 lcd_str@i 0010  
               lcd_str@j 000F            _simulaChamada 14FE              ??_atraso_ms 0003  
         mensagem@coluna 0065                 ligacao@i 0023           mensagem@old_TC 0053  
         mensagem@numero 0055          ?_simulaMensagem 0001                 rtc_r@tmp 000A  
        ?_imprimeSimbolo 0001            mensagem@contN 0066           ?_simulaChamada 0001  
          mensagem@linha 0063            mensagem@letra 0068            mensagem@tecla 0067  
          mensagem@tempo 0064  
